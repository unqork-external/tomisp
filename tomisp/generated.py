"""
MISP Object builder
Autogenerated on: 2023-10-15T03:00:21.942668Z
"""
from pymisp import MISPEvent
from pymisp import MISPObject

from .common import generate_uniq
from .common import validate_args
from .misphelper import MISPHelper


def create_obj_victim(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_victim - function for creating MISP victim object

    victim = Victim object describes the target of an attack or abuse.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        classification - The type of entity being targeted.
        description - Description of the victim
        domain - Domain name of the organisation targeted.
        email - The email address(es) of the user targeted.
        external - External target organisations affected by this attack.
        ip-address - IP address(es) of the node targeted.
        name - The name of the department(s) or organisation(s) targeted.
        node - Name(s) of node that was targeted.
        reference - External reference to the victim/case.
        regions - The list of regions or locations from the victim targeted. ISO 3166 should be used.
        roles - The list of roles targeted within the victim.
        sectors - The list of sectors that the victim belong to
        user - The username(s) of the user targeted.

    Must have one of the following: ['name', 'regions', 'sectors']

    Returns:
        a MISP object representing an 'victim'

    """
    requires = ["name", "regions", "sectors"]
    args = [
        "classification",
        "description",
        "domain",
        "email",
        "external",
        "ip-address",
        "name",
        "node",
        "reference",
        "regions",
        "roles",
        "sectors",
        "user",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|victim"
    obj, isNew = MISPHelper._create_obj_cached(event, "victim", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_scrippsco2_co2_monthly(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_scrippsco2_co2_monthly - function for creating MISP scrippsco2-co2-monthly object

    scrippsco2-co2-monthly = Monthly average CO2 concentrations (ppm) derived from flask air samples.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        monthly-co2 - Monthly CO2 concentrations in micro-mol CO2 per mole (ppm) reported on the 2008A SIO manometric mole fraction scale. This is the standard version of the data most often sought.
        monthly-co2-seasonal-adjustment - Same data after a seasonal adjustment to remove the quasi-regular seasonal cycle.  The adjustment involves subtracting from the data a 4-harmonic fit with a linear gain factor.
        monthly-co2-smoothed - Smoothed version of the data generated from a stiff cubic spline function plus 4-harmonic functions with linear gain.
        monthly-co2-smoothed-seasonal-adjustment - Same smoothed version with the seasonal cycle removed.
        sample-date-excel - M$Excel spreadsheet date format.
        sample-date-fractional - Decimal year and fractional year.
        sample-datetime - The monthly values have been adjusted to 24:00 hours on the 15th of each month.

    Returns:
        a MISP object representing an 'scrippsco2-co2-monthly'

    """
    requires = []
    args = [
        "monthly-co2",
        "monthly-co2-seasonal-adjustment",
        "monthly-co2-smoothed",
        "monthly-co2-smoothed-seasonal-adjustment",
        "sample-date-excel",
        "sample-date-fractional",
        "sample-datetime",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|scrippsco2-co2-monthly"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "scrippsco2-co2-monthly", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_netflow(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_netflow - function for creating MISP netflow object

    netflow = Netflow object describes an network object based on the Netflowv5/v9 minimal definition

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        byte-count - Bytes counted in this flow
        community-id - Community id of the represented flow
        direction - Direction of this flow
        dst-as - Destination AS number for this flow
        dst-port - Destination port of the netflow
        first-packet-seen - First packet seen in this flow
        flow-count - Flows counted in this flow
        icmp-type - ICMP type of the flow (if the traffic is ICMP)
        ip-dst - IP address destination of the netflow
        ip-protocol-number - IP protocol number of this flow
        ip-src - IP address source of the netflow
        ip_version - IP version of this flow
        last-packet-seen - Last packet seen in this flow
        packet-count - Packets counted in this flow
        protocol - Protocol used for this flow
        src-as - Source AS number for this flow
        src-port - Source port of the netflow
        tcp-flags - TCP flags of the flow

    Must have one of the following: ['first-packet-seen', 'ip-src', 'ip-dst', 'dst-port', 'community-id']

    Returns:
        a MISP object representing an 'netflow'

    """
    requires = ["first-packet-seen", "ip-src", "ip-dst", "dst-port", "community-id"]
    args = [
        "byte-count",
        "community-id",
        "direction",
        "dst-as",
        "dst-port",
        "first-packet-seen",
        "flow-count",
        "icmp-type",
        "ip-dst",
        "ip-protocol-number",
        "ip-src",
        "ip_version",
        "last-packet-seen",
        "packet-count",
        "protocol",
        "src-as",
        "src-port",
        "tcp-flags",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|netflow"
    obj, isNew = MISPHelper._create_obj_cached(event, "netflow", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_diamond_event(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_diamond_event - function for creating MISP diamond-event object

    diamond-event = A diamond model event object consisting of the four diamond features advesary, infrastructure, capability and victim, several meta-features and ioc attributes.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        Advesary - The advesary who attacks the victim
        Capability - The capability used to attack the victim
        Description - Further context to the event
        Direction - The network-based direction of the event
        EventID - Id of the event
        Infrastructure - The infrastructure used in the attack
        Methodology - Mitre-Attack mapping of the event
        Phase - The event mapped to a phase of the killchain
        Resources - The resources the attacker needed for the event to succeed
        Result - The result of the event
        Timestamp - Timestamp when the event happened
        Victim - The attacked victim
        ioc - Generic IOC
        textfield - Generic textfield

    Returns:
        a MISP object representing an 'diamond-event'

    """
    requires = []
    args = [
        "Advesary",
        "Capability",
        "Description",
        "Direction",
        "EventID",
        "Infrastructure",
        "Methodology",
        "Phase",
        "Resources",
        "Result",
        "Timestamp",
        "Victim",
        "ioc",
        "textfield",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|diamond-event"
    obj, isNew = MISPHelper._create_obj_cached(event, "diamond-event", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_organization(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_organization - function for creating MISP organization object

    organization = An object which describes an organization.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        VAT - VAT or TAX-ID of the organization
        address - Postal address of the organization.
        alias - Alias of the organization
        contact_information - Generic contact information (e-mail, phone number, etc.) for this Organization, with no specific format requirement.
        date-of-inception - Date of inception of the organization
        description - Description of the organization
        e-mail - Email address of the organization.
        fax-number - Fax number of the organization.
        name - Name of the organization
        phone-number - Phone number of the organization.
        registration-number - Registration number of the organization
        role - The role of the organization.
        sector - Describing the organization's sector of activity.
        type-of-organization - Type of the organization

    Must have one of the following: ['name', 'alias']

    Returns:
        a MISP object representing an 'organization'

    """
    requires = ["name", "alias"]
    args = [
        "VAT",
        "address",
        "alias",
        "contact_information",
        "date-of-inception",
        "description",
        "e-mail",
        "fax-number",
        "name",
        "phone-number",
        "registration-number",
        "role",
        "sector",
        "type-of-organization",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|organization"
    obj, isNew = MISPHelper._create_obj_cached(event, "organization", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_monetary_impact(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_monetary_impact - function for creating MISP monetary-impact object

    monetary-impact = Monetary Impact object as described in STIX 2.1 Incident object extension.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        conversion_rate - Conversion rate between currency and currency_actual (if needed).
        conversion_time - Timestamp when the conversion rate was queried.
        criticality - Criticality of the impact
        currency - Currency used to describe the max and min amount of the impact.
        currency_actual - Currency that the impact actually used.
        description - Additional details about the impact.
        end_time - The date and time the impact was last recorded.
        end_time_fidelity - Level of fidelity that the `end_time` is recorded in.
        max_amount - Maximum damage estimate.
        min_amount - Minimum damage estimate.
        recoverability - Recoverability of this particular impact with respect to feasibility and required time and resources.
        start_time - The date and time the impact was first recorded.
        start_time_fidelity - Level of fidelity that the `start_time` is recorded in.
        variety - Variety of the moneraty impact.

    Returns:
        a MISP object representing an 'monetary-impact'

    """
    requires = []
    args = [
        "conversion_rate",
        "conversion_time",
        "criticality",
        "currency",
        "currency_actual",
        "description",
        "end_time",
        "end_time_fidelity",
        "max_amount",
        "min_amount",
        "recoverability",
        "start_time",
        "start_time_fidelity",
        "variety",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|monetary-impact"
    obj, isNew = MISPHelper._create_obj_cached(event, "monetary-impact", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_tsk_web_bookmark(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_tsk_web_bookmark - function for creating MISP tsk-web-bookmark object

    tsk-web-bookmark = An Object Template to add evidential bookmarks identified during a digital forensic investigation.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        URL - The URL saved as bookmark.
        additional-comments - Comments.
        browser - Browser used to access the URL.
        datetime-bookmarked - date and time when the URL was added to favorites.
        domain-ip - IP of the URL domain.
        domain-name - Domain of the URL.
        name - Book mark name.
        title - Title of the web page

    Returns:
        a MISP object representing an 'tsk-web-bookmark'

    """
    requires = []
    args = [
        "URL",
        "additional-comments",
        "browser",
        "datetime-bookmarked",
        "domain-ip",
        "domain-name",
        "name",
        "title",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|tsk-web-bookmark"
    obj, isNew = MISPHelper._create_obj_cached(event, "tsk-web-bookmark", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_scrippsco2_o18_daily(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_scrippsco2_o18_daily - function for creating MISP scrippsco2-o18-daily object

    scrippsco2-o18-daily = Daily average O18 concentrations (ppm) derived from flask air samples.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        flag - Flag (see taxonomy for details).
        number-flask - Number of flasks used in daily average.
        o18-value - O18 value (ppm) - O18 concentrations are measured on the '08A' Calibration Scale
        sample-date-excel - M$Excel spreadsheet date format.
        sample-date-fractional - Decimal year and fractional year.
        sample-datetime - Datetime the sample has been taken

    Must have one of the following: ['sample-datetime', 'sample-date-excel', 'sample-date-fractional', 'number-flask', 'flag', 'o18-value']

    Returns:
        a MISP object representing an 'scrippsco2-o18-daily'

    """
    requires = [
        "sample-datetime",
        "sample-date-excel",
        "sample-date-fractional",
        "number-flask",
        "flag",
        "o18-value",
    ]
    args = [
        "flag",
        "number-flask",
        "o18-value",
        "sample-date-excel",
        "sample-date-fractional",
        "sample-datetime",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|scrippsco2-o18-daily"
    obj, isNew = MISPHelper._create_obj_cached(event, "scrippsco2-o18-daily", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_reddit_subreddit(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_reddit_subreddit - function for creating MISP reddit-subreddit object

    reddit-subreddit = Public or private subreddit.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        active-user-count - Number of active accounts in the subreddit.
        archive - Archive of the original subreddit (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts, subreddit members, etc.
        banner-background-image - A screen capture or exported subreddit header.
        banner-background-url - A link to the subreddit header.
        creator - The user account that created the subreddit (do not include u/).
        description - A description of the subreddit.
        display-name - The name of the subreddit (exclude the r/).
        embedded-link - Link embedded in the subreddit description (potentially malicious).
        embedded-safe-link - Link embedded in the subreddit description (supposed safe).
        hashtag - Hashtag used to identify or promote the subreddit.
        header-title - A title of the subreddit.
        icon-img - A screen capture or exported subreddit community icon.
        icon-img-url - A link to the subreddit community icon.
        link - Original link to the subreddit (supposed harmless).
        moderator - A user account who is a moderator of the subreddit (do not include u/).
        privacy - Subreddit privacy.
        rules - Raw text of the rules of the subreddit.
        submit-text - The submission form raw text when posting to the subreddit.
        subreddit-alias - Aliases or previous names of subreddit.
        subreddit-type - Subreddit type, e.g. general, buy and sell etc.
        url - Original URL location of the subreddit (potentially malicious).

    Must have one of the following: ['display-name', 'description', 'archive', 'link']

    Returns:
        a MISP object representing an 'reddit-subreddit'

    """
    requires = ["display-name", "description", "archive", "link"]
    args = [
        "active-user-count",
        "archive",
        "attachment",
        "banner-background-image",
        "banner-background-url",
        "creator",
        "description",
        "display-name",
        "embedded-link",
        "embedded-safe-link",
        "hashtag",
        "header-title",
        "icon-img",
        "icon-img-url",
        "link",
        "moderator",
        "privacy",
        "rules",
        "submit-text",
        "subreddit-alias",
        "subreddit-type",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|reddit-subreddit"
    obj, isNew = MISPHelper._create_obj_cached(event, "reddit-subreddit", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_tor_node(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_tor_node - function for creating MISP tor-node object

    tor-node = Tor node (which protects your privacy on the internet by hiding the connection between users Internet address and the services used by the users) description which are part of the Tor network at a time.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - IP address of the Tor node seen.
        description - Tor node description.
        document - Raw document from the consensus.
        fingerprint - router's fingerprint.
        first-seen - When the Tor node designed by the IP address has been seen for the first time.
        flags - list of flag associated with the node.
        last-seen - When the Tor node designed by the IP address has been seen for the last time.
        nickname - router's nickname.
        published - router's publication time. This can be different from first-seen and last-seen.
        text - Tor node comment.
        version - parsed version of tor, this is None if the relay's using a new versioning scheme.
        version_line - versioning information reported by the node.

    Must have one of the following: ['address', 'first-seen', 'last-seen', 'description', 'text']

    Returns:
        a MISP object representing an 'tor-node'

    """
    requires = ["address", "first-seen", "last-seen", "description", "text"]
    args = [
        "address",
        "description",
        "document",
        "fingerprint",
        "first-seen",
        "flags",
        "last-seen",
        "nickname",
        "published",
        "text",
        "version",
        "version_line",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|tor-node"
    obj, isNew = MISPHelper._create_obj_cached(event, "tor-node", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ADS(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ADS - function for creating MISP ADS object

    ADS = An object defining ADS - Alerting and Detection Strategy by PALANTIR. Can be used for detection engineering.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        acd-element - lists the steps required to generate a representative true positive event which triggers this alert.
        additional_resources - Any other internal, external, or technical references that may be useful for understanding the ADS.
        blind_spots_and_assumptions - Recognized issues, assumptions, and areas where an ADS may not fire.
        categorization - Provides a mapping of the ADS to the relevant entry in the Att&CK.
        date - Enter date, when ADS has been created or edited.
        false_positives - Known instances of an ADS misfiring due to a misconfiguration, idiosyncrasy in the environment, or other non-malicious scenario.
        goal - Short, plaintext description of the type of behavior the ADS is supposed to detect.
        priority - Describes the various alerting levels that an ADS may be tagged with.
        responses - General response steps in the event that this alert fired.
        sigma_rule - Rule in SIGMA format.
        strategy_abstract - High-level walkthrough of how the ADS functions.
        technical_context - Detailed information and background needed for a responder to understand all components of the alert.
        validation - lists the steps required to generate a representative true positive event which triggers this alert.

    Returns:
        a MISP object representing an 'ADS'

    """
    requires = []
    args = [
        "acd-element",
        "additional_resources",
        "blind_spots_and_assumptions",
        "categorization",
        "date",
        "false_positives",
        "goal",
        "priority",
        "responses",
        "sigma_rule",
        "strategy_abstract",
        "technical_context",
        "validation",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ADS"
    obj, isNew = MISPHelper._create_obj_cached(event, "ADS", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_facebook_post(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_facebook_post - function for creating MISP facebook-post object

    facebook-post = Post on a Facebook wall.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original document (Internet Archive, Archive.is, etc).
        attachment - The facebook post file or screen capture.
        embedded-link - Link in the facebook post
        embedded-safe-link - Safe link in the facebook post
        hashtag - Hashtag embedded in the facebook post
        in-reply-to-display-name - The user display name of the facebook this post shares.
        in-reply-to-status-id - The facebook ID of the post that this post shares.
        in-reply-to-user-id - The user ID of the facebook this post shares.
        language - The language of the post.
        link - Original link to the facebook post (supposed harmless).
        post - Raw text of the post.
        post-id - The facebook post id.
        post-location - id of the group, page or wall the post was posted to.
        removal-date - When the facebook post was removed.
        url - Original URL of the facebook post, e.g. link shortener (potentially malicious).
        user-id - Id of the account who posted.
        user-name - Display name of the account who posted.
        username - Username who posted the facebook post
        username-quoted - Username who is quoted in the facebook post.

    Must have one of the following: ['post', 'post-id', 'archive', 'url', 'link', 'attachment']

    Returns:
        a MISP object representing an 'facebook-post'

    """
    requires = ["post", "post-id", "archive", "url", "link", "attachment"]
    args = [
        "archive",
        "attachment",
        "embedded-link",
        "embedded-safe-link",
        "hashtag",
        "in-reply-to-display-name",
        "in-reply-to-status-id",
        "in-reply-to-user-id",
        "language",
        "link",
        "post",
        "post-id",
        "post-location",
        "removal-date",
        "url",
        "user-id",
        "user-name",
        "username",
        "username-quoted",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|facebook-post"
    obj, isNew = MISPHelper._create_obj_cached(event, "facebook-post", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_scrippsco2_o18_monthly(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_scrippsco2_o18_monthly - function for creating MISP scrippsco2-o18-monthly object

    scrippsco2-o18-monthly = Monthly average O18 concentrations (ppm) derived from flask air samples.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        monthly-o18 - Monthly O18 concentrations in micro-mol O18 per mole (ppm) reported on the 2008A SIO manometric mole fraction scale. This is the standard version of the data most often sought.
        monthly-o18-seasonal-adjustment - Same data after a seasonal adjustment to remove the quasi-regular seasonal cycle.  The adjustment involves subtracting from the data a 4-harmonic fit with a linear gain factor.
        monthly-o18-smoothed - Smoothed version of the data generated from a stiff cubic spline function plus 4-harmonic functions with linear gain.
        monthly-o18-smoothed-seasonal-adjustment - Same smoothed version with the seasonal cycle removed.
        sample-date-excel - M$Excel spreadsheet date format.
        sample-date-fractional - Decimal year and fractional year.
        sample-datetime - The monthly values have been adjusted to 24:00 hours on the 15th of each month.

    Returns:
        a MISP object representing an 'scrippsco2-o18-monthly'

    """
    requires = []
    args = [
        "monthly-o18",
        "monthly-o18-seasonal-adjustment",
        "monthly-o18-smoothed",
        "monthly-o18-smoothed-seasonal-adjustment",
        "sample-date-excel",
        "sample-date-fractional",
        "sample-datetime",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|scrippsco2-o18-monthly"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "scrippsco2-o18-monthly", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_course_of_action(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_course_of_action - function for creating MISP course-of-action object

    course-of-action = An object describing a specific measure taken to prevent or respond to an attack.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        cost - The estimated cost of applying the course of action.
        description - A description of the course of action.
        efficacy - The estimated efficacy of applying the course of action.
        impact - The estimated impact of applying the course of action.
        name - The name used to identify the course of action.
        objective - The objective of the course of action.
        stage - The stage of the threat management lifecycle that the course of action is applicable to.
        type - The type of the course of action.

    Must have one of the following: ['name', 'type']

    Returns:
        a MISP object representing an 'course-of-action'

    """
    requires = ["name", "type"]
    args = [
        "cost",
        "description",
        "efficacy",
        "impact",
        "name",
        "objective",
        "stage",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|course-of-action"
    obj, isNew = MISPHelper._create_obj_cached(event, "course-of-action", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_transaction(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_transaction - function for creating MISP transaction object

    transaction = An object to describe a financial transaction.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        amount - The value of the transaction in local currency.
        authorized - Person who autorized the transaction.
        date - Date and time of the transaction.
        date-posting - Date of posting, if different from date of transaction.
        from-country - Origin country of a transaction.
        from-funds-code - Type of funds used to initiate a transaction.
        location - Location where the transaction took place.
        teller - Person who conducted the transaction.
        text - A description of the transaction.
        to-country - Target country of a transaction.
        to-funds-code - Type of funds used to finalize a transaction.
        transaction-number - A unique number identifying a transaction.
        transmode-code - How the transaction was conducted.
        transmode-comment - Comment describing transmode-code, if needed.

    Must have one of the following: ['transaction-number', 'date', 'amount', 'transmode-code']

    Returns:
        a MISP object representing an 'transaction'

    """
    requires = ["transaction-number", "date", "amount", "transmode-code"]
    args = [
        "amount",
        "authorized",
        "date",
        "date-posting",
        "from-country",
        "from-funds-code",
        "location",
        "teller",
        "text",
        "to-country",
        "to-funds-code",
        "transaction-number",
        "transmode-code",
        "transmode-comment",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|transaction"
    obj, isNew = MISPHelper._create_obj_cached(event, "transaction", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_sb_signature(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_sb_signature - function for creating MISP sb-signature object

    sb-signature = Sandbox detection signature

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        datetime - Datetime
        signature - Name of detection signature - set the description of the detection signature as a comment
        software - Name of Sandbox software
        text - Additional signature description

    Returns:
        a MISP object representing an 'sb-signature'

    """
    requires = []
    args = ["datetime", "signature", "software", "text"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|sb-signature"
    obj, isNew = MISPHelper._create_obj_cached(event, "sb-signature", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Vessel(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Vessel - function for creating MISP ftm-Vessel object

    ftm-Vessel = A boat or ship

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        buildDate - Build Date
        callSign - Call Sign
        country - Country
        crsNumber - CRS Number
        currency - Currency
        description - Description
        flag - Flag
        grossRegisteredTonnage - Gross Registered Tonnage
        imoNumber - IMO Number
        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        mmsi - MMSI
        model - Model
        modifiedAt - Modified on
        name - Name
        nameChangeDate - Date of Name Change
        navigationArea - Navigation Area
        notes - Notes
        pastFlags - Past Flags
        pastNames - Past Names
        pastTypes - Past Types
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        registrationDate - Registration Date
        registrationNumber - Registration Number
        registrationPort - Port of Registration
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        tonnage - Tonnage
        topics - Topics
        type - Type
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Vessel'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "amount",
        "amountEur",
        "amountUsd",
        "buildDate",
        "callSign",
        "country",
        "crsNumber",
        "currency",
        "description",
        "flag",
        "grossRegisteredTonnage",
        "imoNumber",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "mmsi",
        "model",
        "modifiedAt",
        "name",
        "nameChangeDate",
        "navigationArea",
        "notes",
        "pastFlags",
        "pastNames",
        "pastTypes",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "registrationDate",
        "registrationNumber",
        "registrationPort",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "tonnage",
        "topics",
        "type",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Vessel"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Vessel", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_risk_assessment_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_risk_assessment_report - function for creating MISP risk-assessment-report object

    risk-assessment-report = Risk assessment report object which includes the assessment report from a risk assessment platform such as MONARC

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        case-number - Case number
        link - Link to the report mentioned
        report-file - Attachment(s) that is related to the report in human readable format (PDF)
        summary - Free text summary of the risk assessment report
        type - Source of the risk assessment report

    Must have one of the following: ['summary', 'link', 'report-file']

    Returns:
        a MISP object representing an 'risk-assessment-report'

    """
    requires = ["summary", "link", "report-file"]
    args = ["case-number", "link", "report-file", "summary", "type"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|risk-assessment-report"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "risk-assessment-report", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_software_hive_appInit_DLLS(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_software_hive_appInit_DLLS - function for creating MISP regripper-software-hive-appInit-DLLS object

    regripper-software-hive-appInit-DLLS = Regripper Object template designed to gather information of the DLL files installed on the system.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        DLL-last-write-time - Date and time when the DLL file was last updated.
        DLL-name - Name of the DLL file.
        DLL-path - Path where the DLL file is stored.
        comments - Additional comments.
        key - Software hive key where the information is retrieved from.
        last-write-time - Date and time when the key was last updated.
        references - References to the DLL file.

    Returns:
        a MISP object representing an 'regripper-software-hive-appInit-DLLS'

    """
    requires = []
    args = [
        "DLL-last-write-time",
        "DLL-name",
        "DLL-path",
        "comments",
        "key",
        "last-write-time",
        "references",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|regripper-software-hive-appInit-DLLS"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-software-hive-appInit-DLLS", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_covid19_csse_daily_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_covid19_csse_daily_report - function for creating MISP covid19-csse-daily-report object

    covid19-csse-daily-report = CSSE COVID-19 Daily report

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        active - the number of active cases.
        confirmed - the number of confirmed cases. For Hubei Province: from Feb 13 (GMT +8), we report both clinically diagnosed and lab-confirmed cases. For lab-confirmed cases only (Before Feb 17), please refer to https://github.com/CSSEGISandData/COVID-19/tree/master/who_covid_19_situation_reports.
        country-region - country/region name conforming to WHO (will be updated).
        county - US County (US Only)
        death - the number of deaths.
        fips - Federal Information Processing Standard county code (US Only)
        latitude - Approximate latitude of the entry
        longitude - Approximate longitude of the entry
        province-state - province name; US/Canada/Australia/ - city name, state/province name; Others - name of the event (e.g., "Diamond Princess" cruise ship); other countries - blank.
        recovered - the number of recovered cases.
        update - Time of the last update that day (UTC)

    Returns:
        a MISP object representing an 'covid19-csse-daily-report'

    """
    requires = []
    args = [
        "active",
        "confirmed",
        "country-region",
        "county",
        "death",
        "fips",
        "latitude",
        "longitude",
        "province-state",
        "recovered",
        "update",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|covid19-csse-daily-report"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "covid19-csse-daily-report", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_python_etvx_event_log(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_python_etvx_event_log - function for creating MISP python-etvx-event-log object

    python-etvx-event-log = Event log object template to share information of the activities conducted on a system.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        Computer - Computer name on which the event occurred
        Correlation-ID - Unique activity identity which relates the event to a process.
        Event-data - Event data description.
        Keywords - Tags used for the event for the purpose of filtering or searching.
        Operational-code - The opcode (numeric value or name) associated with the activity carried out by the event.
        Processor-ID - ID of the processor that processed the event.
        Relative-Correlation-ID - Related activity ID which identity similar activities which occurred as a part of the event.
        Session-ID - Terminal server session ID.
        Thread-ID - Thread id that generated the event.
        User - Name or the User ID the event is associated with.
        comment - Additional comments.
        event-channel -  Channel through which the event occurred
        event-date-time - Date and time when the event was logged.
        event-id - A unique number which identifies the event.
        event-type - Event-type assigned to the event
        kernel-time - Execution time of the kernel mode instruction.
        level - Determines the event severity.
        log - Log file where the event was recorded.
        name - Name of the event.
        source - The source of the event log - application/software that logged the event.
        task-category - Activity by the event publisher
        user-time - Date and time when the user instruction was executed.

    Returns:
        a MISP object representing an 'python-etvx-event-log'

    """
    requires = []
    args = [
        "Computer",
        "Correlation-ID",
        "Event-data",
        "Keywords",
        "Operational-code",
        "Processor-ID",
        "Relative-Correlation-ID",
        "Session-ID",
        "Thread-ID",
        "User",
        "comment",
        "event-channel",
        "event-date-time",
        "event-id",
        "event-type",
        "kernel-time",
        "level",
        "log",
        "name",
        "source",
        "task-category",
        "user-time",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|python-etvx-event-log"
    obj, isNew = MISPHelper._create_obj_cached(event, "python-etvx-event-log", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_virustotal_graph(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_virustotal_graph - function for creating MISP virustotal-graph object

    virustotal-graph = VirusTotal graph

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        access - Access to the VirusTotal graph
        comment - Comment related to this VirusTotal graph
        permalink - Permalink Reference to the VirusTotal graph
        screenshot - Screenshot of the VirusTotal graph

    Returns:
        a MISP object representing an 'virustotal-graph'

    """
    requires = []
    args = ["access", "comment", "permalink", "screenshot"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|virustotal-graph"
    obj, isNew = MISPHelper._create_obj_cached(event, "virustotal-graph", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_CourtCaseParty(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_CourtCaseParty - function for creating MISP ftm-CourtCaseParty object

    ftm-CourtCaseParty = Court Case Party

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        role - Role
        sourceUrl - Source URL
        startDate - Start date
        status - Status
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-CourtCaseParty'

    """
    requires = []
    args = [
        "alephUrl",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "role",
        "sourceUrl",
        "startDate",
        "status",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-CourtCaseParty"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-CourtCaseParty", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_pcap_metadata(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_pcap_metadata - function for creating MISP pcap-metadata object

    pcap-metadata = Network packet capture metadata

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        capture-interface - Interface name where the packet capture was running.
        capture-length - Capture length set on the captured interface.
        first-packet-seen - When the first packet has been seen.
        last-packet-seen - When the last packet has been seen.
        protocol - Capture protocol (linktype name).
        text - A description of the packet capture.

    Must have one of the following: ['text', 'first-packet-seen', 'last-packet-seen']

    Returns:
        a MISP object representing an 'pcap-metadata'

    """
    requires = ["text", "first-packet-seen", "last-packet-seen"]
    args = [
        "capture-interface",
        "capture-length",
        "first-packet-seen",
        "last-packet-seen",
        "protocol",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|pcap-metadata"
    obj, isNew = MISPHelper._create_obj_cached(event, "pcap-metadata", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_credential(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_credential - function for creating MISP credential object

    credential = Credential describes one or more credential(s) including password(s), api key(s) or decryption key(s).

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        format - Format of the password(s)
        notification - Mention of any notification(s) towards the potential owner(s) of the credential(s)
        origin - Origin of the credential(s)
        password - Password
        text - A description of the credential(s)
        type - Type of password(s)
        username - Username related to the password(s)

    Must have one of the following: ['password', 'username']

    Returns:
        a MISP object representing an 'credential'

    """
    requires = ["password", "username"]
    args = ["format", "notification", "origin", "password", "text", "type", "username"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|credential"
    obj, isNew = MISPHelper._create_obj_cached(event, "credential", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cortex(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cortex - function for creating MISP cortex object

    cortex = Cortex object describing a complete Cortex analysis. Observables would be attribute with a relationship from this object.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        full - Cortex report object (full report) in JSON
        name - Cortex analyser/worker name
        server-name - Name of the cortex server
        start-date - When the Cortex analyser was started
        success - Result of the cortex job
        summary - Cortex summary object (summary) in JSON

    Must have one of the following: ['full']

    Returns:
        a MISP object representing an 'cortex'

    """
    requires = ["full"]
    args = ["full", "name", "server-name", "start-date", "success", "summary"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cortex"
    obj, isNew = MISPHelper._create_obj_cached(event, "cortex", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_covid19_dxy_live_province(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_covid19_dxy_live_province - function for creating MISP covid19-dxy-live-province object

    covid19-dxy-live-province = COVID 19 from dxy.cn - Aggregation by province

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Comment, in chinese
        current-confirmed - Current number of confirmed cases
        province - Name of the Chinese province, in Chinese.
        total-confirmed - Total number of confirmed cases.
        total-cured - Total number of cured cases.
        total-death - Total number of deaths.
        update - Approximate time of the update (~hour)

    Returns:
        a MISP object representing an 'covid19-dxy-live-province'

    """
    requires = []
    args = [
        "comment",
        "current-confirmed",
        "province",
        "total-confirmed",
        "total-cured",
        "total-death",
        "update",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|covid19-dxy-live-province"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "covid19-dxy-live-province", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Row(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Row - function for creating MISP ftm-Row object

    ftm-Row = Row

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        cells - Cells
        index - Index
        indexText - Index text

    Returns:
        a MISP object representing an 'ftm-Row'

    """
    requires = []
    args = ["cells", "index", "indexText"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Row"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Row", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_hashlookup(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_hashlookup - function for creating MISP hashlookup object

    hashlookup = hashlookup object as described on hashlookup services from circl.lu - https://www.circl.lu/services/hashlookup

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        FileName - Complete path of the filename including the filename
        FileSize - Size of the file, in bytes
        KnownMalicious - Source of the hashlookup record if it's a known malicious file
        MD5 - MD5 hash (128 bits) in hex representation
        PackageArch - Package architecture
        PackageDescription - Package description and information
        PackageMaintainer - Package Maintainer(s)
        PackageName - Package Name
        PackageRelease - Package Release
        PackageVersion - Package Version
        SHA-1 - Secure Hash Algorithm 1 (160 bits) in hex representation
        SHA-256 - Secure Hash Algorithm 2 (256 bits) in hex representation
        SSDEEP - SSDEEP - Fuzzy hashing
        TLSH - TLSH - Trend Micro Locality Sensitive Hash
        source - Source of the hashlookup record

    Must have one of the following: ['FileName', 'FileSize', 'MD5', 'SHA-1', 'SHA-256', 'TLSH', 'SSDEEP']

    Returns:
        a MISP object representing an 'hashlookup'

    """
    requires = ["FileName", "FileSize", "MD5", "SHA-1", "SHA-256", "TLSH", "SSDEEP"]
    args = [
        "FileName",
        "FileSize",
        "KnownMalicious",
        "MD5",
        "PackageArch",
        "PackageDescription",
        "PackageMaintainer",
        "PackageName",
        "PackageRelease",
        "PackageVersion",
        "SHA-1",
        "SHA-256",
        "SSDEEP",
        "TLSH",
        "source",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|hashlookup"
    obj, isNew = MISPHelper._create_obj_cached(event, "hashlookup", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_pe(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_pe - function for creating MISP pe object

    pe = Object describing a Portable Executable

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        authentihash - Authenticode executable signature hash (sha256)
        company-name - CompanyName in the resources
        compilation-timestamp - Compilation timestamp defined in the PE header
        entrypoint-address - Address of the entry point
        entrypoint-section-at-position - Name of the section and position of the section in the PE
        file-description - FileDescription in the resources
        file-version - FileVersion in the resources
        impfuzzy - Fuzzy Hash (ssdeep) calculated from the import table
        imphash - Hash (md5) calculated from the import table
        internal-filename - InternalFilename in the resources
        lang-id - Lang ID in the resources
        legal-copyright - LegalCopyright in the resources
        number-sections - Number of sections
        original-filename - OriginalFilename in the resources
        pehash - Hash of the structural information about a sample. See https://www.usenix.org/legacy/event/leet09/tech/full_papers/wicherski/wicherski_html/
        product-name - ProductName in the resources
        product-version - ProductVersion in the resources
        richpe - RichPE metadata hash
        text - Free text value to attach to the PE
        type - Type of PE

    Must have one of the following: ['text', 'type', 'original-filename', 'internal-filename', 'entrypoint-address', 'imphash', 'impfuzzy']

    Returns:
        a MISP object representing an 'pe'

    """
    requires = [
        "text",
        "type",
        "original-filename",
        "internal-filename",
        "entrypoint-address",
        "imphash",
        "impfuzzy",
    ]
    args = [
        "authentihash",
        "company-name",
        "compilation-timestamp",
        "entrypoint-address",
        "entrypoint-section-at-position",
        "file-description",
        "file-version",
        "impfuzzy",
        "imphash",
        "internal-filename",
        "lang-id",
        "legal-copyright",
        "number-sections",
        "original-filename",
        "pehash",
        "product-name",
        "product-version",
        "richpe",
        "text",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|pe"
    obj, isNew = MISPHelper._create_obj_cached(event, "pe", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_interpol_notice(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_interpol_notice - function for creating MISP interpol-notice object

    interpol-notice = An object which describes a Interpol notice.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alias - Alias name or known as.
        charges - Charges published as provided by requesting entity
        colour-of-eyes - Description of a person's colour of eyes.
        colour-of-hair - Description of a person's colour of hair.
        date-of-birth - Date of birth of a natural person (in YYYY-MM-DD format).
        date-of-disappearance - Date of disappearance of a missing person.
        distinguishing-marks-and-characteristics - Distinguishing marks and characteristics of a person.
        father-s-family-name-&-forename - Father's family name & forename.
        forename - First name of a natural person.
        height - Height of a person.
        language-spoken - Languages spoken by a person.
        mother-s-family-name-&-forename - Mother's family name & forename.
        nationality - The nationality of a natural person.
        notice-color - The color/type of the notice
        place-of-birth - Place of birth of a natural person.
        place-of-disappearance - Place of birth of a natural person.
        portrait - Portrait of the person.
        present-family-name - Last name of a natural person.
        sex - The gender of a natural person.
        weight - weight of a person.

    Returns:
        a MISP object representing an 'interpol-notice'

    """
    requires = []
    args = [
        "alias",
        "charges",
        "colour-of-eyes",
        "colour-of-hair",
        "date-of-birth",
        "date-of-disappearance",
        "distinguishing-marks-and-characteristics",
        "father-s-family-name-&-forename",
        "forename",
        "height",
        "language-spoken",
        "mother-s-family-name-&-forename",
        "nationality",
        "notice-color",
        "place-of-birth",
        "place-of-disappearance",
        "portrait",
        "present-family-name",
        "sex",
        "weight",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|interpol-notice"
    obj, isNew = MISPHelper._create_obj_cached(event, "interpol-notice", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Documentation(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Documentation - function for creating MISP ftm-Documentation object

    ftm-Documentation = Documentation

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        role - Role
        sourceUrl - Source URL
        startDate - Start date
        status - Status
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Documentation'

    """
    requires = []
    args = [
        "alephUrl",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "role",
        "sourceUrl",
        "startDate",
        "status",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Documentation"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Documentation", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_shell_commands(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_shell_commands - function for creating MISP shell-commands object

    shell-commands = Object describing a series of shell commands executed. This object can be linked with malicious files in order to describe a specific execution of shell commands.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Comment associated to the shell commands executed.
        language - Scripting language used for the shell commands executed.
        script - Free text of the script if available which executed the shell commands.
        shell-command -
        state - Known state of the script.

    Returns:
        a MISP object representing an 'shell-commands'

    """
    requires = []
    args = ["comment", "language", "script", "shell-command", "state"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|shell-commands"
    obj, isNew = MISPHelper._create_obj_cached(event, "shell-commands", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cytomic_orion_machine(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cytomic_orion_machine - function for creating MISP cytomic-orion-machine object

    cytomic-orion-machine = Cytomic Orion File at Machine Detection

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        clientCreationDateUTC - Client creation date UTC
        clientId - Client id
        clientName - Client name
        creationDate - Client creation date
        first-seen - First seen on machine
        last-seen - Last seen on machine
        lastSeenUtc - Client last seen UTC
        machineMuid - Machine UID
        machineName - Machine name
        machinePath - Path of observable

    Returns:
        a MISP object representing an 'cytomic-orion-machine'

    """
    requires = []
    args = [
        "clientCreationDateUTC",
        "clientId",
        "clientName",
        "creationDate",
        "first-seen",
        "last-seen",
        "lastSeenUtc",
        "machineMuid",
        "machineName",
        "machinePath",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cytomic-orion-machine"
    obj, isNew = MISPHelper._create_obj_cached(event, "cytomic-orion-machine", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_LegalEntity(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_LegalEntity - function for creating MISP ftm-LegalEntity object

    ftm-LegalEntity = A legal entity may be a person or a company.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        bvdId - Bureau van Dijk ID
        classification - Classification
        country - Country
        description - Description
        dissolutionDate - The date the legal entity was dissolved, if applicable
        dunsCode - Dun & Bradstreet identifier
        email - Email address
        icijId - ID according to International Consortium for Investigative Journalists
        idNumber - ID number of any applicable ID
        incorporationDate - The date the legal entity was incorporated
        indexText - Index text
        indexUpdatedAt - Index updated at
        innCode - Russian company ID
        jurisdiction - Country or region in which this entity operates
        keywords - Keywords
        legalForm - Legal form
        mainCountry - Primary country of this entity
        modifiedAt - Modified on
        name - Name
        notes - Notes
        okpoCode - Russian industry classifier
        opencorporatesUrl - OpenCorporates URL
        phone - Phone number
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        registrationNumber - Company registration number
        retrievedAt - Retrieved on
        sector - Sector
        sourceUrl - Source link
        status - Status
        summary - Summary
        swiftBic - Bank identifier code
        taxNumber - Tax identification number
        taxStatus - Tax status
        topics - Topics
        vatCode - (EU) VAT number
        weakAlias - Weak alias
        website - Website address
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-LegalEntity'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "bvdId",
        "classification",
        "country",
        "description",
        "dissolutionDate",
        "dunsCode",
        "email",
        "icijId",
        "idNumber",
        "incorporationDate",
        "indexText",
        "indexUpdatedAt",
        "innCode",
        "jurisdiction",
        "keywords",
        "legalForm",
        "mainCountry",
        "modifiedAt",
        "name",
        "notes",
        "okpoCode",
        "opencorporatesUrl",
        "phone",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "registrationNumber",
        "retrievedAt",
        "sector",
        "sourceUrl",
        "status",
        "summary",
        "swiftBic",
        "taxNumber",
        "taxStatus",
        "topics",
        "vatCode",
        "weakAlias",
        "website",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-LegalEntity"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-LegalEntity", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_software_hive_software_run(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_software_hive_software_run - function for creating MISP regripper-software-hive-software-run object

    regripper-software-hive-software-run = Regripper Object template designed to gather information of the applications set to run on the system.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        application-name - Name of the application run.
        application-path - Path where the application is installed.
        comments - Additional comments.
        key - Software hive key where the information is retrieved from.
        key-path - Path of the key.
        last-write-time - Date and time when the key was last updated.
        references - References to the applications.

    Returns:
        a MISP object representing an 'regripper-software-hive-software-run'

    """
    requires = []
    args = [
        "application-name",
        "application-path",
        "comments",
        "key",
        "key-path",
        "last-write-time",
        "references",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|regripper-software-hive-software-run"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-software-hive-software-run", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_timecode(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_timecode - function for creating MISP timecode object

    timecode = Timecode object to describe a start of video sequence (e.g. CCTV evidence) and the end of the video sequence.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Description of the video sequence
        end-marker-timecode - End marker timecode in the format hh:mm:ss;ff
        end-timecode - End marker timecode in the format hh:mm:ss.mms
        recording-date - Date of recording of the video sequence
        start-marker-timecode - Start marker timecode in the format hh:mm:ss;ff
        start-timecode - Start marker timecode in the format hh:mm:ss.mms

    Must have one of the following: ['description', 'start-marker-timecode', 'end-marker-timecode', 'start-timecode', 'end-timecode', 'recording-date']

    Returns:
        a MISP object representing an 'timecode'

    """
    requires = [
        "description",
        "start-marker-timecode",
        "end-marker-timecode",
        "start-timecode",
        "end-timecode",
        "recording-date",
    ]
    args = [
        "description",
        "end-marker-timecode",
        "end-timecode",
        "recording-date",
        "start-marker-timecode",
        "start-timecode",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|timecode"
    obj, isNew = MISPHelper._create_obj_cached(event, "timecode", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Workbook(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Workbook - function for creating MISP ftm-Workbook object

    ftm-Workbook = Workbook

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Workbook'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Workbook"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Workbook", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_youtube_comment(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_youtube_comment - function for creating MISP youtube-comment object

    youtube-comment = A YouTube video comment.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original comment (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported comment.
        channel-name - The name of the channel where it was posted.
        comment - The raw text of the YouTube video comment.
        description - A description of the comment.
        embedded-link - Link embedded in the comment (potentially malicious).
        embedded-safe-link - Link embedded in the comment (supposed safe).
        hashtag - Hashtag used in the comment.
        link - Original link to the comment (supposed harmless).
        url - Original URL location of the comment (potentially malicious).
        user-account - The user account that commented on the YouTube video.
        username-quoted - Username who are quoted in the comment.
        video-title - The title of the YouTube video.

    Must have one of the following: ['comment', 'archive', 'link']

    Returns:
        a MISP object representing an 'youtube-comment'

    """
    requires = ["comment", "archive", "link"]
    args = [
        "archive",
        "attachment",
        "channel-name",
        "comment",
        "description",
        "embedded-link",
        "embedded-safe-link",
        "hashtag",
        "link",
        "url",
        "user-account",
        "username-quoted",
        "video-title",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|youtube-comment"
    obj, isNew = MISPHelper._create_obj_cached(event, "youtube-comment", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_iot_firmware(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_iot_firmware - function for creating MISP iot-firmware object

    iot-firmware = A firmware for an IoT device.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        binwalk-entropy-graph - Entropy graph of the firmware
        binwalk-output - Binwalk output of the firmware image
        boot-log - Boot log of the IoT device for this firmware
        filename - Filename of the firmware
        firmware - Firmware of the IoT device
        format - Format of the firmware
        md5 - [Insecure] MD5 hash (128 bits)
        sha1 - [Insecure] Secure Hash Algorithm 1 (160 bits)
        sha224 - Secure Hash Algorithm 2 (224 bits)
        sha256 - Secure Hash Algorithm 2 (256 bits)
        sha384 - Secure Hash Algorithm 2 (384 bits)
        sha512 - Secure Hash Algorithm 2 (512 bits)
        size-in-bytes - Size of the file, in bytes
        version - Version of the firmware

    Must have one of the following: ['firmware', 'filename', 'binwalk-output']

    Returns:
        a MISP object representing an 'iot-firmware'

    """
    requires = ["firmware", "filename", "binwalk-output"]
    args = [
        "binwalk-entropy-graph",
        "binwalk-output",
        "boot-log",
        "filename",
        "firmware",
        "format",
        "md5",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "size-in-bytes",
        "version",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|iot-firmware"
    obj, isNew = MISPHelper._create_obj_cached(event, "iot-firmware", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_youtube_video(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_youtube_video - function for creating MISP youtube-video object

    youtube-video = A YouTube video.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original YouTube video (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported YouTube video.
        channel-name - The name of the channel where it was posted.
        creator - The user account that created the YouTube video.
        description - A description of the YouTube video.
        embedded-link - Link embedded in the YouTube video description (potentially malicious).
        embedded-safe-link - Link embedded in the YouTube video description (supposed safe).
        hashtag - Hashtag used to identify or promote the YouTube video.
        link - Original link to the YouTube video (supposed harmless).
        url - Original URL location of the YouTube video (potentially malicious).
        username-quoted - Username who are quoted in the YouTube video or description.
        video-title - The title of the YouTube video.
        video-transcript - The YouTube video transcript (closed captions).

    Must have one of the following: ['video-title', 'archive', 'link']

    Returns:
        a MISP object representing an 'youtube-video'

    """
    requires = ["video-title", "archive", "link"]
    args = [
        "archive",
        "attachment",
        "channel-name",
        "creator",
        "description",
        "embedded-link",
        "embedded-safe-link",
        "hashtag",
        "link",
        "url",
        "username-quoted",
        "video-title",
        "video-transcript",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|youtube-video"
    obj, isNew = MISPHelper._create_obj_cached(event, "youtube-video", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_exploit(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_exploit - function for creating MISP exploit object

    exploit = Exploit object describes a program in binary or source code form used to abuse one or more vulnerabilities.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        0day-today-id - Reference to the 0day.today referencing this exploit.
        accessibility - Accessibility of the exploit.
        comment - Comment associated to the exploit.
        credit - Credit(s) for the exploit (such as author, distributor or original source).
        cve-id - Reference to the CVE value targeted by the exploit.
        description - Description of the exploit.
        exploit - Free text of the exploit.
        exploit-as-attachment - Attachment of the exploit.
        exploitdb-id - Reference to the ExploitDB referencing this exploit.
        filename - Filename used for the exploit.
        level - Level of the exploit.
        reference - Reference to the exploit.
        title - Title of the exploit.

    Must have one of the following: ['exploit', 'filename', 'exploit-as-attachment']

    Returns:
        a MISP object representing an 'exploit'

    """
    requires = ["exploit", "filename", "exploit-as-attachment"]
    args = [
        "0day-today-id",
        "accessibility",
        "comment",
        "credit",
        "cve-id",
        "description",
        "exploit",
        "exploit-as-attachment",
        "exploitdb-id",
        "filename",
        "level",
        "reference",
        "title",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|exploit"
    obj, isNew = MISPHelper._create_obj_cached(event, "exploit", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_trustar_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_trustar_report - function for creating MISP trustar_report object

    trustar_report = TruStar Report

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        BITCOIN_ADDRESS - A bitcoin address is an identifier of 26-35 alphanumeric characters, beginning with the number 1 or 3, that represents a possible destination for a bitcoin payment.
        CIDR_BLOCK - CIDR (Classless Inter-Domain Routing) identifies a range of IP addresses, and was introduced as a way to allow more flexible allocation of Internet Protocol (IP) addresses than was possible with the original system of IP address classes.
        COMMENTS - A space for additional comments.
        CVE - The Common Vulnerabilities and Exposures (CVE) system provides a reference-method for publicly known information-security vulnerabilities and exposures.
        EMAIL_ADDRESS - An email address is a unique identifier for an email account.
        INDICATOR_SUMMARY - Free text summary data related to an indicator. This should include a normalized score if one exists.
        IP - An Internet Protocol address (IP address) is a numerical label assigned to each device participating in a computer network that uses the Internet Protocol for communication.
        MALWARE - Names of software that are intended to damage or disable computers and computer systems.
        MD5 - The MD5 algorithm is a widely used hash function producing a 128-bit hash value.
        REGISTRY_KEY - The registry is a hierarchical database that contains data that is critical for the operation of Windows and the applications and services that run on Windows.
        REPORT_LINK - A link to the TruSTAR report. Access may be restricted depending on user permissions.
        SHA1 - SHA-1 (Secure Hash Algorithm 1) is a cryptographic hash function which takes an input and produces a 160-bit (20-byte) hash value known as a message digest - typically rendered as a hexadecimal number, 40 digits long. SHA-1 is prone to length extension attacks.
        SHA256 - SHA-256 is a member of the SHA-2 cryptographic hash functions designed by the NSA, which are the successors to SHA-1. It is represented as a 64-character hexadecimal string.
        SOFTWARE - The name of a file on a filesystem.
        THREAT_ACTOR - A string identifying the threat actor.
        URL - A Uniform Resource Locator (URL) is a reference to a web resource that specifies its location on a computer network and a mechanism for retrieving it.

    Returns:
        a MISP object representing an 'trustar_report'

    """
    requires = []
    args = [
        "BITCOIN_ADDRESS",
        "CIDR_BLOCK",
        "COMMENTS",
        "CVE",
        "EMAIL_ADDRESS",
        "INDICATOR_SUMMARY",
        "IP",
        "MALWARE",
        "MD5",
        "REGISTRY_KEY",
        "REPORT_LINK",
        "SHA1",
        "SHA256",
        "SOFTWARE",
        "THREAT_ACTOR",
        "URL",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|trustar_report"
    obj, isNew = MISPHelper._create_obj_cached(event, "trustar_report", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_ContractAward(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_ContractAward - function for creating MISP ftm-ContractAward object

    ftm-ContractAward = A contract or contract lot as awarded to a supplier.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        amended - Was this award amended, modified or updated by a subsequent document?
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        cpvCode - Contract Procurement Vocabulary (what type of goods/services, EU)
        currency - Currency
        date - Date
        decisionReason - Decision reason
        description - Description
        documentNumber - Document number
        documentType - Document type
        endDate - End date
        indexText - Index text
        lotNumber - Lot number
        modifiedAt - Modified on
        nutsCode - Nomencalture of Territorial Units for Statistics (NUTS)
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        role - Role
        sourceUrl - Source URL
        startDate - Start date
        status - Status
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-ContractAward'

    """
    requires = []
    args = [
        "alephUrl",
        "amended",
        "amount",
        "amountEur",
        "amountUsd",
        "cpvCode",
        "currency",
        "date",
        "decisionReason",
        "description",
        "documentNumber",
        "documentType",
        "endDate",
        "indexText",
        "lotNumber",
        "modifiedAt",
        "nutsCode",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "role",
        "sourceUrl",
        "startDate",
        "status",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-ContractAward"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-ContractAward", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cowrie(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cowrie - function for creating MISP cowrie object

    cowrie = Cowrie honeypot object template

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        compCS - SSH compression algorithm supported in the session
        dst_ip - Destination IP address of the session
        dst_port - Destination port of the session
        encCS - SSH symmetric encryption algorithm supported in the session
        eventid - Eventid of the session in the cowrie honeypot
        hassh - HASSH of the client SSH session following Salesforce algorithm
        input - Input of the session
        isError - isError
        keyAlgs - SSH public-key algorithm supported in the session
        macCS - SSH MAC supported in the sesssion
        message - Message of the cowrie honeypot
        password - Password
        protocol - Protocol used in the cowrie honeypot
        sensor - Cowrie sensor name
        session - Session id
        src_ip - Source IP address of the session
        src_port - Source port of the session
        system - System origin in cowrie honeypot
        timestamp - When the event happened
        username - Username related to the password(s)

    Must have one of the following: ['session']

    Returns:
        a MISP object representing an 'cowrie'

    """
    requires = ["session"]
    args = [
        "compCS",
        "dst_ip",
        "dst_port",
        "encCS",
        "eventid",
        "hassh",
        "input",
        "isError",
        "keyAlgs",
        "macCS",
        "message",
        "password",
        "protocol",
        "sensor",
        "session",
        "src_ip",
        "src_port",
        "system",
        "timestamp",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cowrie"
    obj, isNew = MISPHelper._create_obj_cached(event, "cowrie", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_network_socket(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_network_socket - function for creating MISP network-socket object

    network-socket = Network socket object describes a local or remote network connections based on the socket data structure.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address-family - Address family who specifies the address family type (AF_*) of the socket connection.
        domain-family - Domain family who specifies the communication domain (PF_*) of the socket connection.
        dst-bytes-count - Number of bytes sent from the source to the destination.
        dst-packets-count - Number of packets sent from the source to the destination.
        dst-port - Destination port of the network socket connection.
        filename - Socket using filename
        first-packet-seen - Datetime of the first packet seen.
        hostname-dst - Destination hostname of the network socket connection.
        hostname-src - Source (local) hostname of the network socket connection.
        ip-dst - Destination IP address of the network socket connection.
        ip-src - Source (local) IP address of the network socket connection.
        last-packet-seen - Datetime of the last packet seen.
        mac-dst - Destination MAC address as it is included in the packets sent
        mac-src - Source (local) MAC address as it is included in the packets sent
        option - Option on the socket connection.
        protocol - Protocol used by the network socket.
        socket-type - Type of the socket.
        src-bytes-count - Number of bytes sent from the destination to the source.
        src-packets-count - Number of packets sent from the destination to the source.
        src-port - Source (local) port of the network socket connection.
        state - State of the socket connection.

    Must have one of the following: ['ip-src', 'ip-dst', 'src-port', 'dst-port']

    Returns:
        a MISP object representing an 'network-socket'

    """
    requires = ["ip-src", "ip-dst", "src-port", "dst-port"]
    args = [
        "address-family",
        "domain-family",
        "dst-bytes-count",
        "dst-packets-count",
        "dst-port",
        "filename",
        "first-packet-seen",
        "hostname-dst",
        "hostname-src",
        "ip-dst",
        "ip-src",
        "last-packet-seen",
        "mac-dst",
        "mac-src",
        "option",
        "protocol",
        "socket-type",
        "src-bytes-count",
        "src-packets-count",
        "src-port",
        "state",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|network-socket"
    obj, isNew = MISPHelper._create_obj_cached(event, "network-socket", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_HyperText(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_HyperText - function for creating MISP ftm-HyperText object

    ftm-HyperText = HyperText

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        bodyHtml - HTML
        bodyText - Text
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-HyperText'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "bodyHtml",
        "bodyText",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-HyperText"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-HyperText", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Image(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Image - function for creating MISP ftm-Image object

    ftm-Image = Image

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        bodyText - Text
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Image'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "bodyText",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Image"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Image", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_availability_impact(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_availability_impact - function for creating MISP availability-impact object

    availability-impact = Availability Impact object as described in STIX 2.1 Incident object extension.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        availability_impact - The availability impact.
        criticality - Criticality of the impact
        description - Additional details about the impact.
        end_time - The date and time the impact was last recorded.
        end_time_fidelity - Level of fidelity that the `end_time` is recorded in.
        recoverability - Recoverability of this particular impact with respect to feasibility and required time and resources.
        start_time - The date and time the impact was first recorded.
        start_time_fidelity - Level of fidelity that the `start_time` is recorded in.

    Returns:
        a MISP object representing an 'availability-impact'

    """
    requires = []
    args = [
        "availability_impact",
        "criticality",
        "description",
        "end_time",
        "end_time_fidelity",
        "recoverability",
        "start_time",
        "start_time_fidelity",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|availability-impact"
    obj, isNew = MISPHelper._create_obj_cached(event, "availability-impact", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regexp(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_regexp - function for creating MISP regexp object

    regexp = An object describing a regular expression (regex or regexp). The object can be linked via a relationship to other attributes or objects to describe how it can be represented as a regular expression.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - A description of the regular expression.
        regexp - regexp
        regexp-type - Type of the regular expression syntax.
        type - Specify which type corresponds to this regex.

    Must have one of the following: ['regexp']

    Returns:
        a MISP object representing an 'regexp'

    """
    requires = ["regexp"]
    args = ["comment", "regexp", "regexp-type", "type"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|regexp"
    obj, isNew = MISPHelper._create_obj_cached(event, "regexp", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_scrippsco2_co2_daily(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_scrippsco2_co2_daily - function for creating MISP scrippsco2-co2-daily object

    scrippsco2-co2-daily = Daily average CO2 concentrations (ppm) derived from flask air samples.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        co2-value - CO2 value (ppm) - CO2 concentrations are measured on the '08A' Calibration Scale
        flag - Flag (see taxonomy for details).
        number-flask - Number of flasks used in daily average.
        sample-date-excel - M$Excel spreadsheet date format.
        sample-date-fractional - Decimal year and fractional year.
        sample-datetime - Datetime the sample has been taken

    Must have one of the following: ['sample-datetime', 'sample-date-excel', 'sample-date-fractional', 'number-flask', 'flag', 'co2-value']

    Returns:
        a MISP object representing an 'scrippsco2-co2-daily'

    """
    requires = [
        "sample-datetime",
        "sample-date-excel",
        "sample-date-fractional",
        "number-flask",
        "flag",
        "co2-value",
    ]
    args = [
        "co2-value",
        "flag",
        "number-flask",
        "sample-date-excel",
        "sample-date-fractional",
        "sample-datetime",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|scrippsco2-co2-daily"
    obj, isNew = MISPHelper._create_obj_cached(event, "scrippsco2-co2-daily", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_greynoise_ip(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_greynoise_ip - function for creating MISP greynoise-ip object

    greynoise-ip = GreyNoise IP Information

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        actor - GreyNoise Actor
        classification - GreyNoise Classification
        first-seen - First Seen
        ip-src - Source IP address of the network connection.
        last-seen - Last Seen
        link - GreyNoise Visualizer Link
        noise - GreyNoise Internet Scanning Flag
        provider - GreyNoise Service Provider
        riot - GreyNoise Common Business Service Flag
        trust-level - GreyNoise RIOT Trust Level

    Must have one of the following: ['ip-src']

    Returns:
        a MISP object representing an 'greynoise-ip'

    """
    requires = ["ip-src"]
    args = [
        "actor",
        "classification",
        "first-seen",
        "ip-src",
        "last-seen",
        "link",
        "noise",
        "provider",
        "riot",
        "trust-level",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|greynoise-ip"
    obj, isNew = MISPHelper._create_obj_cached(event, "greynoise-ip", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_passive_dns_dnsdbflex(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_passive_dns_dnsdbflex - function for creating MISP passive-dns-dnsdbflex object

    passive-dns-dnsdbflex = DNSDBFLEX object. This object is used at farsight security. Roughly based on Passive DNS records as expressed in draft-dulaunoy-dnsop-passive-dns-cof-07. See https://tools.ietf.org/id/draft-dulaunoy-dnsop-passive-dns-cof-07.html

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        rrname - Resource Record name of the queried resource.
        rrtype - Resource Record type as seen by the passive DNS.

    Returns:
        a MISP object representing an 'passive-dns-dnsdbflex'

    """
    requires = []
    args = ["rrname", "rrtype"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|passive-dns-dnsdbflex"
    obj, isNew = MISPHelper._create_obj_cached(event, "passive-dns-dnsdbflex", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ddos(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ddos - function for creating MISP ddos object

    ddos = DDoS object describes a current DDoS activity from a specific or/and to a specific target. Type of DDoS can be attached to the object as a taxonomy or using the type field.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        backscatter-threshold - The minimum amount of backscatter received in 5 minutes / day. This field is only used when the capture origin is indirect network capture such as backscatter.
        capture-origin - Origin of the (D)DoS evidences
        domain-dst - Destination domain (victim)
        dst-port - Destination port of the attack
        first-seen - Beginning of the attack
        ip-dst - Destination IP (victim)
        ip-src - IP address originating the attack
        last-seen - End of the attack
        protocol - Protocol used for the attack
        src-port - Port originating the attack
        text - Description of the DDoS
        total-bps - Bits per second (maximum rate of bits per second measured)
        total-bytes-sent - Total number of bytes sent by the sources mentioned
        total-packets-sent - Total number of packets sent by the source mentioned
        total-pps - Packets per second (maximum rate of packets per second measured)
        type - Type(s) or Technique(s) of Denial of Service

    Must have one of the following: ['ip-dst', 'ip-src', 'domain-dst']

    Returns:
        a MISP object representing an 'ddos'

    """
    requires = ["ip-dst", "ip-src", "domain-dst"]
    args = [
        "backscatter-threshold",
        "capture-origin",
        "domain-dst",
        "dst-port",
        "first-seen",
        "ip-dst",
        "ip-src",
        "last-seen",
        "protocol",
        "src-port",
        "text",
        "total-bps",
        "total-bytes-sent",
        "total-packets-sent",
        "total-pps",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ddos"
    obj, isNew = MISPHelper._create_obj_cached(event, "ddos", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_scrippsco2_c13_monthly(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_scrippsco2_c13_monthly - function for creating MISP scrippsco2-c13-monthly object

    scrippsco2-c13-monthly = Monthly average C13 concentrations (ppm) derived from flask air samples.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        monthly-c13 - Monthly C13 concentrations in micro-mol C13 per mole (ppm) reported on the 2008A SIO manometric mole fraction scale. This is the standard version of the data most often sought.
        monthly-c13-seasonal-adjustment - Same data after a seasonal adjustment to remove the quasi-regular seasonal cycle.  The adjustment involves subtracting from the data a 4-harmonic fit with a linear gain factor.
        monthly-c13-smoothed - Smoothed version of the data generated from a stiff cubic spline function plus 4-harmonic functions with linear gain.
        monthly-c13-smoothed-seasonal-adjustment - Same smoothed version with the seasonal cycle removed.
        sample-date-excel - M$Excel spreadsheet date format.
        sample-date-fractional - Decimal year and fractional year.
        sample-datetime - The monthly values have been adjusted to 24:00 hours on the 15th of each month.

    Returns:
        a MISP object representing an 'scrippsco2-c13-monthly'

    """
    requires = []
    args = [
        "monthly-c13",
        "monthly-c13-seasonal-adjustment",
        "monthly-c13-smoothed",
        "monthly-c13-smoothed-seasonal-adjustment",
        "sample-date-excel",
        "sample-date-fractional",
        "sample-datetime",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|scrippsco2-c13-monthly"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "scrippsco2-c13-monthly", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_publication(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_publication - function for creating MISP publication object

    publication = An object to describe a book, journal, or academic publication.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        DOI - DOI System is used to identify digital resources.
        ISBN - International Standard Book Number.
        academic-institution - Academic institution associated with the publisher or authors.
        archive - Archive of the original document (Internet Archive, Archive.is, etc).
        attachment - The publication file or screen capture.
        author - Author of the publication.
        content - Content of the publication.
        contributor - Contributors include editors, compilers, and translators.
        description - A description of the publication.
        edition - Edition of the publication.
        embedded-link - Link contained in the publication (possibly malicious).
        embedded-safe-link - Link contained in the publication (assumed safe).
        link - Original link to the publication (supposed harmless).
        publisher - Publisher of the document.
        series - Series of the publication.
        title - Content of the publication.
        url - Original link to the publication (possibly malicious).
        volume - Volume of the publication.
        website - Website of the publisher.
        year - Year of publication.

    Must have one of the following: ['title', 'link', 'archive', 'ISBN']

    Returns:
        a MISP object representing an 'publication'

    """
    requires = ["title", "link", "archive", "ISBN"]
    args = [
        "DOI",
        "ISBN",
        "academic-institution",
        "archive",
        "attachment",
        "author",
        "content",
        "contributor",
        "description",
        "edition",
        "embedded-link",
        "embedded-safe-link",
        "link",
        "publisher",
        "series",
        "title",
        "url",
        "volume",
        "website",
        "year",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|publication"
    obj, isNew = MISPHelper._create_obj_cached(event, "publication", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_facebook_reaction(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_facebook_reaction - function for creating MISP facebook-reaction object

    facebook-reaction = Reaction to facebook posts.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        link - Link to the user account which did the reaction.
        name - The name of A user account which did the reaction.
        type - Type of reaction.

    Must have one of the following: ['name', 'link']

    Returns:
        a MISP object representing an 'facebook-reaction'

    """
    requires = ["name", "link"]
    args = ["link", "name", "type"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|facebook-reaction"
    obj, isNew = MISPHelper._create_obj_cached(event, "facebook-reaction", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_android_permission(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_android_permission - function for creating MISP android-permission object

    android-permission = A set of android permissions - one or more permission(s) which can be linked to other objects (e.g. malware, app).

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Comment about the set of android permission(s)
        permission - Android permission

    Must have one of the following: ['permission']

    Returns:
        a MISP object representing an 'android-permission'

    """
    requires = ["permission"]
    args = ["comment", "permission"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|android-permission"
    obj, isNew = MISPHelper._create_obj_cached(event, "android-permission", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_crypto_material(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_crypto_material - function for creating MISP crypto-material object

    crypto-material = Cryptographic materials such as public or/and private keys.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        Gx - Curve Parameter - Gx in decimal
        Gy - Curve Parameter - Gy in decimal
        b - Curve Parameter - B in decimal
        curve-length - Length of the Curve in bits
        e - RSA public exponent
        ecdsa-type - Curve type of the ECDSA cryptographic materials
        g - Curve Parameter - G in decimal
        generic-symmetric-key - Generic symmetric key (please precise the type)
        modulus - Modulus Parameter - in hexadecimal - no 0x, no :
        n - Curve Parameter - N in decimal
        origin - Origin of the cryptographic materials
        p - Prime Parameter - P in decimal
        private - Private part of the cryptographic materials in PEM format
        public - Public part of the cryptographic materials in PEM format
        q - Prime Parameter - Q in decimal
        rsa-modulus-size - RSA modulus size in bits
        text - A description of the cryptographic materials.
        type - Type of crytographic materials
        x - Curve Parameter - X in decimal
        y - Curve Parameter - Y in decimal

    Must have one of the following: ['generic-symmetric-key', 'text', 'private', 'public', 'p', 'q', 'modulus']

    Returns:
        a MISP object representing an 'crypto-material'

    """
    requires = [
        "generic-symmetric-key",
        "text",
        "private",
        "public",
        "p",
        "q",
        "modulus",
    ]
    args = [
        "Gx",
        "Gy",
        "b",
        "curve-length",
        "e",
        "ecdsa-type",
        "g",
        "generic-symmetric-key",
        "modulus",
        "n",
        "origin",
        "p",
        "private",
        "public",
        "q",
        "rsa-modulus-size",
        "text",
        "type",
        "x",
        "y",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|crypto-material"
    obj, isNew = MISPHelper._create_obj_cached(event, "crypto-material", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_identity(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_identity - function for creating MISP identity object

    identity = Identities can represent actual individuals, organizations, or groups (e.g., ACME, Inc.) as well as classes of individuals, organizations, systems or groups (e.g., the finance sector).  The Identity SDO can capture basic identifying information, contact information, and the sectors that the Identity belongs to. Identity is used in STIX to represent, among other things, targets of attacks, information sources, object creators, and threat actor identities. (ref. STIX 2.1 - 4.5)

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        contact_information - The contact information (e-mail, phone number, etc.) for this Identity. No format for this information is currently defined by this specification.
        description - A description that provides more details and context about the Identity, potentially including its purpose and its key characteristics.
        identity_class - The type of entity that this Identity describes, e.g., an individual or organization.
        name - The name of this Identity. When referring to a specific entity (e.g., an individual or organization), this property SHOULD contain the canonical name of the specific entity.
        roles - The list of roles that this Identity performs (e.g., CEO, Domain Administrators, Doctors, Hospital, or Retailer).
        sectors - Description of the organization

    Must have one of the following: ['name']

    Returns:
        a MISP object representing an 'identity'

    """
    requires = ["name"]
    args = [
        "contact_information",
        "description",
        "identity_class",
        "name",
        "roles",
        "sectors",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|identity"
    obj, isNew = MISPHelper._create_obj_cached(event, "identity", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_telegram_account(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_telegram_account - function for creating MISP telegram-account object

    telegram-account = Information related to a telegram account

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        first_name - First name
        id - Telegram user identifier
        last_name - Last name
        phone - Phone associated with the telegram user
        username - Telegram username
        verified - Verified

    Must have one of the following: ['id', 'phone', 'username']

    Returns:
        a MISP object representing an 'telegram-account'

    """
    requires = ["id", "phone", "username"]
    args = ["first_name", "id", "last_name", "phone", "username", "verified"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|telegram-account"
    obj, isNew = MISPHelper._create_obj_cached(event, "telegram-account", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_intelmq_event(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_intelmq_event - function for creating MISP intelmq_event object

    intelmq_event = IntelMQ Event

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        classification.identifier - The lowercase identifier defines the actual software or service (e.g. 'heartbleed' or 'ntp_version') or standardized malware name (e.g. 'zeus'). Note that you MAY overwrite this field during processing for your individual setup. This field is not standardized across IntelMQ setups/users.
        classification.taxonomy - We recognize the need for the CSIRT teams to apply a static (incident) taxonomy to abuse data. With this goal in mind the type IOC will serve as a basis for this activity. Each value of the dynamic type mapping translates to a an element in the static taxonomy. The European CSIRT teams for example have decided to apply the eCSIRT.net incident classification. The value of the taxonomy key is thus a derivative of the dynamic type above. For more information about check [ENISA taxonomies](http://www.enisa.europa.eu/activities/cert/support/incident-management/browsable/incident-handling-process/incident-taxonomy/existing-taxonomies).
        classification.type - The abuse type IOC is one of the most crucial pieces of information for any given abuse event. The main idea of dynamic typing is to keep our ontology flexible, since we need to evolve with the evolving threatscape of abuse data. In contrast with the static taxonomy below, the dynamic typing is used to perform business decisions in the abuse handling pipeline. Furthermore, the value data set should be kept as minimal as possible to avoid 'type explosion', which in turn dilutes the business value of the dynamic typing. In general, we normally have two types of abuse type IOC: ones referring to a compromised resource or ones referring to pieces of the criminal infrastructure, such as a command and control servers for example.
        comment - Free text commentary about the abuse event inserted by an analyst.
        destination.abuse_contact - Abuse contact for destination address. A comma separated list.
        destination.account - An account name or email address, which has been identified to relate to the destination of an abuse event.
        destination.allocated - Allocation date corresponding to BGP prefix.
        destination.as_name - The autonomous system name to which the connection headed.
        destination.asn - The autonomous system number to which the connection headed.
        destination.domain_suffix - The suffix of the domain from the public suffix list.
        destination.fqdn - A DNS name related to the host from which the connection originated. DNS allows even binary data in DNS, so we have to allow everything. A final point is stripped, string is converted to lower case characters.
        destination.geolocation.cc - Country-Code according to ISO3166-1 alpha-2 for the destination IP.
        destination.geolocation.city - Some geolocation services refer to city-level geolocation.
        destination.geolocation.country - The country name derived from the ISO3166 country code (assigned to cc field).
        destination.geolocation.latitude - Latitude coordinates derived from a geolocation service, such as MaxMind geoip db.
        destination.geolocation.longitude - Longitude coordinates derived from a geolocation service, such as MaxMind geoip db.
        destination.geolocation.region - Some geolocation services refer to region-level geolocation.
        destination.geolocation.state - Some geolocation services refer to state-level geolocation.
        destination.ip - The IP which is the target of the observed connections.
        destination.local_hostname - Some sources report a internal hostname within a NAT related to the name configured for a compromized system
        destination.local_ip - Some sources report a internal (NATed) IP address related a compromized system. N.B. RFC1918 IPs are OK here.
        destination.network - CIDR for an autonomous system. Also known as BGP prefix. If multiple values are possible, select the most specific.
        destination.port - The port to which the connection headed.
        destination.registry - The IP registry a given ip address is allocated by.
        destination.reverse_dns - Reverse DNS name acquired through a reverse DNS query on an IP address. N.B. Record types other than PTR records may also appear in the reverse DNS tree. Furthermore, unfortunately, there is no rule prohibiting people from writing anything in a PTR record. Even JavaScript will work. A final point is stripped, string is converted to lower case characters.
        destination.tor_node - If the destination IP was a known tor node.
        destination.url - A URL denotes on IOC, which refers to a malicious resource, whose interpretation is defined by the abuse type. A URL with the abuse type phishing refers to a phishing resource.
        destination.urlpath - The path portion of an HTTP or related network request.
        event_description.target - Some sources denominate the target (organization) of a an attack.
        event_description.text - A free-form textual description of an abuse event.
        event_description.url - A description URL is a link to a further description of the the abuse event in question.
        event_hash - Computed event hash with specific keys and values that identify a unique event. At present, the hash should default to using the SHA1 function. Please note that for an event hash to be able to match more than one event (deduplication) the receiver of an event should calculate it based on a minimal set of keys and values present in the event. Using for example the observation time in the calculation will most likely render the checksum useless for deduplication purposes.
        extra - All anecdotal information, which cannot be parsed into the data harmonization elements. E.g. os.name, os.version, etc.  **Note**: this is only intended for mapping any fields which can not map naturally into the data harmonization. It is not intended for extending the data harmonization with your own fields.
        feed.accuracy - A float between 0 and 100 that represents how accurate the data in the feed is
        feed.code - Code name for the feed, e.g. DFGS, HSDAG etc.
        feed.documentation - A URL or hint where to find the documentation of this feed.
        feed.name - Name for the feed, usually found in collector bot configuration.
        feed.provider - Name for the provider of the feed, usually found in collector bot configuration.
        feed.url - The URL of a given abuse feed, where applicable
        malware.hash.md5 - A string depicting an MD5 checksum for a file, be it a malware sample for example.
        malware.hash.sha1 - A string depicting a SHA1 checksum for a file, be it a malware sample for example.
        malware.hash.sha256 - A string depicting a SHA256 checksum for a file, be it a malware sample for example.
        malware.name - The malware name in lower case.
        malware.version - A version string for an identified artifact generation, e.g. a crime-ware kit.
        misp.attribute_uuid - MISP - Malware Information Sharing Platform & Threat Sharing UUID of an attribute.
        misp.event_uuid - MISP - Malware Information Sharing Platform & Threat Sharing UUID.
        output - Event data converted into foreign format, intended to be exported by output plugin.
        protocol.application - e.g. vnc, ssh, sip, irc, http or smtp.
        protocol.transport - e.g. tcp, udp, icmp.
        raw - The original line of the event from encoded in base64.
        rtir_id - Request Tracker Incident Response ticket id.
        screenshot_url - Some source may report URLs related to a an image generated of a resource without any metadata. Or an URL pointing to resource, which has been rendered into a webshot, e.g. a PNG image and the relevant metadata related to its retrieval/generation.
        source.abuse_contact - Abuse contact for source address. A comma separated list.
        source.account - An account name or email address, which has been identified to relate to the source of an abuse event.
        source.allocated - Allocation date corresponding to BGP prefix.
        source.as_name - The autonomous system name from which the connection originated.
        source.asn - The autonomous system number from which originated the connection.
        source.domain_suffix - The suffix of the domain from the public suffix list.
        source.fqdn - A DNS name related to the host from which the connection originated. DNS allows even binary data in DNS, so we have to allow everything. A final point is stripped, string is converted to lower case characters.
        source.geolocation.cc - Country-Code according to ISO3166-1 alpha-2 for the source IP.
        source.geolocation.city - Some geolocation services refer to city-level geolocation.
        source.geolocation.country - The country name derived from the ISO3166 country code (assigned to cc field).
        source.geolocation.cymru_cc - The country code denoted for the ip by the Team Cymru asn to ip mapping service.
        source.geolocation.geoip_cc - MaxMind Country Code (ISO3166-1 alpha-2).
        source.geolocation.latitude - Latitude coordinates derived from a geolocation service, such as MaxMind geoip db.
        source.geolocation.longitude - Longitude coordinates derived from a geolocation service, such as MaxMind geoip db.
        source.geolocation.region - Some geolocation services refer to region-level geolocation.
        source.geolocation.state - Some geolocation services refer to state-level geolocation.
        source.ip - The ip observed to initiate the connection
        source.local_hostname - Some sources report a internal hostname within a NAT related to the name configured for a compromised system
        source.local_ip - Some sources report a internal (NATed) IP address related a compromised system. N.B. RFC1918 IPs are OK here.
        source.network - CIDR for an autonomous system. Also known as BGP prefix. If multiple values are possible, select the most specific.
        source.port - The port from which the connection originated.
        source.registry - The IP registry a given ip address is allocated by.
        source.reverse_dns - Reverse DNS name acquired through a reverse DNS query on an IP address. N.B. Record types other than PTR records may also appear in the reverse DNS tree. Furthermore, unfortunately, there is no rule prohibiting people from writing anything in a PTR record. Even JavaScript will work. A final point is stripped, string is converted to lower case characters.
        source.tor_node - If the source IP was a known tor node.
        source.url - A URL denotes an IOC, which refers to a malicious resource, whose interpretation is defined by the abuse type. A URL with the abuse type phishing refers to a phishing resource.
        source.urlpath - The path portion of an HTTP or related network request.
        status - Status of the malicious resource (phishing, dropzone, etc), e.g. online, offline.
        time.observation - The time the collector of the local instance processed (observed) the event.
        time.source - The time of occurence of the event as reported the feed (source).
        tlp - Traffic Light Protocol level of the event.

    Returns:
        a MISP object representing an 'intelmq_event'

    """
    requires = []
    args = [
        "classification.identifier",
        "classification.taxonomy",
        "classification.type",
        "comment",
        "destination.abuse_contact",
        "destination.account",
        "destination.allocated",
        "destination.as_name",
        "destination.asn",
        "destination.domain_suffix",
        "destination.fqdn",
        "destination.geolocation.cc",
        "destination.geolocation.city",
        "destination.geolocation.country",
        "destination.geolocation.latitude",
        "destination.geolocation.longitude",
        "destination.geolocation.region",
        "destination.geolocation.state",
        "destination.ip",
        "destination.local_hostname",
        "destination.local_ip",
        "destination.network",
        "destination.port",
        "destination.registry",
        "destination.reverse_dns",
        "destination.tor_node",
        "destination.url",
        "destination.urlpath",
        "event_description.target",
        "event_description.text",
        "event_description.url",
        "event_hash",
        "extra",
        "feed.accuracy",
        "feed.code",
        "feed.documentation",
        "feed.name",
        "feed.provider",
        "feed.url",
        "malware.hash.md5",
        "malware.hash.sha1",
        "malware.hash.sha256",
        "malware.name",
        "malware.version",
        "misp.attribute_uuid",
        "misp.event_uuid",
        "output",
        "protocol.application",
        "protocol.transport",
        "raw",
        "rtir_id",
        "screenshot_url",
        "source.abuse_contact",
        "source.account",
        "source.allocated",
        "source.as_name",
        "source.asn",
        "source.domain_suffix",
        "source.fqdn",
        "source.geolocation.cc",
        "source.geolocation.city",
        "source.geolocation.country",
        "source.geolocation.cymru_cc",
        "source.geolocation.geoip_cc",
        "source.geolocation.latitude",
        "source.geolocation.longitude",
        "source.geolocation.region",
        "source.geolocation.state",
        "source.ip",
        "source.local_hostname",
        "source.local_ip",
        "source.network",
        "source.port",
        "source.registry",
        "source.reverse_dns",
        "source.tor_node",
        "source.url",
        "source.urlpath",
        "status",
        "time.observation",
        "time.source",
        "tlp",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|intelmq_event"
    obj, isNew = MISPHelper._create_obj_cached(event, "intelmq_event", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_vehicle(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_vehicle - function for creating MISP vehicle object

    vehicle = Vehicle object template to describe a vehicle information and registration

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        date-first-registration - Date of first registration
        description - Description of the vehicle
        dyno-power - Dyno power output
        exterior-color - Exterior color of the vehicle
        gearbox - Gearbox
        image - Image of the vehicle.
        image-url - Image URL
        indicative-value - Indicative value
        interior-color - Interior color of the vehicle
        license-plate-number - License plate number
        make - Manufacturer of the vehicle
        model - Model of the vehicle
        state - State of the vehicle (stolen or recovered)
        type - Type of the vehicle
        vin - Vehicle identification number (VIN)

    Must have one of the following: ['description', 'make', 'model', 'license-plate-number', 'vin', 'dyno-power', 'date-first-registration', 'image-url', 'gearbox', 'exterior-color', 'interior-color', 'type', 'state', 'indicative-value']

    Returns:
        a MISP object representing an 'vehicle'

    """
    requires = [
        "description",
        "make",
        "model",
        "license-plate-number",
        "vin",
        "dyno-power",
        "date-first-registration",
        "image-url",
        "gearbox",
        "exterior-color",
        "interior-color",
        "type",
        "state",
        "indicative-value",
    ]
    args = [
        "date-first-registration",
        "description",
        "dyno-power",
        "exterior-color",
        "gearbox",
        "image",
        "image-url",
        "indicative-value",
        "interior-color",
        "license-plate-number",
        "make",
        "model",
        "state",
        "type",
        "vin",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|vehicle"
    obj, isNew = MISPHelper._create_obj_cached(event, "vehicle", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_telegram_bot(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_telegram_bot - function for creating MISP telegram-bot object

    telegram-bot = Information related to a telegram bot

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        chat-id - Telegram chat id
        comment - Phone associated with the telegram user
        name - Telegram bot name
        token - Telegram Token
        username - Telegram bot username, must end with "bot"

    Must have one of the following: ['token', 'chat-id', 'name', 'username', 'comment']

    Returns:
        a MISP object representing an 'telegram-bot'

    """
    requires = ["token", "chat-id", "name", "username", "comment"]
    args = ["chat-id", "comment", "name", "token", "username"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|telegram-bot"
    obj, isNew = MISPHelper._create_obj_cached(event, "telegram-bot", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_news_agency(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_news_agency - function for creating MISP news-agency object

    news-agency = News agencies compile news and disseminate news in bulk.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Postal address of the news agency.
        alias - Alias of the news agency.
        archive - Archive of the original document (Internet Archive, Archive.is, etc).
        attachment - The news file, screen capture, audio, etc.
        e-mail - Email address of the organization.
        fax-number - Fax number of the news agency.
        link - Original link to the news agency (Supposed harmless).
        name - Name of the news agency.
        phone-number - Phone number of the news agency.
        url - Original URL location of the news agency (potentially malicious).

    Must have one of the following: ['name', 'alias', 'archive', 'url', 'link', 'attachment']

    Returns:
        a MISP object representing an 'news-agency'

    """
    requires = ["name", "alias", "archive", "url", "link", "attachment"]
    args = [
        "address",
        "alias",
        "archive",
        "attachment",
        "e-mail",
        "fax-number",
        "link",
        "name",
        "phone-number",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|news-agency"
    obj, isNew = MISPHelper._create_obj_cached(event, "news-agency", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Organization(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Organization - function for creating MISP ftm-Organization object

    ftm-Organization = Organization

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        bvdId - Bureau van Dijk ID
        classification - Classification
        country - Country
        description - Description
        dissolutionDate - The date the legal entity was dissolved, if applicable
        dunsCode - Dun & Bradstreet identifier
        email - Email address
        icijId - ID according to International Consortium for Investigative Journalists
        idNumber - ID number of any applicable ID
        incorporationDate - The date the legal entity was incorporated
        indexText - Index text
        indexUpdatedAt - Index updated at
        innCode - Russian company ID
        jurisdiction - Country or region in which this entity operates
        keywords - Keywords
        legalForm - Legal form
        mainCountry - Primary country of this entity
        modifiedAt - Modified on
        name - Name
        notes - Notes
        okpoCode - Russian industry classifier
        opencorporatesUrl - OpenCorporates URL
        phone - Phone number
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        registrationNumber - Company registration number
        retrievedAt - Retrieved on
        sector - Sector
        sourceUrl - Source link
        status - Status
        summary - Summary
        swiftBic - Bank identifier code
        taxNumber - Tax identification number
        taxStatus - Tax status
        topics - Topics
        vatCode - (EU) VAT number
        weakAlias - Weak alias
        website - Website address
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Organization'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "bvdId",
        "classification",
        "country",
        "description",
        "dissolutionDate",
        "dunsCode",
        "email",
        "icijId",
        "idNumber",
        "incorporationDate",
        "indexText",
        "indexUpdatedAt",
        "innCode",
        "jurisdiction",
        "keywords",
        "legalForm",
        "mainCountry",
        "modifiedAt",
        "name",
        "notes",
        "okpoCode",
        "opencorporatesUrl",
        "phone",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "registrationNumber",
        "retrievedAt",
        "sector",
        "sourceUrl",
        "status",
        "summary",
        "swiftBic",
        "taxNumber",
        "taxStatus",
        "topics",
        "vatCode",
        "weakAlias",
        "website",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Organization"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Organization", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_facial_composite(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_facial_composite - function for creating MISP facial-composite object

    facial-composite = An object which describes a facial composite.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        facial-composite - Facial composite image.
        technique - Construction technique of the facial composite.
        text - A description of the facial composite.

    Must have one of the following: ['facial-composite', 'text']

    Returns:
        a MISP object representing an 'facial-composite'

    """
    requires = ["facial-composite", "text"]
    args = ["facial-composite", "technique", "text"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|facial-composite"
    obj, isNew = MISPHelper._create_obj_cached(event, "facial-composite", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_crowdsec_ip_context(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_crowdsec_ip_context - function for creating MISP crowdsec-ip-context object

    crowdsec-ip-context = CrowdSec Threat Intelligence - IP CTI search

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        as-name - Autonomous system name
        as-num - Autonomous system number
        attack-details - Triggered scenarios
        background-noise - Background noise
        behaviors - Attack categories
        city - City of origin
        classifications - Classification category of the IP address
        country - Country of origin
        country-code - Country Code
        dst-port - Destination port
        false-positives - False positive category of the IP address
        ip - IP Address
        ip-range - destination IP address
        ip-range-score - destination IP address
        latitude - Latitude of origin
        longitude - Longitude of origin
        reverse-dns - Reverse DNS name
        scores - Scores
        target-countries - Target countries (top 10)
        trust - Trust level

    Must have one of the following: ['ip']

    Returns:
        a MISP object representing an 'crowdsec-ip-context'

    """
    requires = ["ip"]
    args = [
        "as-name",
        "as-num",
        "attack-details",
        "background-noise",
        "behaviors",
        "city",
        "classifications",
        "country",
        "country-code",
        "dst-port",
        "false-positives",
        "ip",
        "ip-range",
        "ip-range-score",
        "latitude",
        "longitude",
        "reverse-dns",
        "scores",
        "target-countries",
        "trust",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|crowdsec-ip-context"
    obj, isNew = MISPHelper._create_obj_cached(event, "crowdsec-ip-context", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_reddit_comment(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_reddit_comment - function for creating MISP reddit-comment object

    reddit-comment = A Reddit post comment.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original comment (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported file from the comment.
        author - The user account that created the post (do not include u/).
        body - The raw text of the comment.
        description - A description of the comment.
        embedded-link - Link embedded in the subreddit description (potentially malicious).
        embedded-safe-link - Link embedded in the subreddit description (supposed safe).
        hashtag - Hashtag used to identify or promote the comment.
        link - Original link to the comment (supposed harmless).
        subreddit-name - The name of the subreddit where it was posted (exclude the r/).
        url - Original URL location of the comment (potentially malicious).
        username-quoted - Username who are quoted in the comment (do not include u/).

    Must have one of the following: ['author', 'body', 'archive', 'link']

    Returns:
        a MISP object representing an 'reddit-comment'

    """
    requires = ["author", "body", "archive", "link"]
    args = [
        "archive",
        "attachment",
        "author",
        "body",
        "description",
        "embedded-link",
        "embedded-safe-link",
        "hashtag",
        "link",
        "subreddit-name",
        "url",
        "username-quoted",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|reddit-comment"
    obj, isNew = MISPHelper._create_obj_cached(event, "reddit-comment", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_file(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_file - function for creating MISP file object

    file = File object describing a file with meta-information

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        access-time - The last time the file was accessed
        attachment - A non-malicious file.
        authentihash - Authenticode executable signature hash
        certificate - Certificate value if the binary is signed with another authentication scheme than authenticode
        compilation-timestamp - Compilation timestamp
        creation-time - Creation time of the file
        entropy - Entropy of the whole file
        file-encoding - Encoding format of the file
        filename - Filename on disk
        fullpath - Complete path of the filename including the filename
        imphash - Hash (md5) calculated from the PE import table
        malware-sample - The file itself (binary)
        md5 - [Insecure] MD5 hash (128 bits)
        mimetype - Mime type
        modification-time - Last time the file was modified
        path - Path of the filename complete or partial
        pattern-in-file - Pattern that can be found in the file
        sha1 - [Insecure] Secure Hash Algorithm 1 (160 bits)
        sha224 - Secure Hash Algorithm 2 (224 bits)
        sha256 - Secure Hash Algorithm 2 (256 bits)
        sha3-224 - Secure Hash Algorithm 3 (224 bits)
        sha3-256 - Secure Hash Algorithm 3 (256 bits)
        sha3-384 - Secure Hash Algorithm 3 (384 bits)
        sha3-512 - Secure Hash Algorithm 3 (512 bits)
        sha384 - Secure Hash Algorithm 2 (384 bits)
        sha512 - Secure Hash Algorithm 2 (512 bits)
        sha512/224 - Secure Hash Algorithm 2 (224 bits)
        sha512/256 - Secure Hash Algorithm 2 (256 bits)
        size-in-bytes - Size of the file, in bytes
        ssdeep - Fuzzy hash using context triggered piecewise hashes (CTPH)
        state - State of the file
        telfhash - telfhash - Symbol hash for ELF files.
        text - Free text value to attach to the file
        tlsh - Fuzzy hash by Trend Micro: Locality Sensitive Hash
        vhash - vhash by VirusTotal

    Must have one of the following: ['filename', 'size-in-bytes', 'authentihash', 'ssdeep', 'md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'sha512/224', 'sha512/256', 'sha3-224', 'sha3-256', 'sha3-384', 'sha3-512', 'tlsh', 'telfhash', 'imphash', 'pattern-in-file', 'certificate', 'malware-sample', 'attachment', 'path', 'fullpath']

    Returns:
        a MISP object representing an 'file'

    """
    requires = [
        "filename",
        "size-in-bytes",
        "authentihash",
        "ssdeep",
        "md5",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha512/224",
        "sha512/256",
        "sha3-224",
        "sha3-256",
        "sha3-384",
        "sha3-512",
        "tlsh",
        "telfhash",
        "imphash",
        "pattern-in-file",
        "certificate",
        "malware-sample",
        "attachment",
        "path",
        "fullpath",
    ]
    args = [
        "access-time",
        "attachment",
        "authentihash",
        "certificate",
        "compilation-timestamp",
        "creation-time",
        "entropy",
        "file-encoding",
        "filename",
        "fullpath",
        "imphash",
        "malware-sample",
        "md5",
        "mimetype",
        "modification-time",
        "path",
        "pattern-in-file",
        "sha1",
        "sha224",
        "sha256",
        "sha3-224",
        "sha3-256",
        "sha3-384",
        "sha3-512",
        "sha384",
        "sha512",
        "sha512/224",
        "sha512/256",
        "size-in-bytes",
        "ssdeep",
        "state",
        "telfhash",
        "text",
        "tlsh",
        "vhash",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|file"
    obj, isNew = MISPHelper._create_obj_cached(event, "file", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_translation(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_translation - function for creating MISP translation object

    translation = Used to keep a text and its translation

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        original-language - Language of the original text
        original-text - Original text
        translated-text - Text after translation
        translation-language - Language of translation
        translation-service - translation service used for the translation
        translation-type - type of translation

    Must have one of the following: ['original-text', 'translated-text', 'original-language', 'translation-language', 'translation-type']

    Returns:
        a MISP object representing an 'translation'

    """
    requires = [
        "original-text",
        "translated-text",
        "original-language",
        "translation-language",
        "translation-type",
    ]
    args = [
        "original-language",
        "original-text",
        "translated-text",
        "translation-language",
        "translation-service",
        "translation-type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|translation"
    obj, isNew = MISPHelper._create_obj_cached(event, "translation", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cpe_asset(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cpe_asset - function for creating MISP cpe-asset object

    cpe-asset = An asset which can be defined by a CPE. This can be a generic asset. CPE is a structured naming scheme for information technology systems, software, and packages.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        cpe - CPE—the well-formed CPE name(WFN). WFNs can be used to describe a set of products or to identify an individual product.
        description - Complementary description of the asset
        edition - The edition attribute is considered deprecated in this specification, and it SHOULD be assigned the logical value ANY except where required for backward compatibility with version 2.2 of the CPE specification.This attribute is referred to as the “legacyedition”attribute.If this attribute is used,values for this attribute SHOULD capture edition-related terms applied by the vendor to the product. Values for this attribute SHOULD be selected from an attribute-specific valid-values list, which MAYbe defined by other specifications that utilize this specification. Any character string meeting the requirements for WFNs (cf. 5.3.2) MAY be specified as the value of the attribute.
        language - Values for thisattribute SHALL be valid language tags as defined by [RFC5646], and SHOULD be used to define the language supported in the user interface of the product being described.Although any valid language tag MAY be used, only tags containing language and region codesSHOULD be used.
        other - Values for this attribute SHOULD capture any other general descriptive or identifying information which is vendor-or product-specific and which does not logically fit in any other attribute value. Values SHOULD NOT be used for storing instance-specific data (e.g., globally-unique identifiers or Internet Protocol addresses).Values for this attribute SHOULD be selected from a valid-values list that is refined over time; this list MAYbe defined by other specifications that utilize this specification. Any character string meeting the requirements for WFNs (cf. 5.3.2) MAYbe specified as the value of the attribute.
        part - Part - application, operating systems or hardware devices
        product - Values for this attribute SHOULD describe or identify the most common and recognizable title or name of the product. Values for this attribute SHOULD be selected from an attribute-specific valid-values list, which MAYbe defined by other specifications that utilize this specification. Any character string meeting the requirements for WFNs(cf. 5.3.2) MAY be specified as the value of the attribute.
        sw_edition - Values for this attribute SHOULD characterize how the product is tailored to a particular market or class of end users. Values for this attribute SHOULD be selected from an attribute-specific valid-values list, which MAYbe defined by other specifications that utilize this specification. Any character string meeting the requirements for WFNs(cf. 5.3.2) MAYbe specified as the value of the attribute.
        target_hw - Values for this attribute SHOULD characterize the instruction set architecture (e.g., x86) on which the product being described or identified by the WFN operates. Bytecode-intermediate languages, such as Java bytecode for the Java Virtual Machine or Microsoft Common Intermediate Language for the Common Language Runtime virtual machine, SHALL be considered instruction set architectures. Values for this attribute SHOULD be selected from an attribute-specific valid-values list, which MAYbe defined by other specifications that utilize this specification. Any character string meeting the requirements for WFNs(cf. 5.3.2) MAYbe specified as the value of the attribute.
        target_sw - Values for this attribute SHOULDi characterize the software computing environment within which the product operates.Values for this attribute SHOULD be selected from an attribute-specific valid-values list, which MAYbe defined by other specifications that utilize this specification. Any character string meeting the requirements for WFNs(cf. 5.3.2) MAYbe specified as the value of the attribute.
        update - Values for this attribute SHOULD be vendor-specific alphanumeric strings characterizing the particular update, service pack, or point release of the product.Values for this attribute SHOULD be selected from an attribute-specific valid-values list, which MAYbe defined by other specifications that utilize this specification. Any character string meeting the requirements for WFNs (cf. 5.3.2) MAYbe specified as the value of the attribute.
        vendor - Values for this attribute SHOULD describe or identify the person or organization that manufactured or created the product. Values for this attribute SHOULD be selected from an attribute-specific valid-values list, which MAYbe defined by other specifications that utilize this specification. Any character string meeting the requirements for WFNs (cf. 5.3.2) MAY be specified as the value of the attribute
        version - Values for this attribute SHOULD be vendor-specific alphanumeric strings characterizing the particular release version of the product.Version information SHOULD be copied directly (with escaping of printable non-alphanumeric characters as required) from discoverable data and SHOULD NOTbe truncated or otherwise modified. Any character string meeting the requirements for WFNs (cf. 5.3.2) MAYbe specified as the value of the attribute.

    Must have one of the following: ['cpe']

    Returns:
        a MISP object representing an 'cpe-asset'

    """
    requires = ["cpe"]
    args = [
        "cpe",
        "description",
        "edition",
        "language",
        "other",
        "part",
        "product",
        "sw_edition",
        "target_hw",
        "target_sw",
        "update",
        "vendor",
        "version",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cpe-asset"
    obj, isNew = MISPHelper._create_obj_cached(event, "cpe-asset", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_integrity_impact(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_integrity_impact - function for creating MISP integrity-impact object

    integrity-impact = Integrity Impact object as described in STIX 2.1 Incident object extension.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alteration -
        criticality - Criticality of the impact
        description - Additional details about the impact.
        end_time - The date and time the impact was last recorded.
        end_time_fidelity - Level of fidelity that the `end_time` is recorded in.
        information_type - Type of information that had its confidentiality compromised.
        record_count - The number of records of this type that were compromised.
        record_size - The amount of data that was compromised in bytes.
        recoverability - Recoverability of this particular impact with respect to feasibility and required time and resources.
        start_time - The date and time the impact was first recorded.
        start_time_fidelity - Level of fidelity that the `start_time` is recorded in.

    Returns:
        a MISP object representing an 'integrity-impact'

    """
    requires = []
    args = [
        "alteration",
        "criticality",
        "description",
        "end_time",
        "end_time_fidelity",
        "information_type",
        "record_count",
        "record_size",
        "recoverability",
        "start_time",
        "start_time_fidelity",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|integrity-impact"
    obj, isNew = MISPHelper._create_obj_cached(event, "integrity-impact", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_boleto(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_boleto - function for creating MISP boleto object

    boleto = A common form of payment used in Brazil.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        beneficiary - Final beneficiary of the boleto.
        beneficiary-bank-account - Recipient bank account number
        beneficiary-bank-agency - Recipient bank agency number
        boleto-number - Boleto code numbers
        creation-date - Date the boleto was created
        febraban-code - Financial institution code in Brazil that created the boleto.
        generator-financial-institution - Name of the bank or financial organisation that created the boleto.
        payment-due-date - Boleto payment date
        payment-status - Inform if boleto was as paid or not
        payment-value - The payment boleto value in Brazilian Reais
        requester - Organisation, service or affiliated person that requested creation of the boleto.

    Must have one of the following: ['boleto-number']

    Returns:
        a MISP object representing an 'boleto'

    """
    requires = ["boleto-number"]
    args = [
        "beneficiary",
        "beneficiary-bank-account",
        "beneficiary-bank-agency",
        "boleto-number",
        "creation-date",
        "febraban-code",
        "generator-financial-institution",
        "payment-due-date",
        "payment-status",
        "payment-value",
        "requester",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|boleto"
    obj, isNew = MISPHelper._create_obj_cached(event, "boleto", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_registry_key_value(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_registry_key_value - function for creating MISP registry-key-value object

    registry-key-value = Registry key value object describing a Windows registry key value, with its data, data type and name values. To be used when a registry key has multiple values.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        data - Data stored in the registry key value
        data-type - Registry key value type
        name - Name of the registry key value

    Must have one of the following: ['data']

    Returns:
        a MISP object representing an 'registry-key-value'

    """
    requires = ["data"]
    args = ["data", "data-type", "name"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|registry-key-value"
    obj, isNew = MISPHelper._create_obj_cached(event, "registry-key-value", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_RealEstate(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_RealEstate - function for creating MISP ftm-RealEstate object

    ftm-RealEstate = A piece of land or property.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        area - Area
        cadastralCode - Cadastral code
        censusBlock - Census block
        country - Country
        createDate - Record date
        currency - Currency
        description - Description
        encumbrance - An encumbrance is a right to, interest in, or legal liability on real property that does not prohibit passing title to the property but that diminishes its value.

        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        landType - Land type
        latitude - Latitude
        longitude - Longitude
        modifiedAt - Modified on
        name - Name
        notes - Notes
        previousName - Previous name
        program - Program
        propertyType - Property type
        publisher - Publishing source
        publisherUrl - Publishing source URL
        registrationNumber - Registration number
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        tenure - Tenure
        titleNumber - Title number
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-RealEstate'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "amount",
        "amountEur",
        "amountUsd",
        "area",
        "cadastralCode",
        "censusBlock",
        "country",
        "createDate",
        "currency",
        "description",
        "encumbrance",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "landType",
        "latitude",
        "longitude",
        "modifiedAt",
        "name",
        "notes",
        "previousName",
        "program",
        "propertyType",
        "publisher",
        "publisherUrl",
        "registrationNumber",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "tenure",
        "titleNumber",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-RealEstate"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-RealEstate", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_facebook_page(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_facebook_page - function for creating MISP facebook-page object

    facebook-page = Facebook page.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original page (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts, page members, etc.
        contact-detail - Contact url listed on about page.
        creator - The user account that created the page.
        description - A description of the page.
        embedded-link - Link embedded in the page description (potentially malicious).
        embedded-safe-link - Link embedded in the page description (supposed safe).
        event - Event announcement on page.
        hashtag - Hashtag used to identify or promote the page.
        link - Original link to the page (supposed harmless).
        page-alias - Aliases or previous names of page.
        page-id - Page id (without the @).
        page-name - The name of the page.
        page-type - Facebook page type, e.g. community, product etc.
        related-page-id - id of a page listed as related to this one (without the @).
        related-page-name - name of a page listed as related to this one.
        team-member - A user account who is a member of the page.
        url - Original URL location of the page (potentially malicious).

    Must have one of the following: ['page-name', 'description', 'archive', 'link']

    Returns:
        a MISP object representing an 'facebook-page'

    """
    requires = ["page-name", "description", "archive", "link"]
    args = [
        "archive",
        "attachment",
        "contact-detail",
        "creator",
        "description",
        "embedded-link",
        "embedded-safe-link",
        "event",
        "hashtag",
        "link",
        "page-alias",
        "page-id",
        "page-name",
        "page-type",
        "related-page-id",
        "related-page-name",
        "team-member",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|facebook-page"
    obj, isNew = MISPHelper._create_obj_cached(event, "facebook-page", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_hhhash(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_hhhash - function for creating MISP hhhash object

    hhhash = An object describing a HHHash object with the hash value along with the crawling parameters. For more information: https://www.foo.be/2023/07/HTTP-Headers-Hashing_HHHash

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - A description of the HHHash object.
        hhhash - HHHash hash in format hhh:version:hash_value
        hhhash-headers - HHHash value before being hash in the format each header is separated by a :.
        hhhash-query-headers - Set of headers used for the query in the format where each header is separated by a : .
        hhhash-tool - HHHash crawling infrastructure or tool used to produce the HHHash value.

    Must have one of the following: ['hhhash']

    Returns:
        a MISP object representing an 'hhhash'

    """
    requires = ["hhhash"]
    args = [
        "comment",
        "hhhash",
        "hhhash-headers",
        "hhhash-query-headers",
        "hhhash-tool",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|hhhash"
    obj, isNew = MISPHelper._create_obj_cached(event, "hhhash", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_google_safe_browsing(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_google_safe_browsing - function for creating MISP google-safe-browsing object

    google-safe-browsing = Google Safe checks a URL against Google's constantly updated list of unsafe web resources.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        malicious - If the URL comes back as malicious
        platforms - The platform identified (windows, linux, etc...)
        threats - The threat type related to that URL (malware, social engineering, etc...)

    Returns:
        a MISP object representing an 'google-safe-browsing'

    """
    requires = []
    args = ["malicious", "platforms", "threats"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|google-safe-browsing"
    obj, isNew = MISPHelper._create_obj_cached(event, "google-safe-browsing", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_confidentiality_impact(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_confidentiality_impact - function for creating MISP confidentiality-impact object

    confidentiality-impact = Confidentiality Impact object as described in STIX 2.1 Incident object extension.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        criticality - Criticality of the impact
        description - Additional details about the impact.
        end_time - The date and time the impact was last recorded.
        end_time_fidelity - Level of fidelity that the `end_time` is recorded in.
        information_type - Type of information that had its confidentiality compromised.
        loss_type - The type of loss that occurred to the relevant information.
        record_count - The number of records of this type that were compromised.
        record_size - The amount of data that was compromised in bytes.
        recoverability - Recoverability of this particular impact with respect to feasibility and required time and resources.
        start_time - The date and time the impact was first recorded.
        start_time_fidelity - Level of fidelity that the `start_time` is recorded in.

    Returns:
        a MISP object representing an 'confidentiality-impact'

    """
    requires = []
    args = [
        "criticality",
        "description",
        "end_time",
        "end_time_fidelity",
        "information_type",
        "loss_type",
        "record_count",
        "record_size",
        "recoverability",
        "start_time",
        "start_time_fidelity",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|confidentiality-impact"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "confidentiality-impact", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_weakness(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_weakness - function for creating MISP weakness object

    weakness = Weakness object describing a common weakness enumeration which can describe usable, incomplete, draft or deprecated weakness for software, equipment of hardware.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Description of the weakness.
        id - Weakness ID (generally CWE).
        name - Name of the weakness.
        status - Status of the weakness.
        weakness-abs - Abstraction of the weakness.

    Must have one of the following: ['id', 'name', 'description']

    Returns:
        a MISP object representing an 'weakness'

    """
    requires = ["id", "name", "description"]
    args = ["description", "id", "name", "status", "weakness-abs"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|weakness"
    obj, isNew = MISPHelper._create_obj_cached(event, "weakness", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_typosquatting_finder(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_typosquatting_finder - function for creating MISP typosquatting-finder object

    typosquatting-finder = Typosquatting info

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        research-domain - Research domain name
        variations-found-number - Number of variations for the research domain that some info is found.
        variations-number - Number of variations for the research domain.

    Returns:
        a MISP object representing an 'typosquatting-finder'

    """
    requires = []
    args = ["research-domain", "variations-found-number", "variations-number"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|typosquatting-finder"
    obj, isNew = MISPHelper._create_obj_cached(event, "typosquatting-finder", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_github_user(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_github_user - function for creating MISP github-user object

    github-user = GitHub user

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        avatar_url - Avatar URL
        bio - Biography of the GitHub user.
        blog - Blog - often used as website field of the user
        company - Company
        follower - GitHub user is followed by.
        following - Followed GitHub users by the GitHub user.
        id - User id
        link - Original Link to the GitHub account.
        location - Location given by the GitHub user
        node_id - GitHub GraphQL node_id
        organisation - Organisation affiliation of the GitHub user (it can be multiple).
        profile-image - Profile image of the GitHub user (it can be multiple).
        public_gists - # of public gists associated with this GitHub user
        public_repos - # of public repos associated with this GitHub user
        repository - GitHub repository under the GitHub user.
        ssh-public-key - SSH public key associated to the GitHub user.
        twitter_username - Associated twitter account
        user-fullname - Fullname of the GitHub user.
        username - GitHub username.
        verified - User verified.

    Must have one of the following: ['username', 'link']

    Returns:
        a MISP object representing an 'github-user'

    """
    requires = ["username", "link"]
    args = [
        "avatar_url",
        "bio",
        "blog",
        "company",
        "follower",
        "following",
        "id",
        "link",
        "location",
        "node_id",
        "organisation",
        "profile-image",
        "public_gists",
        "public_repos",
        "repository",
        "ssh-public-key",
        "twitter_username",
        "user-fullname",
        "username",
        "verified",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|github-user"
    obj, isNew = MISPHelper._create_obj_cached(event, "github-user", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Company(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Company - function for creating MISP ftm-Company object

    ftm-Company = A legal entity representing an association of people, whether natural, legal or a mixture of both, with a specific objective

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        bikCode - Russian bank account code
        bvdId - Bureau van Dijk ID
        caemCode - (RO) What kind of activity a legal entity is allowed to develop
        capital - Capital
        cikCode - US SEC Central Index Key
        classification - Classification
        coatoCode - COATO / SOATO / OKATO
        country - Country
        currency - Currency
        description - Description
        dissolutionDate - The date the legal entity was dissolved, if applicable
        dunsCode - Dun & Bradstreet identifier
        email - Email address
        fnsCode - (RU, ФНС) Federal Tax Service related info
        fssCode - (RU, ФСС) Social Security
        ibcRuc - ibcRUC
        icijId - ID according to International Consortium for Investigative Journalists
        idNumber - ID number of any applicable ID
        incorporationDate - The date the legal entity was incorporated
        indexText - Index text
        indexUpdatedAt - Index updated at
        innCode - Russian company ID
        ipoCode - IPO
        irsCode - US tax ID
        jibCode - Yugoslavia company ID
        jurisdiction - Jurisdiction
        keywords - Keywords
        kppCode - (RU, КПП) in addition to INN for orgs; reason for registration at FNS
        legalForm - Legal form
        mainCountry - Primary country of this entity
        mbsCode - MBS
        modifiedAt - Modified on
        name - Name
        notes - Notes
        ogrnCode - Major State Registration Number
        okopfCode - (RU, ОКОПФ) What kind of business entity
        okpoCode - Russian industry classifier
        oksmCode - Russian (ОКСМ) countries classifer
        okvedCode - (RU, ОКВЭД) Economical activity classifier. OKVED2 is the same but newer
        opencorporatesUrl - OpenCorporates URL
        pfrNumber - (RU, ПФР) Pension Fund Registration number. AAA-BBB-CCCCCC, where AAA is organisation region, BBB is district, CCCCCC number at a specific branch
        phone - Phone number
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        registrationNumber - Registration number
        retrievedAt - Retrieved on
        sector - Sector
        sourceUrl - Source link
        status - Status
        summary - Summary
        swiftBic - Bank identifier code
        taxNumber - Tax identification number
        taxStatus - Tax status
        topics - Topics
        vatCode - (EU) VAT number
        voenCode - Azerbaijan taxpayer ID
        weakAlias - Weak alias
        website - Website address
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Company'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "amount",
        "amountEur",
        "amountUsd",
        "bikCode",
        "bvdId",
        "caemCode",
        "capital",
        "cikCode",
        "classification",
        "coatoCode",
        "country",
        "currency",
        "description",
        "dissolutionDate",
        "dunsCode",
        "email",
        "fnsCode",
        "fssCode",
        "ibcRuc",
        "icijId",
        "idNumber",
        "incorporationDate",
        "indexText",
        "indexUpdatedAt",
        "innCode",
        "ipoCode",
        "irsCode",
        "jibCode",
        "jurisdiction",
        "keywords",
        "kppCode",
        "legalForm",
        "mainCountry",
        "mbsCode",
        "modifiedAt",
        "name",
        "notes",
        "ogrnCode",
        "okopfCode",
        "okpoCode",
        "oksmCode",
        "okvedCode",
        "opencorporatesUrl",
        "pfrNumber",
        "phone",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "registrationNumber",
        "retrievedAt",
        "sector",
        "sourceUrl",
        "status",
        "summary",
        "swiftBic",
        "taxNumber",
        "taxStatus",
        "topics",
        "vatCode",
        "voenCode",
        "weakAlias",
        "website",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Company"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Company", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_attack_pattern(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_attack_pattern - function for creating MISP attack-pattern object

    attack-pattern = Attack pattern describing a common attack pattern enumeration and classification.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        id - CAPEC ID.
        name - Name of the attack pattern.
        prerequisites - Prerequisites for the attack pattern to succeed.
        references - External references
        related-weakness - Weakness related to the attack pattern.
        solutions - Solutions for the attack pattern to be countered.
        summary - Summary description of the attack pattern.

    Must have one of the following: ['name', 'id']

    Returns:
        a MISP object representing an 'attack-pattern'

    """
    requires = ["name", "id"]
    args = [
        "id",
        "name",
        "prerequisites",
        "references",
        "related-weakness",
        "solutions",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|attack-pattern"
    obj, isNew = MISPHelper._create_obj_cached(event, "attack-pattern", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_person(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_person - function for creating MISP person object

    person = An object which describes a person or an identity.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Postal address of the person.
        alias - Alias name or known as.
        birth-certificate-number - Birth Certificate Number
        date-of-birth - Date of birth of a natural person (in YYYY-MM-DD format).
        dni - Spanish National ID
        e-mail - Email address of the person.
        fax-number - Fax number of the person.
        first-name - First name of a natural person.
        full-name - Full name of a natural person usually composed of first-name, middle-name and last-name.
        function - Function of the natural person such as analyst, cyber operator, lawyer.
        gender - The gender of a natural person.
        handle - Handle used by the user in application.
        identity-card-number - The identity card number of a natural person.
        instant-messaging-used - The IM application used by this person.
        last-name - Last name of a natural person.
        middle-name - Middle name of a natural person.
        mothers-name - Mother name, father, second name or other names following country's regulation.
        nationality - The nationality of a natural person.
        nic-hdl - NIC Handle (Network Information Centre handle) of the person.
        nie - Foreign National ID (Spain)
        nif - Tax ID Number (Spain)
        occupation - Work or occupation of the person or identity.
        ofac-identification-number - ofac-identification Number
        passport-country - The country in which the passport was issued.
        passport-creation - The creation date of the passport.
        passport-expiration - The expiration date of the passport.
        passport-number - The passport number of a natural person.
        phone-number - Phone number of the person.
        place-of-birth - Place of birth of a natural person.
        portrait - Portrait of the person.
        redress-number - The Redress Control Number is the record identifier for people who apply for redress through the DHS Travel Redress Inquiry Program (DHS TRIP). DHS TRIP is for travelers who have been repeatedly identified for additional screening and who want to file an inquiry to have erroneous information corrected in DHS systems.
        role - The role of a person.
        social-security-number - Social security number.
        text - A description of the person or identity.
        title - Title of the natural person such as Dr. or equivalent.

    Must have one of the following: ['first-name', 'last-name', 'full-name', 'alias', 'handle']

    Returns:
        a MISP object representing an 'person'

    """
    requires = ["first-name", "last-name", "full-name", "alias", "handle"]
    args = [
        "address",
        "alias",
        "birth-certificate-number",
        "date-of-birth",
        "dni",
        "e-mail",
        "fax-number",
        "first-name",
        "full-name",
        "function",
        "gender",
        "handle",
        "identity-card-number",
        "instant-messaging-used",
        "last-name",
        "middle-name",
        "mothers-name",
        "nationality",
        "nic-hdl",
        "nie",
        "nif",
        "occupation",
        "ofac-identification-number",
        "passport-country",
        "passport-creation",
        "passport-expiration",
        "passport-number",
        "phone-number",
        "place-of-birth",
        "portrait",
        "redress-number",
        "role",
        "social-security-number",
        "text",
        "title",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|person"
    obj, isNew = MISPHelper._create_obj_cached(event, "person", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_forged_document(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_forged_document - function for creating MISP forged-document object

    forged-document = Object describing a forged document.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original document (Internet Archive, Archive.is, etc).
        attachment - The forged document file.
        document-name - Title of the document.
        document-text - Raw text of document
        document-type - The type of document (not the file type).
        first-seen - When the document has been accessible or seen for the first time.
        last-seen - When the document has been accessible or seen for the last time.
        link - Original link into the document (Supposed harmless)
        objective - Objective of the forged document.
        purpose-of-document - What the document is used for.
        url - Original URL location of the document (potentially malicious)

    Must have one of the following: ['document-name', 'attachment', 'document-text']

    Returns:
        a MISP object representing an 'forged-document'

    """
    requires = ["document-name", "attachment", "document-text"]
    args = [
        "archive",
        "attachment",
        "document-name",
        "document-text",
        "document-type",
        "first-seen",
        "last-seen",
        "link",
        "objective",
        "purpose-of-document",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|forged-document"
    obj, isNew = MISPHelper._create_obj_cached(event, "forged-document", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_software_hive_BHO(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_regripper_software_hive_BHO - function for creating MISP regripper-software-hive-BHO object

    regripper-software-hive-BHO = Regripper Object template designed to gather information of the browser helper objects installed on the system.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        BHO-key-last-write-time - Date and time when the BHO key was last updated.
        BHO-name - Name of the browser helper object.
        class - Class to which the BHO belongs to.
        comments - Additional comments.
        key - Software hive key where the information is retrieved from.
        last-write-time - Date and time when the key was last updated.
        module - DLL module the BHO belongs to.
        references - References to the BHO.

    Returns:
        a MISP object representing an 'regripper-software-hive-BHO'

    """
    requires = []
    args = [
        "BHO-key-last-write-time",
        "BHO-name",
        "class",
        "comments",
        "key",
        "last-write-time",
        "module",
        "references",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|regripper-software-hive-BHO"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-software-hive-BHO", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_legal_entity(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_legal_entity - function for creating MISP legal-entity object

    legal-entity = An object to describe a legal entity.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        business - Business area of the entity.
        commercial-name - Commercial name of the entity.
        legal-form - Legal form of the entity.
        logo - Logo of the entity.
        name - Name of the entity.
        phone-number - Phone number of the entity.
        registration-number - Registration number of the entity in the relevant authority.
        text - A description of the entity.
        website - Website of the entity.

    Must have one of the following: ['name']

    Returns:
        a MISP object representing an 'legal-entity'

    """
    requires = ["name"]
    args = [
        "business",
        "commercial-name",
        "legal-form",
        "logo",
        "name",
        "phone-number",
        "registration-number",
        "text",
        "website",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|legal-entity"
    obj, isNew = MISPHelper._create_obj_cached(event, "legal-entity", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cs_beacon_config(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cs_beacon_config - function for creating MISP cs-beacon-config object

    cs-beacon-config = Cobalt Strike Beacon Config

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        c2 - The C2 sample communicates with
        ip - IP of the C2
        jar-md5 - MD5 of adversary cobaltstrike.jar file
        license-id - License ID of the Colbalt Strike
        md5 - MD5 of sample containing the Cobalt Strike shellcode
        sha1 - SHA1 of sample containing the Cobalt Strike shellcode
        sha256 - SHA256 of sample containing the Cobalt Strike shellcode
        vt-sha256 - SHA256 of sample uploaded to VirusTotal
        watermark - The watermark of sample

    Returns:
        a MISP object representing an 'cs-beacon-config'

    """
    requires = []
    args = [
        "c2",
        "ip",
        "jar-md5",
        "license-id",
        "md5",
        "sha1",
        "sha256",
        "vt-sha256",
        "watermark",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cs-beacon-config"
    obj, isNew = MISPHelper._create_obj_cached(event, "cs-beacon-config", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_physical_impact(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_physical_impact - function for creating MISP physical-impact object

    physical-impact = Physical Impact object as described in STIX 2.1 Incident object extension.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        asset_type - The type or property or system that was affected by this impact.
        criticality - Criticality of the impact
        description - Additional details about the impact.
        end_time - The date and time the impact was last recorded.
        end_time_fidelity - Level of fidelity that the `end_time` is recorded in.
        impact_type - Type of physical impact.
        recoverability - Recoverability of this particular impact with respect to feasibility and required time and resources.
        start_time - The date and time the impact was first recorded.
        start_time_fidelity - Level of fidelity that the `start_time` is recorded in.

    Returns:
        a MISP object representing an 'physical-impact'

    """
    requires = []
    args = [
        "asset_type",
        "criticality",
        "description",
        "end_time",
        "end_time_fidelity",
        "impact_type",
        "recoverability",
        "start_time",
        "start_time_fidelity",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|physical-impact"
    obj, isNew = MISPHelper._create_obj_cached(event, "physical-impact", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_postal_address(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_postal_address - function for creating MISP postal-address object

    postal-address = A postal address.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        apartment - Apartment / suite number
        city - City or town name
        country - Country
        description - Description of the address
        number - House number
        postal-code - ZIP / postal code
        province - Province
        state - State
        street - Street name

    Must have one of the following: ['street', 'city', 'country']

    Returns:
        a MISP object representing an 'postal-address'

    """
    requires = ["street", "city", "country"]
    args = [
        "apartment",
        "city",
        "country",
        "description",
        "number",
        "postal-code",
        "province",
        "state",
        "street",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|postal-address"
    obj, isNew = MISPHelper._create_obj_cached(event, "postal-address", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_rogue_dns(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_rogue_dns - function for creating MISP rogue-dns object

    rogue-dns = Rogue DNS as defined by CERT.br

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        hijacked-domain - Domain/hostname hijacked by the the rogue DNS
        phishing-ip - Resource records returns by the rogue DNS
        rogue-dns - IP address of the rogue DNS
        status - How many authoritative DNS answers were received at the Passive DNS Server's collectors with exactly the given set of values as answers.
        timestamp - Last time that the rogue DNS value was seen.

    Returns:
        a MISP object representing an 'rogue-dns'

    """
    requires = []
    args = ["hijacked-domain", "phishing-ip", "rogue-dns", "status", "timestamp"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|rogue-dns"
    obj, isNew = MISPHelper._create_obj_cached(event, "rogue-dns", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Debt(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Debt - function for creating MISP ftm-Debt object

    ftm-Debt = A monetary debt between two parties.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        currency - Currency
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        sourceUrl - Source URL
        startDate - Start date
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Debt'

    """
    requires = []
    args = [
        "alephUrl",
        "amount",
        "amountEur",
        "amountUsd",
        "currency",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "sourceUrl",
        "startDate",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Debt"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Debt", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_stix2_pattern(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_stix2_pattern - function for creating MISP stix2-pattern object

    stix2-pattern = An object describing a STIX pattern. The object can be linked via a relationship to other attributes or objects to describe how it can be represented as a STIX pattern.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - A description of the stix2-pattern.
        stix2-pattern - STIX 2 pattern
        version - Version of STIX 2 pattern.

    Must have one of the following: ['stix2-pattern']

    Returns:
        a MISP object representing an 'stix2-pattern'

    """
    requires = ["stix2-pattern"]
    args = ["comment", "stix2-pattern", "version"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|stix2-pattern"
    obj, isNew = MISPHelper._create_obj_cached(event, "stix2-pattern", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_virustotal_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_virustotal_report - function for creating MISP virustotal-report object

    virustotal-report = VirusTotal report

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Comment related to this hash
        community-score - Community Score
        detection-ratio - Detection Ratio
        first-submission - First Submission
        last-submission - Last Submission
        permalink - Permalink Reference

    Returns:
        a MISP object representing an 'virustotal-report'

    """
    requires = []
    args = [
        "comment",
        "community-score",
        "detection-ratio",
        "first-submission",
        "last-submission",
        "permalink",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|virustotal-report"
    obj, isNew = MISPHelper._create_obj_cached(event, "virustotal-report", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_system_hive_firewall_configuration(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_system_hive_firewall_configuration - function for creating MISP regripper-system-hive-firewall-configuration object

    regripper-system-hive-firewall-configuration = Regripper Object template designed to present firewall configuration information extracted from the system-hive.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Additional comments.
        disable-notification - Boolean flag to determine if firewall notifications are enabled.
        enbled-firewall - Boolean flag to determine if the firewall is enabled.
        last-write-time - Date and time when the firewall profile policy was last updated.
        profile - Firewall Profile type

    Returns:
        a MISP object representing an 'regripper-system-hive-firewall-configuration'

    """
    requires = []
    args = [
        "comment",
        "disable-notification",
        "enbled-firewall",
        "last-write-time",
        "profile",
    ]

    validate_args(requires, kwargs)
    uniq_str = (
        generate_uniq(requires, kwargs)
        + "|regripper-system-hive-firewall-configuration"
    )
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-system-hive-firewall-configuration", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_macho(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_macho - function for creating MISP macho object

    macho = Object describing a file in Mach-O format.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        entrypoint-address - Address of the entry point
        name - Binary's name
        number-sections - Number of sections
        text - Free text value to attach to the Mach-O file
        type - Type of Mach-O

    Must have one of the following: ['text', 'name', 'entrypoint-address']

    Returns:
        a MISP object representing an 'macho'

    """
    requires = ["text", "name", "entrypoint-address"]
    args = ["entrypoint-address", "name", "number-sections", "text", "type"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|macho"
    obj, isNew = MISPHelper._create_obj_cached(event, "macho", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Airplane(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Airplane - function for creating MISP ftm-Airplane object

    ftm-Airplane = An airplane, helicopter or other flying vehicle.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        buildDate - Build Date
        country - Country
        currency - Currency
        description - Description
        icaoCode - ICAO aircraft type designator
        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        manufacturer - Manufacturer
        model - Model
        modifiedAt - Modified on
        name - Name
        notes - Notes
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        registrationDate - Registration Date
        registrationNumber - Registration Number
        retrievedAt - Retrieved on
        serialNumber - Serial Number
        sourceUrl - Source link
        summary - Summary
        topics - Topics
        type - Type
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Airplane'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "amount",
        "amountEur",
        "amountUsd",
        "buildDate",
        "country",
        "currency",
        "description",
        "icaoCode",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "manufacturer",
        "model",
        "modifiedAt",
        "name",
        "notes",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "registrationDate",
        "registrationNumber",
        "retrievedAt",
        "serialNumber",
        "sourceUrl",
        "summary",
        "topics",
        "type",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Airplane"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Airplane", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ssh_authorized_keys(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ssh_authorized_keys - function for creating MISP ssh-authorized-keys object

    ssh-authorized-keys = An object to store ssh authorized keys file.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        first-seen - First time the ssh authorized keys file has been seen
        full-line - One full-line of the authorized key file
        hostname - hostname
        ip - IP Address
        key - Public key in base64 as found in the authorized key file
        key-id - Key-id and option part of the public key line
        last-seen - Last time the ssh authorized keys file has been seen
        text - A description of the ssh authorized keys

    Must have one of the following: ['ip', 'hostname', 'full-line', 'key']

    Returns:
        a MISP object representing an 'ssh-authorized-keys'

    """
    requires = ["ip", "hostname", "full-line", "key"]
    args = [
        "first-seen",
        "full-line",
        "hostname",
        "ip",
        "key",
        "key-id",
        "last-seen",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ssh-authorized-keys"
    obj, isNew = MISPHelper._create_obj_cached(event, "ssh-authorized-keys", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Video(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Video - function for creating MISP ftm-Video object

    ftm-Video = Video

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        duration - Duration of the video in ms
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Video'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "duration",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Video"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Video", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_tracking_id(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_tracking_id - function for creating MISP tracking-id object

    tracking-id = Analytics and tracking ID such as used in Google Analytics or other analytic platform.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Description of the tracking id.
        first-seen - First time the tracking code was seen.
        hostname - Hostname where the tracking id was found (assumed safe).
        id - Tracking code.
        last-seen - Last time the tracking code was seen.
        tracker - Name of the tracker - organisation doing the tracking and/or analytics.
        url - URL where the tracking id was found (potentially malicious).

    Must have one of the following: ['id']

    Returns:
        a MISP object representing an 'tracking-id'

    """
    requires = ["id"]
    args = [
        "description",
        "first-seen",
        "hostname",
        "id",
        "last-seen",
        "tracker",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|tracking-id"
    obj, isNew = MISPHelper._create_obj_cached(event, "tracking-id", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Package(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Package - function for creating MISP ftm-Package object

    ftm-Package = Package

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Package'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Package"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Package", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_sandbox_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_sandbox_report - function for creating MISP sandbox-report object

    sandbox-report = Sandbox report

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        on-premise-sandbox - The on-premise sandbox used
        permalink - Permalink reference
        raw-report - Raw report from sandbox
        results - Freetext result values
        saas-sandbox - A non-on-premise sandbox, also results are not publicly available
        sandbox-file - File related to sandbox run
        sandbox-type - The type of sandbox used
        score - Score
        web-sandbox - A web sandbox where results are publicly available via an URL

    Must have one of the following: ['web-sandbox', 'on-premise-sandbox', 'saas-sandbox']

    Returns:
        a MISP object representing an 'sandbox-report'

    """
    requires = ["web-sandbox", "on-premise-sandbox", "saas-sandbox"]
    args = [
        "on-premise-sandbox",
        "permalink",
        "raw-report",
        "results",
        "saas-sandbox",
        "sandbox-file",
        "sandbox-type",
        "score",
        "web-sandbox",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|sandbox-report"
    obj, isNew = MISPHelper._create_obj_cached(event, "sandbox-report", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_parler_comment(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_parler_comment - function for creating MISP parler-comment object

    parler-comment = Parler comment.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original parley (Internet Archive, Archive.is, etc).
        attachment - The parley file or screen capture.
        badge - Comment badge.
        body - Raw text of the post.
        comment-depth - Comment nesting depth.
        comments - Comments on this object.
        controversy - Comment controversy.
        creator - Name of the account that posted this parley.
        creator-id - ID of the account that posted this parley.
        downvotes - Comment downvotes.
        embedded-link - Link in the parley
        embedded-safe-link - Safe link in the parley
        hashtag - Hashtag embedded in the parley.
        in-reply-to-display-name - The user display name of the parley this post shares.
        in-reply-to-parley-id - The Parler ID of the parley that this post shares.
        in-reply-to-user-id - The user ID of the parley this post shares.
        link - Original link to the post (supposed harmless).
        post-id - Numeric id of the parley.
        score - Comment score.
        upvotes - Comment upvotes.
        url - Original URL of the parley, e.g. link shortener (potentially malicious).
        username-quoted - Username who is quoted in the parley.

    Must have one of the following: ['body', 'post-id', 'archive', 'url', 'link', 'attachment']

    Returns:
        a MISP object representing an 'parler-comment'

    """
    requires = ["body", "post-id", "archive", "url", "link", "attachment"]
    args = [
        "archive",
        "attachment",
        "badge",
        "body",
        "comment-depth",
        "comments",
        "controversy",
        "creator",
        "creator-id",
        "downvotes",
        "embedded-link",
        "embedded-safe-link",
        "hashtag",
        "in-reply-to-display-name",
        "in-reply-to-parley-id",
        "in-reply-to-user-id",
        "link",
        "post-id",
        "score",
        "upvotes",
        "url",
        "username-quoted",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|parler-comment"
    obj, isNew = MISPHelper._create_obj_cached(event, "parler-comment", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_rtir(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_rtir - function for creating MISP rtir object

    rtir = RTIR - Request Tracker for Incident Response

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        classification - Classification of the RTIR ticket
        constituency - Constituency of the RTIR ticket
        ip - IPs automatically extracted from the RTIR ticket
        queue - Queue of the RTIR ticket
        status - Status of the RTIR ticket
        subject - Subject of the RTIR ticket
        ticket-number - ticket-number of the RTIR ticket

    Must have one of the following: ['ticket-number']

    Returns:
        a MISP object representing an 'rtir'

    """
    requires = ["ticket-number"]
    args = [
        "classification",
        "constituency",
        "ip",
        "queue",
        "status",
        "subject",
        "ticket-number",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|rtir"
    obj, isNew = MISPHelper._create_obj_cached(event, "rtir", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cap_alert(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cap_alert - function for creating MISP cap-alert object

    cap-alert = Common Alerting Protocol Version (CAP) alert object

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        addresses - The group listing of intended recipients of the alert message. (1)   Required when <scope> is “Private”, optional when <scope> is “Public” or “Restricted”.  (2)   Each recipient SHALL be identified by an identifier or an address.  (3)   Multiple space-delimited addresses MAY be included.  Addresses including whitespace MUST be enclosed in double-quotes.
        code - The code denoting the special handling of the alert message.
        identifier - The identifier of the alert message in a number or string uniquely identifying this message, assigned by the sender.
        incident - The group listing naming the referent incident(s) of the alert message. (1)   Used to collate multiple messages referring to different aspects of the same incident.  (2)   If multiple incident identifiers are referenced, they SHALL be separated by whitespace.  Incident names including whitespace SHALL be surrounded by double-quotes.
        msgType - The code denoting the nature of the alert message.
        note - The text describing the purpose or significance of the alert message.
        references - The group listing identifying earlier message(s) referenced by the alert message. (1)   The extended message identifier(s) (in the form sender,identifier,sent) of an earlier CAP message or messages referenced by this one.  (2)   If multiple messages are referenced, they SHALL be separated by whitespace.
        restriction - The text describing the rule for limiting distribution of the restricted alert message.
        scope - The code denoting the intended distribution of the alert message.
        sender - The identifier of the sender of the alert message which identifies the originator of this alert. Guaranteed by assigner to be unique globally; e.g., may be based on an Internet domain name.
        sent - The time and date of the origination of the alert message.
        source - The text identifying the source of the alert message. The particular source of this alert; e.g., an operator or a specific device.
        status - The code denoting the appropriate handling of the alert message.

    Must have one of the following: ['msgType']

    Returns:
        a MISP object representing an 'cap-alert'

    """
    requires = ["msgType"]
    args = [
        "addresses",
        "code",
        "identifier",
        "incident",
        "msgType",
        "note",
        "references",
        "restriction",
        "scope",
        "sender",
        "sent",
        "source",
        "status",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cap-alert"
    obj, isNew = MISPHelper._create_obj_cached(event, "cap-alert", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_fail2ban(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_fail2ban - function for creating MISP fail2ban object

    fail2ban = Fail2ban event

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        attack-type - Type of the attack
        banned-ip - IP Address banned by fail2ban
        failures - Amount of failures that lead to the ban.
        logfile - Full logfile related to the attack.
        logline - Example log line that caused the ban.
        processing-timestamp - Timestamp of the report
        sensor - Identifier of the sensor
        victim - Identifier of the victim

    Returns:
        a MISP object representing an 'fail2ban'

    """
    requires = []
    args = [
        "attack-type",
        "banned-ip",
        "failures",
        "logfile",
        "logline",
        "processing-timestamp",
        "sensor",
        "victim",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|fail2ban"
    obj, isNew = MISPHelper._create_obj_cached(event, "fail2ban", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_shortened_link(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_shortened_link - function for creating MISP shortened-link object

    shortened-link = Shortened link and its redirect target

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        credential - Credential (username, password)
        domain - Full domain
        first-seen - First time this shortened URL has been seen
        redirect-url - Redirected to URL
        shortened-url - Shortened URL
        text - Description and context of the shortened URL

    Returns:
        a MISP object representing an 'shortened-link'

    """
    requires = []
    args = [
        "credential",
        "domain",
        "first-seen",
        "redirect-url",
        "shortened-url",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|shortened-link"
    obj, isNew = MISPHelper._create_obj_cached(event, "shortened-link", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_keybase_account(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_keybase_account - function for creating MISP keybase-account object

    keybase-account = Information related to a keybase account, from API Users Object

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        bio - Bio of the keybase user
        cryptocurrency_addresses - Associated cryptocurrency address with the keybase user
        emails - Emails associated with the keybase user
        full_name - Full name
        id - Keybase user identifier
        location - Location
        private_keys - OpenPGP private keys associated with the keybase user
        public_keys - OpenPGP public keys associated with the keybase user
        username - Keybase username

    Must have one of the following: ['username']

    Returns:
        a MISP object representing an 'keybase-account'

    """
    requires = ["username"]
    args = [
        "bio",
        "cryptocurrency_addresses",
        "emails",
        "full_name",
        "id",
        "location",
        "private_keys",
        "public_keys",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|keybase-account"
    obj, isNew = MISPHelper._create_obj_cached(event, "keybase-account", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_coin_address(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_coin_address - function for creating MISP coin-address object

    coin-address = An address used in a cryptocurrency

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Bitcoin address used as a payment destination in a cryptocurrency
        address-crypto - Generic cryptocurrency address if the format is not a standard BTC or XMR address
        address-xmr - Monero address used as a payment destination in a cryptocurrency
        current-balance - Current balance of address
        first-seen - First time this payment destination address has been seen
        last-seen - Last time this payment destination address has been seen
        last-updated - Last time the balances and totals have been updated
        symbol - The (uppercase) symbol of the cryptocurrency used. Symbol should be from https://coinmarketcap.com/all/views/all/
        text - Free text value
        total-received - Total balance received
        total-sent - Total balance sent
        total-transactions - Total transactions performed

    Must have one of the following: ['address', 'address-xmr', 'address-crypto']

    Returns:
        a MISP object representing an 'coin-address'

    """
    requires = ["address", "address-xmr", "address-crypto"]
    args = [
        "address",
        "address-crypto",
        "address-xmr",
        "current-balance",
        "first-seen",
        "last-seen",
        "last-updated",
        "symbol",
        "text",
        "total-received",
        "total-sent",
        "total-transactions",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|coin-address"
    obj, isNew = MISPHelper._create_obj_cached(event, "coin-address", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_TaxRoll(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_TaxRoll - function for creating MISP ftm-TaxRoll object

    ftm-TaxRoll = A tax declaration of an individual

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        birthDate - Date of birth
        country - Country
        date - Date
        description - Description
        endDate - End date
        givenName - Given name
        income - Registered income
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        sourceUrl - Source URL
        startDate - Start date
        summary - Summary
        surname - Surname
        taxPaid - Amount of tax paid
        wealth - Registered wealth

    Returns:
        a MISP object representing an 'ftm-TaxRoll'

    """
    requires = []
    args = [
        "alephUrl",
        "birthDate",
        "country",
        "date",
        "description",
        "endDate",
        "givenName",
        "income",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "sourceUrl",
        "startDate",
        "summary",
        "surname",
        "taxPaid",
        "wealth",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-TaxRoll"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-TaxRoll", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_gtp_attack(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_gtp_attack - function for creating MISP gtp-attack object

    gtp-attack = GTP attack object as attack as seen on the GTP signaling protocol supporting GPRS/LTE networks.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        GtpImei - GTP IMEI (International Mobile Equipment Identity).
        GtpImsi - GTP IMSI (International mobile subscriber identity).
        GtpInterface - GTP interface.
        GtpMessageType - GTP defines a set of messages between two associated GSNs or an SGSN and an RNC. Message type is described as a decimal value.
        GtpMsisdn - GTP MSISDN.
        GtpServingNetwork - GTP Serving Network.
        GtpVersion - GTP version
        PortDest - Destination port.
        PortSrc - Source port.
        first-seen - When the attack has been seen for the first time.
        ipDest - IP destination address.
        ipSrc - IP source address.
        text - A description of the GTP attack.

    Must have one of the following: ['text']

    Returns:
        a MISP object representing an 'gtp-attack'

    """
    requires = ["text"]
    args = [
        "GtpImei",
        "GtpImsi",
        "GtpInterface",
        "GtpMessageType",
        "GtpMsisdn",
        "GtpServingNetwork",
        "GtpVersion",
        "PortDest",
        "PortSrc",
        "first-seen",
        "ipDest",
        "ipSrc",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|gtp-attack"
    obj, isNew = MISPHelper._create_obj_cached(event, "gtp-attack", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_software_hive_application_paths(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_software_hive_application_paths - function for creating MISP regripper-software-hive-application-paths object

    regripper-software-hive-application-paths = Regripper Object template designed to gather information of the application paths.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comments - Additional comments.
        executable-file-name - Name of the executable file.
        key - Software hive key where the information is retrieved from.
        last-write-time - Date and time when the key was last updated.
        path - Path of the executable file.
        references - References to the application installed.

    Returns:
        a MISP object representing an 'regripper-software-hive-application-paths'

    """
    requires = []
    args = [
        "comments",
        "executable-file-name",
        "key",
        "last-write-time",
        "path",
        "references",
    ]

    validate_args(requires, kwargs)
    uniq_str = (
        generate_uniq(requires, kwargs) + "|regripper-software-hive-application-paths"
    )
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-software-hive-application-paths", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ransom_negotiation(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ransom_negotiation - function for creating MISP ransom-negotiation object

    ransom-negotiation = An object to describe ransom negotiations, as seen in ransomware incidents.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        Remarks - Remarks
        annual_revenue_EUR - Annual revenue of the targeted organisation in EUR
        chatsite - Chatsite where the negotiations take place
        chatsite_id_private - Second, private, chat ID given by actor
        chatsite_id_public - Initial chat ID given by actor
        currency - The currency of the initial demand. Often USD or BTC.
        data_leaked - Was data leaked in this incident?
        data_stolen - Was data exfiltrated in this incident?
        discount - Discount after negotiations
        email_address - Contact address, if any
        final_ransom - Final ransom amount after negotiations, in the currency as displayed in field 'currency'
        initial_ransom - Initial ransom demand in the currency as displayed in field 'currency'
        negotiations_screenshot - Screenshot of the negotiations
        negotiations_transcript - Transcript of the negotiations
        pay_for_deletion - Does the target need/want to pay for data deletion
        pay_for_encryptor - Does the target need/want to pay for the decryptor
        percentage_of_revenue - Percentage of the annual revenue that the ransom demand amounts to
        time - Date and time of transaction
        url_leaksite - URL of the leaksite
        value_EUR - Value in EUR of the final ransom amount, with conversion rate as of date/time displayed in field 'time'
        wallet-address - A cryptocoin wallet address

    Returns:
        a MISP object representing an 'ransom-negotiation'

    """
    requires = []
    args = [
        "Remarks",
        "annual_revenue_EUR",
        "chatsite",
        "chatsite_id_private",
        "chatsite_id_public",
        "currency",
        "data_leaked",
        "data_stolen",
        "discount",
        "email_address",
        "final_ransom",
        "initial_ransom",
        "negotiations_screenshot",
        "negotiations_transcript",
        "pay_for_deletion",
        "pay_for_encryptor",
        "percentage_of_revenue",
        "time",
        "url_leaksite",
        "value_EUR",
        "wallet-address",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ransom-negotiation"
    obj, isNew = MISPHelper._create_obj_cached(event, "ransom-negotiation", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_authenticode_signerinfo(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_authenticode_signerinfo - function for creating MISP authenticode-signerinfo object

    authenticode-signerinfo = Authenticode Signer Info

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        content-type - Content type
        digest-base64 - Signature created by the signing certificate’s private key
        digest_algorithm - Algorithm used to hash the file.
        encryption_algorithm - Algorithm used to encrypt the digest
        issuer - Issuer of the certificate
        program-name - Program name
        serial-number - Serial number of the certificate
        signature_algorithm - Signature algorithm
        text - Free text description of the signer info
        url - Url
        version - Version of the certificate

    Must have one of the following: ['url', 'program-name', 'issuer']

    Returns:
        a MISP object representing an 'authenticode-signerinfo'

    """
    requires = ["url", "program-name", "issuer"]
    args = [
        "content-type",
        "digest-base64",
        "digest_algorithm",
        "encryption_algorithm",
        "issuer",
        "program-name",
        "serial-number",
        "signature_algorithm",
        "text",
        "url",
        "version",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|authenticode-signerinfo"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "authenticode-signerinfo", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_irc(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_irc - function for creating MISP irc object

    irc = An IRC object to describe an IRC server and the associated channels.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        channel - IRC channel associated to the IRC server
        dst-port - Destination port to reach the IRC server
        first-seen - First time the IRC server with the associated channels has been seen
        hostname - Hostname of the IRC server
        ip - IP address of the IRC server
        last-seen - Last time the IRC server with the associated channels has been seen
        nickname - IRC nickname used to connect to the associated IRC server and channels
        text - Description of the IRC server

    Must have one of the following: ['ip', 'hostname', 'channel', 'nickname']

    Returns:
        a MISP object representing an 'irc'

    """
    requires = ["ip", "hostname", "channel", "nickname"]
    args = [
        "channel",
        "dst-port",
        "first-seen",
        "hostname",
        "ip",
        "last-seen",
        "nickname",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|irc"
    obj, isNew = MISPHelper._create_obj_cached(event, "irc", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_suricata(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_suricata - function for creating MISP suricata object

    suricata = An object describing one or more Suricata rule(s) along with version and contextual information.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - A description of the Suricata rule(s).
        ref - Reference to the Suricata rule such as origin of the rule or alike.
        suricata - Suricata rule.
        version - Version of the Suricata rule depending where the suricata rule is known to work as expected.

    Must have one of the following: ['suricata']

    Returns:
        a MISP object representing an 'suricata'

    """
    requires = ["suricata"]
    args = ["comment", "ref", "suricata", "version"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|suricata"
    obj, isNew = MISPHelper._create_obj_cached(event, "suricata", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_tsk_web_downloads(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_tsk_web_downloads - function for creating MISP tsk-web-downloads object

    tsk-web-downloads = An Object Template to add web-downloads

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        additional-comments - Comments.
        attachment - The downloaded file itself.
        datetime-accessed - date and time when the file was downloaded.
        name - Name of the file downloaded.
        path-downloadedTo - Location the file was downloaded to.
        pathID - Id of the attribute file where the information is gathered from.
        url - The URL used to download the file.

    Returns:
        a MISP object representing an 'tsk-web-downloads'

    """
    requires = []
    args = [
        "additional-comments",
        "attachment",
        "datetime-accessed",
        "name",
        "path-downloadedTo",
        "pathID",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|tsk-web-downloads"
    obj, isNew = MISPHelper._create_obj_cached(event, "tsk-web-downloads", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Call(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Call - function for creating MISP ftm-Call object

    ftm-Call = Phone call object template including the call and all associated meta-data.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        callerNumber - Caller's Number
        date - Date
        description - Description
        duration - Call Duration in seconds
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        receiverNumber - Receiver's Number
        recordId - Record ID
        retrievedAt - Retrieved on
        sourceUrl - Source URL
        startDate - Start date
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Call'

    """
    requires = []
    args = [
        "alephUrl",
        "callerNumber",
        "date",
        "description",
        "duration",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "receiverNumber",
        "recordId",
        "retrievedAt",
        "sourceUrl",
        "startDate",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Call"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Call", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ilr_notification_incident(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ilr_notification_incident - function for creating MISP ilr-notification-incident object

    ilr-notification-incident = Institut Luxembourgeois de Regulation - Notification d'incident

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        actions-corrective - Actions correctives a long terme
        actions-posterieur - Actions posterieures de l’incident pour minimiser le risque
        autres-informations - Autres informations concernant la nature de l’incident notamment la liste des actifs affectes et les causes subsequentes eventuelles, declenches par la cause initiale
        cause-initiale-incident - Cause initiale de l'incident
        date-incident - Date/heure de la detection de l’incident:
        date-pre-notification - Date de la pre-notification
        delimitation-geographique - Delimitation geographique
        description-incident - Description generale de l’incident
        description-probleme-services-urgence - Description du probleme sur les services d’urgences impactes
        details-service - Details relatifs au service concerne et a l’impact de l’incident
        email-contact-incident - Email de la personne de contact en rapport avec l’incident
        impact-servicesw-urgence - Services d’urgences impactes ?
        interconnections-affectees - Interconnections nationales et/ou internationales affectees
        nom-contact-incident - Nom de la personne de contact en rapport avec l’incident
        nom-entreprise - Nom de l’entreprise notifiee
        remarques - Remarque(s), notamment les experiences gagnees et les leçons tirees de l’incident
        telephone-contact-incident - Telephone de la personne de contact en rapport avec l’incident
        traitement-incident - Traitement de l’incident et actions effectuees en ordre chronologique
        zone-impactee - zones/communes/villes impactees

    Returns:
        a MISP object representing an 'ilr-notification-incident'

    """
    requires = []
    args = [
        "actions-corrective",
        "actions-posterieur",
        "autres-informations",
        "cause-initiale-incident",
        "date-incident",
        "date-pre-notification",
        "delimitation-geographique",
        "description-incident",
        "description-probleme-services-urgence",
        "details-service",
        "email-contact-incident",
        "impact-servicesw-urgence",
        "interconnections-affectees",
        "nom-contact-incident",
        "nom-entreprise",
        "remarques",
        "telephone-contact-incident",
        "traitement-incident",
        "zone-impactee",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ilr-notification-incident"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "ilr-notification-incident", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_timesketch_timeline(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_timesketch_timeline - function for creating MISP timesketch-timeline object

    timesketch-timeline = A timesketch timeline object based on mandatory field in timesketch to describe a log entry.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        datetime - When the log entry was seen
        message - Informative message of the event
        timestamp - When the log entry was seen in microseconds since Unix epoch
        timestamp_desc - Text explaining what type of timestamp is it

    Must have one of the following: ['message', 'datetime']

    Returns:
        a MISP object representing an 'timesketch-timeline'

    """
    requires = ["message", "datetime"]
    args = ["datetime", "message", "timestamp", "timestamp_desc"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|timesketch-timeline"
    obj, isNew = MISPHelper._create_obj_cached(event, "timesketch-timeline", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ss7_attack(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ss7_attack - function for creating MISP ss7-attack object

    ss7-attack = SS7 object of an attack as seen on the SS7 signaling protocol supporting GSM/GPRS/UMTS networks.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        Category - Category
        GtAssignee - GT Assignee this is the party that got the GT range assigned by their Regulator.
        GtLessee - GT Lessee is a third party who will use a leased global title from a GT Lessor.
        GtLessor - GT Lessor is a GT Assignee that has decided to lease one or more of their GTs to a third party, the GT Lessee, typically on a commercial basis.
        GtSubLessee - GT Sub-Lessee – this is an additional third party who has entered into an agreement with the GT Lessee to sub-lease a GT from them.
        MapApplicationContext - MAP application context in OID format.
        MapGmlc - MAP GMLC. Phone number.
        MapGsmscfGT - MAP GSMSCF GT. Phone number.
        MapImsi - MAP IMSI. Phone number starting with MCC/MNC.
        MapMscGT - MAP MSC GT. Phone number.
        MapMsisdn - MAP MSISDN. Phone number.
        MapOpCode - MAP operation codes - Decimal value between 0-99.
        MapSmsTP-DCS - MAP SMS TP-DCS.
        MapSmsTP-OA - MAP SMS TP-OA. Phone number.
        MapSmsTP-PID - MAP SMS TP-PID.
        MapSmsText - MAP SMS Text. Important indicators in SMS text.
        MapSmsTypeNumber - MAP SMS TypeNumber.
        MapSmscGT - MAP SMSC. Phone number.
        MapUssdCoding - MAP USSD Content.
        MapUssdContent - MAP USSD Content.
        MapVersion - Map version.
        MapVlrGT - MAP VLR GT. Phone number.
        SccpCdGT - Signaling Connection Control Part (SCCP) CdGT - Phone number.
        SccpCdGT-Country - Country in which SCCP CDGT is registered.
        SccpCdGT-CountryISO2 - Code ISO 3166-1 alpha-2 from which the SCCP CDGT is allocated.
        SccpCdGT-OperatorName - Operator Name under which the SCCP CDGT is registered.
        SccpCdGT-TADIG - TADIG under which the SCCP CDGT is registered.
        SccpCdPC - Signaling Connection Control Part (SCCP) CdPC - Phone number.
        SccpCdSSN - Signaling Connection Control Part (SCCP) - Decimal value between 0-255.
        SccpCgGT - Signaling Connection Control Part (SCCP) CgGT - Phone number.
        SccpCgGT-Country - Country in which SCCP CGGT is registered.
        SccpCgGT-CountryISO2 - Allocated Code ISO 3166-1 alpha-2 for the SCCP CGGT.
        SccpCgGT-OperatorName - Operator Name under which the SCCP CGGT is registered.
        SccpCgGT-TADIG - TADIG under which the SCCP CGGT is registered.
        SccpCgPC - Signaling Connection Control Part (SCCP) CgPC - Phone number.
        SccpCgSSN - Signaling Connection Control Part (SCCP) - Decimal value between 0-255.
        first-seen - When the attack has been seen for the first time.
        text - A description of the attack seen via SS7 logging.

    Must have one of the following: ['text']

    Returns:
        a MISP object representing an 'ss7-attack'

    """
    requires = ["text"]
    args = [
        "Category",
        "GtAssignee",
        "GtLessee",
        "GtLessor",
        "GtSubLessee",
        "MapApplicationContext",
        "MapGmlc",
        "MapGsmscfGT",
        "MapImsi",
        "MapMscGT",
        "MapMsisdn",
        "MapOpCode",
        "MapSmsTP-DCS",
        "MapSmsTP-OA",
        "MapSmsTP-PID",
        "MapSmsText",
        "MapSmsTypeNumber",
        "MapSmscGT",
        "MapUssdCoding",
        "MapUssdContent",
        "MapVersion",
        "MapVlrGT",
        "SccpCdGT",
        "SccpCdGT-Country",
        "SccpCdGT-CountryISO2",
        "SccpCdGT-OperatorName",
        "SccpCdGT-TADIG",
        "SccpCdPC",
        "SccpCdSSN",
        "SccpCgGT",
        "SccpCgGT-Country",
        "SccpCgGT-CountryISO2",
        "SccpCgGT-OperatorName",
        "SccpCgGT-TADIG",
        "SccpCgPC",
        "SccpCgSSN",
        "first-seen",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ss7-attack"
    obj, isNew = MISPHelper._create_obj_cached(event, "ss7-attack", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_scrippsco2_c13_daily(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_scrippsco2_c13_daily - function for creating MISP scrippsco2-c13-daily object

    scrippsco2-c13-daily = Daily average C13 concentrations (ppm) derived from flask air samples.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        c13-value - C13 value (ppm) - C13 concentrations are measured on the '08A' Calibration Scale
        flag - Flag (see taxonomy for details).
        number-flask - Number of flasks used in daily average.
        sample-date-excel - M$Excel spreadsheet date format.
        sample-date-fractional - Decimal year and fractional year.
        sample-datetime - Datetime the sample has been taken

    Must have one of the following: ['sample-datetime', 'sample-date-excel', 'sample-date-fractional', 'number-flask', 'flag', 'c13-value']

    Returns:
        a MISP object representing an 'scrippsco2-c13-daily'

    """
    requires = [
        "sample-datetime",
        "sample-date-excel",
        "sample-date-fractional",
        "number-flask",
        "flag",
        "c13-value",
    ]
    args = [
        "c13-value",
        "flag",
        "number-flask",
        "sample-date-excel",
        "sample-date-fractional",
        "sample-datetime",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|scrippsco2-c13-daily"
    obj, isNew = MISPHelper._create_obj_cached(event, "scrippsco2-c13-daily", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_tattoo(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_tattoo - function for creating MISP tattoo object

    tattoo = Describes tattoos on a natural person's body

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        tattoo-body-part - Describe the body part where the tattoo is located.
        tattoo-color - Colors of the tattoo
        tattoo-description - Description of the tattoo,its composition.
        tattoo-picture - Picture of the tattoo
        tattoo-size - Size of the tattoo
        tattoo-style - Style of the tattoo

    Returns:
        a MISP object representing an 'tattoo'

    """
    requires = []
    args = [
        "tattoo-body-part",
        "tattoo-color",
        "tattoo-description",
        "tattoo-picture",
        "tattoo-size",
        "tattoo-style",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|tattoo"
    obj, isNew = MISPHelper._create_obj_cached(event, "tattoo", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_instant_message(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_instant_message - function for creating MISP instant-message object

    instant-message = Instant Message (IM) object template describing one or more IM message.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        app-used - The IM application used to send the message.
        archive - Archive of the original message (Internet Archive, Archive.is, etc).
        attachment - The message file or screen capture.
        body - Message body of the IM.
        from-name - Name of the person that sent the message.
        from-number - Phone number used to send the message.
        from-user - User account that sent the message.
        link - Original link into the message (Supposed harmless).
        received-date - Received date of the message.
        sent-date - Initial sent date of the message.
        subject - Subject of the message if any.
        to-name - Name of the person that received the message.
        to-number - Phone number receiving the message.
        to-user - User account that received the message.
        url - Original URL location of the message (potentially malicious).

    Must have one of the following: ['body', 'from-user', 'from-number', 'from-name']

    Returns:
        a MISP object representing an 'instant-message'

    """
    requires = ["body", "from-user", "from-number", "from-name"]
    args = [
        "app-used",
        "archive",
        "attachment",
        "body",
        "from-name",
        "from-number",
        "from-user",
        "link",
        "received-date",
        "sent-date",
        "subject",
        "to-name",
        "to-number",
        "to-user",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|instant-message"
    obj, isNew = MISPHelper._create_obj_cached(event, "instant-message", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ais(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ais - function for creating MISP ais object

    ais = Automatic Identification System (AIS) is an automatic tracking system that uses transceivers on ships.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        ETA - Estimated time of arrival at destination
        IMO-number - IMO ship identification number: a seven digit number that remains unchanged upon transfer of the ship's registration to another country
        MMSI - Vessel Maritime Maritime Mobile Service Identity (MMSI): a unique nine digit identification number.
        call-sign - International radio call-sign, up to 7 characters.
        course-over-ground - The course of the vessel, relative to true north to 0.1 degree
        destination - Destination of the vessel in max 20 characters
        dimension-a - Distance in meters from Forward Perpendicular (FP)
        dimension-b - Distance in meters from After Perpendicular (AP)
        dimension-c - Distance in meters inboard from port side
        dimension-d - Distance in meters inboard from starboard side
        draught - Draught of ship. 0.1-25.5 meters
        first-seen - When the location was seen for the first time.
        last-seen - When the location was seen for the last time.
        latitude - The latitude is the decimal value of the latitude in the World Geodetic System 84 (WGS84) reference.
        longitude - The longitude is the decimal value of the longitude in the World Geodetic System 84 (WGS84) reference
        name - 20 characters to represent the name of the vessel
        navigational-status - 1. at anchor, 2. under command, 3. Restricted Manoeuvrability, etc.
        rate-of-turn - right or left, from 0 to 720 degrees per minute
        speed-over-ground - 0.1 knot resolution from 0 to 102 knots
        true-heading - The true heading of the vessel. 0 to 359 degrees
        true-heading-at-own-position - The true heading at own position of the vessel. 0 to 359 degrees
        type-of-ship - Type of ship/cargo

    Must have one of the following: ['MMSI']

    Returns:
        a MISP object representing an 'ais'

    """
    requires = ["MMSI"]
    args = [
        "ETA",
        "IMO-number",
        "MMSI",
        "call-sign",
        "course-over-ground",
        "destination",
        "dimension-a",
        "dimension-b",
        "dimension-c",
        "dimension-d",
        "draught",
        "first-seen",
        "last-seen",
        "latitude",
        "longitude",
        "name",
        "navigational-status",
        "rate-of-turn",
        "speed-over-ground",
        "true-heading",
        "true-heading-at-own-position",
        "type-of-ship",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ais"
    obj, isNew = MISPHelper._create_obj_cached(event, "ais", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Representation(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Representation - function for creating MISP ftm-Representation object

    ftm-Representation = A mediatory, intermediary, middleman, or broker acting on behalf of a legal entity.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        role - Role
        sourceUrl - Source URL
        startDate - Start date
        status - Status
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Representation'

    """
    requires = []
    args = [
        "alephUrl",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "role",
        "sourceUrl",
        "startDate",
        "status",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Representation"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Representation", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_yara(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_yara - function for creating MISP yara object

    yara = An object describing a YARA rule (or a YARA rule name) along with its version.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - A description of the YARA rule.
        context - Context where the YARA rule can be applied
        reference - Reference or origin of the YARA rule.
        version - Version of the YARA rule depending where the yara rule is known to work as expected.
        yara - YARA rule.
        yara-rule-name - YARA rule name.

    Must have one of the following: ['yara', 'yara-rule-name']

    Returns:
        a MISP object representing an 'yara'

    """
    requires = ["yara", "yara-rule-name"]
    args = ["comment", "context", "reference", "version", "yara", "yara-rule-name"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|yara"
    obj, isNew = MISPHelper._create_obj_cached(event, "yara", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_timesketch_message(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_timesketch_message - function for creating MISP timesketch_message object

    timesketch_message = A timesketch message entry.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        datetime - datetime of the message
        message - message

    Returns:
        a MISP object representing an 'timesketch_message'

    """
    requires = []
    args = ["datetime", "message"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|timesketch_message"
    obj, isNew = MISPHelper._create_obj_cached(event, "timesketch_message", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_narrative(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_narrative - function for creating MISP narrative object

    narrative = Object describing a narrative.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        5Ds-of-propaganda - 5 D's of propaganda are tactics of rebuttal used to defend against criticism and adversarial narratives.
        archive - Archive of the original narrative source (Internet Archive, Archive.is, etc).
        attachment - Documents related to the narrative.
        external-references - Link to external references.
        link - Original link to the narrative source (Supposed harmless)
        narrative-disproof - Disproof or evidence against the narrative.
        narrative-summary - A summary of the narrative.
        objective - Objective of the narrative.
        url - Original link to the narrative source (Supposed malicious)

    Must have one of the following: ['attachment', 'archive', 'narrative-summary']

    Returns:
        a MISP object representing an 'narrative'

    """
    requires = ["attachment", "archive", "narrative-summary"]
    args = [
        "5Ds-of-propaganda",
        "archive",
        "attachment",
        "external-references",
        "link",
        "narrative-disproof",
        "narrative-summary",
        "objective",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|narrative"
    obj, isNew = MISPHelper._create_obj_cached(event, "narrative", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_open_data_security(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_open_data_security - function for creating MISP open-data-security object

    open-data-security = An object describing an open dataset available and described under the open data security model. ref. https://github.com/CIRCL/open-data-security

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - an exhaustive description of the dataset including methods of collection, extraction or analysis
        frequency - frequency of the dataset generation which MUST be expressed in yearly, monthly, daily, hourly
        human-validated - human-validated describes if the dataset has been manually validated
        license - license MUST be expressed in SPDX format to describe under which license the dataset is distributed
        link - link to open dataset
        machine-validated - machine-validated describes if the dataset has been automatically validated
        producer - producer MUST be expressed as an URI to reference the original producer of the dataset
        source - original source of the dataset
        subtitle - an extended title of the dataset
        time-precision - time-precision MUST be expressed in years, months, days, hours, minutes or seconds to describe the precision of the time expressed
        title - a comprehensive and concise title of the dataset

    Must have one of the following: ['link']

    Returns:
        a MISP object representing an 'open-data-security'

    """
    requires = ["link"]
    args = [
        "description",
        "frequency",
        "human-validated",
        "license",
        "link",
        "machine-validated",
        "producer",
        "source",
        "subtitle",
        "time-precision",
        "title",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|open-data-security"
    obj, isNew = MISPHelper._create_obj_cached(event, "open-data-security", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_personification(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_personification - function for creating MISP personification object

    personification = An object which describes a person or an identity

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        age-range - Age range that the person appears to be
        beard - Description of the characteristics of someones beard.
        birthmark - Position(s) of birthmarks.
        body-type - Body type of a person.
        color-of-eyes - Description of a person’s colour of eyes.
        hair-characteristics - Description of the characteristics of someones hairs.
        hair-color - Description of a person’s colour of hair.
        haircut - Description of the characteristics of someones hairs.
        height - Height of a person in cm.
        other-facial-features - Description of other facial features such as nose, cheeks, lips etc...
        portrait - Portrait of the person.
        shape-of-eyes - Description of a person’s eye shape.
        shoe-size - Shoe size of a person.
        skin-charateristics - Traits or features of a person's skin
        skin-complexion - Skin tone and complexion of a person. Type I: Extremely fair skin, always burns, never tans. Type II: Fair skin, always burns, sometimes tans.Dry: Medium skin, sometimes burns, always tans.Type IV: Olive skin, rarely burns, always tans. Type V: Moderately pigmented brown skin, never burns, always tans. Type VI: Markedly pigmented black skin, never burns, always tans.
        weight - Weight of a person in Kg.

    Must have one of the following: ['beard', 'portrait', 'body-type', 'hair-color', 'age-range']

    Returns:
        a MISP object representing an 'personification'

    """
    requires = ["beard", "portrait", "body-type", "hair-color", "age-range"]
    args = [
        "age-range",
        "beard",
        "birthmark",
        "body-type",
        "color-of-eyes",
        "hair-characteristics",
        "hair-color",
        "haircut",
        "height",
        "other-facial-features",
        "portrait",
        "shape-of-eyes",
        "shoe-size",
        "skin-charateristics",
        "skin-complexion",
        "weight",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|personification"
    obj, isNew = MISPHelper._create_obj_cached(event, "personification", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_probabilistic_data_structure(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_probabilistic_data_structure - function for creating MISP probabilistic-data-structure object

    probabilistic-data-structure = Probabilistic data structure object describe a space-efficient data structure such as Bloom filter or similar structure.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        link - Source of the probabilistic data structure.
        probability - The false positive rate of the probabilistic data structure.
        total-bits - The number of bits used by this probabilistic data structure.
        total-capacity - The total capacity of the total set represented in this probabilistic data structure.
        type - Type of the probabilistic data structure.
        updatable - Is the probabilistic data structure updatable?
        used-capacity - The used capacity (and cardinality) of the set represented in this probabilistic data structure.
        vendor-implementation-ref - Details about the implementation of the probabilistic data structure.

    Must have one of the following: ['type', 'used-capacity', 'total-capacity']

    Returns:
        a MISP object representing an 'probabilistic-data-structure'

    """
    requires = ["type", "used-capacity", "total-capacity"]
    args = [
        "link",
        "probability",
        "total-bits",
        "total-capacity",
        "type",
        "updatable",
        "used-capacity",
        "vendor-implementation-ref",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|probabilistic-data-structure"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "probabilistic-data-structure", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Associate(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Associate - function for creating MISP ftm-Associate object

    ftm-Associate = Non-family association between two people

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        relationship - Nature of the association
        retrievedAt - Retrieved on
        sourceUrl - Source URL
        startDate - Start date
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Associate'

    """
    requires = []
    args = [
        "alephUrl",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "relationship",
        "retrievedAt",
        "sourceUrl",
        "startDate",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Associate"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Associate", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Asset(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Asset - function for creating MISP ftm-Asset object

    ftm-Asset = A piece of property which can be owned and assigned a monetary value.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        country - Country
        currency - Currency
        description - Description
        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        modifiedAt - Modified on
        name - Name
        notes - Notes
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Asset'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "amount",
        "amountEur",
        "amountUsd",
        "country",
        "currency",
        "description",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "modifiedAt",
        "name",
        "notes",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Asset"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Asset", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_bgp_ranking(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_bgp_ranking - function for creating MISP bgp-ranking object

    bgp-ranking = BGP Ranking object describing the ranking of an ASN for a given day, along with its position, 1 being the most malicious ASN of the day, with the highest ranking. This object is meant to have a relationship with the corresponding ASN object and represents its ranking for a specific date.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address-family - The IP address family concerned by the ranking.
        date - Date fo the ranking.
        position - Position of the ASN for a given day.
        ranking - Ranking of the Autonomous System number.

    Returns:
        a MISP object representing an 'bgp-ranking'

    """
    requires = []
    args = ["address-family", "date", "position", "ranking"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|bgp-ranking"
    obj, isNew = MISPHelper._create_obj_cached(event, "bgp-ranking", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_favicon(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_favicon - function for creating MISP favicon object

    favicon = A favicon, also known as a shortcut icon, website icon, tab icon, URL icon, or bookmark icon, is a file containing one or more small icons, associated with a particular website or web page. The object template can include the murmur3 hash of the favicon to facilitate correlation.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        favicon - The raw favicon file.
        favicon-mmh3 - favicon-mmh3 is the murmur3 hash of a favicon as used in Shodan.
        link - The original link where the favicon was seen.

    Must have one of the following: ['favicon', 'favicon-mmh3', 'link']

    Returns:
        a MISP object representing an 'favicon'

    """
    requires = ["favicon", "favicon-mmh3", "link"]
    args = ["favicon", "favicon-mmh3", "link"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|favicon"
    obj, isNew = MISPHelper._create_obj_cached(event, "favicon", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Assessment(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Assessment - function for creating MISP ftm-Assessment object

    ftm-Assessment = Assessment with meta-data.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        assessmentId - Assessment ID
        country - Country
        description - Description
        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        modifiedAt - Modified on
        name - Name
        notes - Notes
        previousName - Previous name
        program - Program
        publishDate - Date of publishing
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Assessment'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "assessmentId",
        "country",
        "description",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "modifiedAt",
        "name",
        "notes",
        "previousName",
        "program",
        "publishDate",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Assessment"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Assessment", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_annotation(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_annotation - function for creating MISP annotation object

    annotation = An annotation object allowing analysts to add annotations, comments, executive summary to a MISP event, objects or attributes.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        attachment - An attachment to support the annotation
        creation-date - Initial creation of the annotation
        format - Format of the annotation
        modification-date - Last update of the annotation
        ref - Reference(s) to the annotation
        text - Raw text of the annotation
        type - Type of the annotation

    Must have one of the following: ['text']

    Returns:
        a MISP object representing an 'annotation'

    """
    requires = ["text"]
    args = [
        "attachment",
        "creation-date",
        "format",
        "modification-date",
        "ref",
        "text",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|annotation"
    obj, isNew = MISPHelper._create_obj_cached(event, "annotation", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_apivoid_email_verification(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_apivoid_email_verification - function for creating MISP apivoid-email-verification object

    apivoid-email-verification = Apivoid email verification API result. Reference: https://www.apivoid.com/api/email-verify/

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        china_free_email - True if email is a free China email, i.e 163.com.
        comment - Field for comments or correlating text
        dirty_words_domain - True if domain contains dirty/bad words.
        dirty_words_username - True if username contains dirty/bad words.
        disposable - True if email is disposable, i.e yopmail.com.
        dmarc_configured - True if domain has DMARC records configured.
        dmarc_enforced - True if domain is configured for DMARC and set to an enforcement policy.
        domain - Email domain.
        domain_popular - True if domain is a known popular domain.
        educational_domain - True if domain is an educational domain, i.e .edu
        email - The email address that was queried.
        free_email - True if email is a free email, i.e gmail.com.
        government_domain - True if domain is a government domain, i.e .gov
        has_a_records - True if domain has A records configured.
        has_mx_records - True if domain has MX records configured.
        has_spf_records - True if domain has SPF records configured.
        is_spoofable - True if domain does not have SPF records or if ~all is not configured.
        police_domain - True if domain is a police domain (such as *polizei*, *police*, etc).
        risky_tld - True if domain TLD is risky, i.e .top or .pro.
        role_address - True if email is a role address, i.e admin@website.com
        russian_free_email - True if email is a free Russian email, i.e mail.ru.
        score - A number between 0 (bad) and 100 (good).
        should_block - True if the score is bad (<= 70) and thus it should be blocked.
        suspicious_domain - True if domain is suspicious, i.e known spam or parked.
        suspicious_email - True if email is considered suspicious.
        suspicious_username - True if username is suspicious, i.e only numbers.
        username - Username part of the email address (email prefix)
        valid_format - True if email has a valid format.
        valid_tld - True if domain TLD is valid, i.e .com or .co.uk

    Must have one of the following: ['valid_format', 'username', 'role_address', 'suspicious_username', 'dirty_words_username', 'suspicious_email', 'domain', 'valid_tld', 'disposable', 'has_a_records', 'has_mx_records', 'has_spf_records', 'is_spoofable', 'dmarc_configured', 'dmarc_enforced', 'free_email', 'russian_free_email', 'china_free_email', 'suspicious_domain', 'dirty_words_domain', 'domain_popular', 'risky_tld', 'police_domain', 'government_domain', 'educational_domain', 'should_block', 'score']

    Returns:
        a MISP object representing an 'apivoid-email-verification'

    """
    requires = [
        "valid_format",
        "username",
        "role_address",
        "suspicious_username",
        "dirty_words_username",
        "suspicious_email",
        "domain",
        "valid_tld",
        "disposable",
        "has_a_records",
        "has_mx_records",
        "has_spf_records",
        "is_spoofable",
        "dmarc_configured",
        "dmarc_enforced",
        "free_email",
        "russian_free_email",
        "china_free_email",
        "suspicious_domain",
        "dirty_words_domain",
        "domain_popular",
        "risky_tld",
        "police_domain",
        "government_domain",
        "educational_domain",
        "should_block",
        "score",
    ]
    args = [
        "china_free_email",
        "comment",
        "dirty_words_domain",
        "dirty_words_username",
        "disposable",
        "dmarc_configured",
        "dmarc_enforced",
        "domain",
        "domain_popular",
        "educational_domain",
        "email",
        "free_email",
        "government_domain",
        "has_a_records",
        "has_mx_records",
        "has_spf_records",
        "is_spoofable",
        "police_domain",
        "risky_tld",
        "role_address",
        "russian_free_email",
        "score",
        "should_block",
        "suspicious_domain",
        "suspicious_email",
        "suspicious_username",
        "username",
        "valid_format",
        "valid_tld",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|apivoid-email-verification"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "apivoid-email-verification", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_covid19_dxy_live_city(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_covid19_dxy_live_city - function for creating MISP covid19-dxy-live-city object

    covid19-dxy-live-city = COVID 19 from dxy.cn - Aggregation by city

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        city - Name of the Chinese city, in Chinese.
        current-confirmed - Current number of confirmed cases
        total-confirmed - Total number of confirmed cases.
        total-cured - Total number of cured cases.
        total-death - Total number of deaths.
        update - Approximate time of the update (~hour)

    Returns:
        a MISP object representing an 'covid19-dxy-live-city'

    """
    requires = []
    args = [
        "city",
        "current-confirmed",
        "total-confirmed",
        "total-cured",
        "total-death",
        "update",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|covid19-dxy-live-city"
    obj, isNew = MISPHelper._create_obj_cached(event, "covid19-dxy-live-city", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_malware(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_malware - function for creating MISP malware object

    malware = Malware is a type of TTP that represents malicious code.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alias - Alternative name used to identify this malware or malware family.
        architecture_execution_env - The processor architecture that the malware instance or family is executable on.
        capability - Any of the capabilities identified for the malware instance or family.
        description - A description that provides more details and context about the malware instance or family, potentially including its purpose and its key characteristics.
        first_seen - The time that the malware instance or family was first seen.
        implementation_language - The programming language used to implement the malware instance or family.
        is_family - Defines whether the object represents a malware family or a malware instance.
        last_seen - The time that the malware family or malware instance was last seen.
        malware_type - A set of categorizations for the malware being described.
        name - A name used to identify the malware instance or family. For a malware family the name MUST be defined. If a name for a malware instance is not available, the SHA-256 hash value or sample's filename MAY be used instead.

    Returns:
        a MISP object representing an 'malware'

    """
    requires = []
    args = [
        "alias",
        "architecture_execution_env",
        "capability",
        "description",
        "first_seen",
        "implementation_language",
        "is_family",
        "last_seen",
        "malware_type",
        "name",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|malware"
    obj, isNew = MISPHelper._create_obj_cached(event, "malware", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_windows_service(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_windows_service - function for creating MISP windows-service object

    windows-service = Windows service and detailed about a service running a Windows operating system

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Additional comments.
        display - Display name/information of the service.
        group - Group to which the system/driver belong to.
        image-path - Path of the service/drive
        name - name of the service
        start - When the service/driver starts or executes.
        type - Service/driver type.

    Returns:
        a MISP object representing an 'windows-service'

    """
    requires = []
    args = ["comment", "display", "group", "image-path", "name", "start", "type"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|windows-service"
    obj, isNew = MISPHelper._create_obj_cached(event, "windows-service", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_facebook_group(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_facebook_group - function for creating MISP facebook-group object

    facebook-group = Public or private facebook group.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        administrator - A user account who is an owner or admin of the group.
        archive - Archive of the original group (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts, group members, etc.
        creator - The user account that created the group.
        description - A description of the group, channel or community.
        embedded-link - Link embedded in the group description (potentially malicious).
        embedded-safe-link - Link embedded in the group description (supposed safe).
        group-alias - Aliases or previous names of group.
        group-name - The name of the group, channel or community.
        group-type - Facebook group type, e.g. general, buy and sell etc.
        hashtag - Hashtag used to identify or promote the group.
        id - Unique identified of the group.
        link - Original link to the group (supposed harmless).
        privacy - Group privacy: public, closed, secret.
        url - Original URL location of the group (potentially malicious).

    Must have one of the following: ['group-name', 'description', 'archive', 'link']

    Returns:
        a MISP object representing an 'facebook-group'

    """
    requires = ["group-name", "description", "archive", "link"]
    args = [
        "administrator",
        "archive",
        "attachment",
        "creator",
        "description",
        "embedded-link",
        "embedded-safe-link",
        "group-alias",
        "group-name",
        "group-type",
        "hashtag",
        "id",
        "link",
        "privacy",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|facebook-group"
    obj, isNew = MISPHelper._create_obj_cached(event, "facebook-group", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_twitter_post(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_twitter_post - function for creating MISP twitter-post object

    twitter-post = Twitter post (tweet).

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original tweet (Internet Archive, Archive.is, etc).
        attachment - The tweet file or screen capture.
        created-at - Datetime of Tweet publication
        embedded-link - Link in the tweet
        embedded-safe-link - Safe link in the tweet
        favorite-count - Number of favorites.
        geo - Geolocation data.
        hashtag - Hashtag embedded in the tweet
        in-reply-to-display-name - The user display name of the tweet this post shares.
        in-reply-to-status-id - The twitter ID of the tweet that this post shares.
        in-reply-to-user-id - The user ID of the tweet this post shares.
        language - The language of the post.
        link - Original link to the post (supposed harmless).
        media - Media (Photos, videos) present in tweet
        name - Name of the account that posted this tweet.
        possibly-sensitive - Does this post contain sensitive content?
        possibly-sensitive-appealable - Is the sensitive content of this post appealable?
        post - Raw text of the post.
        post-id - Numeric id of the tweet.
        removal-date - When the tweet was removed.
        retweet-count - Number of retweets.
        source - Source of tweet (android, web etc).
        url - Original URL of the tweet, e.g. link shortener (potentially malicious).
        user-id - Id of the account that posted this tweet.
        username-quoted - Username who is quoted in the tweet.

    Must have one of the following: ['post', 'post-id', 'archive', 'url', 'link', 'attachment']

    Returns:
        a MISP object representing an 'twitter-post'

    """
    requires = ["post", "post-id", "archive", "url", "link", "attachment"]
    args = [
        "archive",
        "attachment",
        "created-at",
        "embedded-link",
        "embedded-safe-link",
        "favorite-count",
        "geo",
        "hashtag",
        "in-reply-to-display-name",
        "in-reply-to-status-id",
        "in-reply-to-user-id",
        "language",
        "link",
        "media",
        "name",
        "possibly-sensitive",
        "possibly-sensitive-appealable",
        "post",
        "post-id",
        "removal-date",
        "retweet-count",
        "source",
        "url",
        "user-id",
        "username-quoted",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|twitter-post"
    obj, isNew = MISPHelper._create_obj_cached(event, "twitter-post", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_phishing_kit(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_phishing_kit - function for creating MISP phishing-kit object

    phishing-kit = Object to describe a phishing-kit.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        date-found - Date when the phishing kit was found
        email-type - Type of the Email
        internal-reference - Internal reference such as ticket ID
        kit-mailer - Mailer Kit Used
        kit-name - Name of the Phishing Kit
        kit-url - URL of Phishing Kit
        online - If the phishing kit is online and operational, by default is yes
        phishing-domain - Domain used for Phishing
        reference-link - Link where the Phishing Kit was observed
        target - What was targeted using this phishing kit
        threat-actor - Identified threat actor
        threat-actor-email - Email of the Threat Actor

    Must have one of the following: ['kit-url', 'reference-link', 'kit-name']

    Returns:
        a MISP object representing an 'phishing-kit'

    """
    requires = ["kit-url", "reference-link", "kit-name"]
    args = [
        "date-found",
        "email-type",
        "internal-reference",
        "kit-mailer",
        "kit-name",
        "kit-url",
        "online",
        "phishing-domain",
        "reference-link",
        "target",
        "threat-actor",
        "threat-actor-email",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|phishing-kit"
    obj, isNew = MISPHelper._create_obj_cached(event, "phishing-kit", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_PublicBody(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_PublicBody - function for creating MISP ftm-PublicBody object

    ftm-PublicBody = A public body, such as a ministry, department or state company.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        bvdId - Bureau van Dijk ID
        classification - Classification
        country - Country
        description - Description
        dissolutionDate - The date the legal entity was dissolved, if applicable
        dunsCode - Dun & Bradstreet identifier
        email - Email address
        icijId - ID according to International Consortium for Investigative Journalists
        idNumber - ID number of any applicable ID
        incorporationDate - The date the legal entity was incorporated
        indexText - Index text
        indexUpdatedAt - Index updated at
        innCode - Russian company ID
        jurisdiction - Country or region in which this entity operates
        keywords - Keywords
        legalForm - Legal form
        mainCountry - Primary country of this entity
        modifiedAt - Modified on
        name - Name
        notes - Notes
        okpoCode - Russian industry classifier
        opencorporatesUrl - OpenCorporates URL
        phone - Phone number
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        registrationNumber - Company registration number
        retrievedAt - Retrieved on
        sector - Sector
        sourceUrl - Source link
        status - Status
        summary - Summary
        swiftBic - Bank identifier code
        taxNumber - Tax identification number
        taxStatus - Tax status
        topics - Topics
        vatCode - (EU) VAT number
        weakAlias - Weak alias
        website - Website address
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-PublicBody'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "bvdId",
        "classification",
        "country",
        "description",
        "dissolutionDate",
        "dunsCode",
        "email",
        "icijId",
        "idNumber",
        "incorporationDate",
        "indexText",
        "indexUpdatedAt",
        "innCode",
        "jurisdiction",
        "keywords",
        "legalForm",
        "mainCountry",
        "modifiedAt",
        "name",
        "notes",
        "okpoCode",
        "opencorporatesUrl",
        "phone",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "registrationNumber",
        "retrievedAt",
        "sector",
        "sourceUrl",
        "status",
        "summary",
        "swiftBic",
        "taxNumber",
        "taxStatus",
        "topics",
        "vatCode",
        "weakAlias",
        "website",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-PublicBody"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-PublicBody", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Directorship(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Directorship - function for creating MISP ftm-Directorship object

    ftm-Directorship = Directorship

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        role - Role
        secretary - Secretary
        sourceUrl - Source URL
        startDate - Start date
        status - Status
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Directorship'

    """
    requires = []
    args = [
        "alephUrl",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "role",
        "secretary",
        "sourceUrl",
        "startDate",
        "status",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Directorship"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Directorship", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_anonymisation(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_anonymisation - function for creating MISP anonymisation object

    anonymisation = Anonymisation object describing an anonymisation technique used to encode MISP attribute values. Reference: https://www.caida.org/tools/taxonomy/anonymization.xml

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Description of the anonymisation technique or tool used
        encryption-function - Encryption function or algorithm used to anonymise the attribute
        iv - Initialisation vector for the encryption function used to anonymise the attribute
        key - Key (such as a PSK in a keyed-hash-function) used to anonymise the attribute
        keyed-hash-function - Keyed-hash function used to anonymise the attribute
        level-of-knowledge - Level of knowledge of the organisation who created this object
        method - Anonymisation (or pseudo-anonymisation) method(s) used
        regexp - Regular expression to perfom the anonymisation (reversible or not)

    Must have one of the following: ['description', 'method', 'key', 'keyed-hash-function', 'encryption-function', 'regexp', 'iv']

    Returns:
        a MISP object representing an 'anonymisation'

    """
    requires = [
        "description",
        "method",
        "key",
        "keyed-hash-function",
        "encryption-function",
        "regexp",
        "iv",
    ]
    args = [
        "description",
        "encryption-function",
        "iv",
        "key",
        "keyed-hash-function",
        "level-of-knowledge",
        "method",
        "regexp",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|anonymisation"
    obj, isNew = MISPHelper._create_obj_cached(event, "anonymisation", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_EconomicActivity(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_EconomicActivity - function for creating MISP ftm-EconomicActivity object

    ftm-EconomicActivity = A foreign economic activity

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        ccdNumber - Customs Cargo Declaration Number
        ccdValue - Declaration Value
        customsAmount - Customs Value of goods
        customsProcedure - Customs Procedure — type of customs clearance
        date - Date
        departureCountry - Country out of which the goods are transported
        description - Description
        destinationCountry - Final destination for the goods
        directionOfTransportation - Direction of transportation (import/export)
        dollarExchRate - USD Exchange Rate for the activity
        endDate - End date
        goodsDescription - Description of goods
        indexText - Index text
        invoiceAmount - Invoice Value of goods
        modifiedAt - Modified on
        originCountry - Country of origin of goods
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        sourceUrl - Source URL
        startDate - Start date
        summary - Summary
        tradingCountry - Trading Country of the company which transports the goods via Russian border
        vedCode - (Код ТН ВЭД) Foreign Economic Activity Commodity Code
        vedCodeDescription - (Описание кода ТН ВЭД) Foreign Economic Activity Commodity Code description

    Returns:
        a MISP object representing an 'ftm-EconomicActivity'

    """
    requires = []
    args = [
        "alephUrl",
        "ccdNumber",
        "ccdValue",
        "customsAmount",
        "customsProcedure",
        "date",
        "departureCountry",
        "description",
        "destinationCountry",
        "directionOfTransportation",
        "dollarExchRate",
        "endDate",
        "goodsDescription",
        "indexText",
        "invoiceAmount",
        "modifiedAt",
        "originCountry",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "sourceUrl",
        "startDate",
        "summary",
        "tradingCountry",
        "vedCode",
        "vedCodeDescription",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-EconomicActivity"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-EconomicActivity", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_credit_card(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_credit_card - function for creating MISP credit-card object

    credit-card = A payment card like credit card, debit card or any similar cards which can be used for financial transactions.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        bank_name - Name of the bank which have issued the card
        card-security-code - Card security code (CSC, CVD, CVV, CVC and SPC) as embossed or printed on the card.
        cc-number - credit-card number as encoded on the card.
        comment - A description of the card.
        expiration - Maximum date of validity
        iin - International Issuer Number (First eight digits of the credit card number
        issued - Initial date of validity or issued date.
        name - Name of the card owner.
        version - Version of the card.

    Must have one of the following: ['cc-number']

    Returns:
        a MISP object representing an 'credit-card'

    """
    requires = ["cc-number"]
    args = [
        "bank_name",
        "card-security-code",
        "cc-number",
        "comment",
        "expiration",
        "iin",
        "issued",
        "name",
        "version",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|credit-card"
    obj, isNew = MISPHelper._create_obj_cached(event, "credit-card", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_PlainText(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_PlainText - function for creating MISP ftm-PlainText object

    ftm-PlainText = Plaintext

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        bodyText - Text
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-PlainText'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "bodyText",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-PlainText"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-PlainText", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_git_vuln_finder(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_git_vuln_finder - function for creating MISP git-vuln-finder object

    git-vuln-finder = Export from git-vuln-finder

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        author - Commit author
        author-email - Commit authors email
        authored_date - Date the commit was originally made
        branches - Branches the commit is on
        commit-id - Commit ID where the vulnerability is fixed.
        committed_date - Date the commit was modified last
        cve - CVE associated to the vulnerability
        language - Language of the commit (ISO 639-1 codes)
        message - Commit message
        origin - Origin of the repository
        origin-github-api - Full path to the commit on github
        pattern-matches - Pattern matching for the vulnerability
        pattern-selected - Pattern used to find the vulnerability
        state - State of the vulnerability
        stats.deletions - Number of deletions in the commit
        stats.files - Number of files changed in the commit
        stats.insertions - Number of insertions in the commit
        stats.lines - Number of line changes in the commit
        summary - Commit summary
        tags - User defined tags

    Returns:
        a MISP object representing an 'git-vuln-finder'

    """
    requires = []
    args = [
        "author",
        "author-email",
        "authored_date",
        "branches",
        "commit-id",
        "committed_date",
        "cve",
        "language",
        "message",
        "origin",
        "origin-github-api",
        "pattern-matches",
        "pattern-selected",
        "state",
        "stats.deletions",
        "stats.files",
        "stats.insertions",
        "stats.lines",
        "summary",
        "tags",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|git-vuln-finder"
    obj, isNew = MISPHelper._create_obj_cached(event, "git-vuln-finder", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_submarine(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_submarine - function for creating MISP submarine object

    submarine = Submarine description

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        active - The number of submarines of this class in active service
        armament - Armaments carried by the submarine
        beam - The beam measurement of the submarine in meters
        builders - The organisation building this class of submarines
        cancelled - The number of submarines of this class cancelled
        class - Submarine class
        complement - Crew size
        completed - The number of submarines of this class built
        displacement - Displacement in tonns
        draught - The draught measurement of the submarine in meters
        endurance - Expected submerged endurance in days
        in_service_from - The year the submarine entered service
        in_service_until - The year the submarine left service
        length - The length measurement of the submarine in meters
        operator - The countries operating such vessels (can be multiple)
        planned - The number of submarines of this class planned to be built
        predecessor - Predecessor class
        propulsion - The propulsion of the submarine, add multiple if applicabe
        retired - The number of submarines of this class that has been retired
        speed_submerged - Surfaced top speed in knots
        speed_surfaced - Surfaced top speed in knots
        successor - Successor class
        type - Submarine type

    Returns:
        a MISP object representing an 'submarine'

    """
    requires = []
    args = [
        "active",
        "armament",
        "beam",
        "builders",
        "cancelled",
        "class",
        "complement",
        "completed",
        "displacement",
        "draught",
        "endurance",
        "in_service_from",
        "in_service_until",
        "length",
        "operator",
        "planned",
        "predecessor",
        "propulsion",
        "retired",
        "speed_submerged",
        "speed_surfaced",
        "successor",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|submarine"
    obj, isNew = MISPHelper._create_obj_cached(event, "submarine", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_scan_result(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_scan_result - function for creating MISP scan-result object

    scan-result = Scan result object to add meta-data and the output of the scan result by itself.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Description of the scanning performed in this scan-result
        scan-end - End of scanning activity
        scan-result - The scan-result as a file (in machine-readable or human-readable format). The file is always consider non-malicious.
        scan-result-format - Format used for the scan-result.
        scan-result-query - Query or parameters provided to scan-result-tool to generate the scan-result.
        scan-result-tool - Tool used which generated the scan-result.
        scan-start - Start of scanning activity
        scan-type - Type of scanning in the scan-result.

    Must have one of the following: ['scan-result', 'scan-result-query']

    Returns:
        a MISP object representing an 'scan-result'

    """
    requires = ["scan-result", "scan-result-query"]
    args = [
        "description",
        "scan-end",
        "scan-result",
        "scan-result-format",
        "scan-result-query",
        "scan-result-tool",
        "scan-start",
        "scan-type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|scan-result"
    obj, isNew = MISPHelper._create_obj_cached(event, "scan-result", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_whois(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_whois - function for creating MISP whois object

    whois = Whois records information for a domain name or an IP address.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Comment of the whois entry
        creation-date - Initial creation of the whois entry
        domain - Domain of the whois entry
        expiration-date - Expiration of the whois entry
        ip-address - IP address of the whois entry
        modification-date - Last update of the whois entry
        nameserver - Nameserver
        registrant-email - Registrant email address
        registrant-name - Registrant name
        registrant-org - Registrant organisation
        registrant-phone - Registrant phone number
        registrar - Registrar of the whois entry
        text - Full whois entry

    Must have one of the following: ['registrant-email', 'registrant-phone', 'creation-date', 'registrant-name', 'registrar', 'text', 'domain', 'ip-address']

    Returns:
        a MISP object representing an 'whois'

    """
    requires = [
        "registrant-email",
        "registrant-phone",
        "creation-date",
        "registrant-name",
        "registrar",
        "text",
        "domain",
        "ip-address",
    ]
    args = [
        "comment",
        "creation-date",
        "domain",
        "expiration-date",
        "ip-address",
        "modification-date",
        "nameserver",
        "registrant-email",
        "registrant-name",
        "registrant-org",
        "registrant-phone",
        "registrar",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|whois"
    obj, isNew = MISPHelper._create_obj_cached(event, "whois", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_concordia_mtmf_intrusion_set(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_concordia_mtmf_intrusion_set - function for creating MISP concordia-mtmf-intrusion-set object

    concordia-mtmf-intrusion-set = Intrusion Set - Phase Description

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        AttackName - Name of the Attack
        CMTMF_ATCKID - Identifier of the Attack
        FeedbackLoop - Feedback Loop Sequence
        PhName - Name of the Phase (Tactic)
        PhSequence - Phase Sequence
        description - Description of the phase

    Returns:
        a MISP object representing an 'concordia-mtmf-intrusion-set'

    """
    requires = []
    args = [
        "AttackName",
        "CMTMF_ATCKID",
        "FeedbackLoop",
        "PhName",
        "PhSequence",
        "description",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|concordia-mtmf-intrusion-set"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "concordia-mtmf-intrusion-set", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ip_api_address(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ip_api_address - function for creating MISP ip-api-address object

    ip-api-address = IP Address information. Useful if you are pulling your ip information from ip-api.com

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        ISP - ISP.
        asn - Autonomous System Number
        city - City.
        country - Country name
        country-code - Country code
        first-seen - First time the ASN was seen
        ip-src - Source IP address of the network connection.
        last-seen - Last time the ASN was seen
        latitude - The latitude is the decimal value of the latitude in the World Geodetic System 84 (WGS84) reference.
        longitude - The longitude is the decimal value of the longitude in the World Geodetic System 84 (WGS84) reference
        organization - organization
        region - Region. example: California.
        region-code - Region code. example: CA
        state - State.
        zipcode - Zip Code.

    Must have one of the following: ['ip-src']

    Returns:
        a MISP object representing an 'ip-api-address'

    """
    requires = ["ip-src"]
    args = [
        "ISP",
        "asn",
        "city",
        "country",
        "country-code",
        "first-seen",
        "ip-src",
        "last-seen",
        "latitude",
        "longitude",
        "organization",
        "region",
        "region-code",
        "state",
        "zipcode",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ip-api-address"
    obj, isNew = MISPHelper._create_obj_cached(event, "ip-api-address", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_directory(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_directory - function for creating MISP directory object

    directory = Directory object describing a directory with meta-information

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        access-time - The last time the directory was accessed
        creation-time - Creation time of the directory
        modification-time - Modification time of the directory
        path - Path of the directory, complete or partial
        path-encoding - Encoding format of the directory

    Must have one of the following: ['path']

    Returns:
        a MISP object representing an 'directory'

    """
    requires = ["path"]
    args = [
        "access-time",
        "creation-time",
        "modification-time",
        "path",
        "path-encoding",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|directory"
    obj, isNew = MISPHelper._create_obj_cached(event, "directory", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_news_media(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_news_media - function for creating MISP news-media object

    news-media = News media are forms of mass media delivering news to the general public.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Postal address of the news source.
        alias - Alias of the news source.
        archive - Archive of the news (Internet Archive, Archive.is, etc).
        attachment - The news file, screen capture, audio, etc.
        content - Raw content of the news.
        e-mail - Email address of the news source.
        embedded-link - Site linked by the blog post.
        embedded-safe-link - Safe site linked by the blog post.
        fax-number - Fax number of the news source.
        link - Original link to news (Supposed harmless).
        phone-number - Phone number of the news source.
        source - Name of the news source.
        sub-type - Format of the news post (business daily, local news, metasite, etc).
        title - Title of the post.
        transcription - Transcribed audio/visual content.
        type - Type of news media (newspaper, TV, podcast, etc).
        url - Original URL location of news (potentially malicious).
        username - Username who posted the blog post.

    Must have one of the following: ['source', 'alias', 'archive', 'content', 'url', 'link', 'attachment']

    Returns:
        a MISP object representing an 'news-media'

    """
    requires = ["source", "alias", "archive", "content", "url", "link", "attachment"]
    args = [
        "address",
        "alias",
        "archive",
        "attachment",
        "content",
        "e-mail",
        "embedded-link",
        "embedded-safe-link",
        "fax-number",
        "link",
        "phone-number",
        "source",
        "sub-type",
        "title",
        "transcription",
        "type",
        "url",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|news-media"
    obj, isNew = MISPHelper._create_obj_cached(event, "news-media", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_software(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_software - function for creating MISP software object

    software = The Software object represents high-level properties associated with software, including software products. STIX 2.1 - 6.14

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        cpe - Specifies the Common Platform Enumeration (CPE) entry for the software, if available. The value for this property MUST be a CPE v2.3 entry from the official NVD CPE Dictionary [NVD] .  While the CPE dictionary does not contain entries for all software, whenever it does contain an identifier for a given instance of software, this property SHOULD be present.
        language - Specifies the languages supported by the software. The value of each list member MUST be a language code conformant to [RFC5646].
        name - Specifies the name of the software.
        swid - Specifies the Software Identification (SWID) Tags [SWID] entry for the software, if available. The tag attribute, tagId, a globally unique identifier, SHOULD be used as a proxy identifier of the tagged product.
        vendor - Specifies the name of the vendor of the software.
        version - Specifies the version of the software.

    Must have one of the following: ['name']

    Returns:
        a MISP object representing an 'software'

    """
    requires = ["name"]
    args = ["cpe", "language", "name", "swid", "vendor", "version"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|software"
    obj, isNew = MISPHelper._create_obj_cached(event, "software", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_threatgrid_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_threatgrid_report - function for creating MISP threatgrid-report object

    threatgrid-report = ThreatGrid report

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        analysis_submitted_at - Submission date
        heuristic_raw_score - heuristic_raw_score
        heuristic_score - heuristic_score
        id - ThreatGrid ID
        iocs - iocs
        original_filename - Original filename
        permalink - permalink
        threat_score - threat_score

    Returns:
        a MISP object representing an 'threatgrid-report'

    """
    requires = []
    args = [
        "analysis_submitted_at",
        "heuristic_raw_score",
        "heuristic_score",
        "id",
        "iocs",
        "original_filename",
        "permalink",
        "threat_score",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|threatgrid-report"
    obj, isNew = MISPHelper._create_obj_cached(event, "threatgrid-report", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_yabin(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_yabin - function for creating MISP yabin object

    yabin = yabin.py generates Yara rules from function prologs, for matching and hunting binaries. ref: https://github.com/AlienVault-OTX/yabin

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - A description of Yara rule generated.
        version - yabin.py and regex.txt version used for the generation of the yara rules.
        whitelist - Whitelist name used to generate the rules.
        yara - Yara rule generated from -y.
        yara-hunt - Wide yara rule generated from -yh.

    Must have one of the following: ['yara', 'yara-hunt']

    Returns:
        a MISP object representing an 'yabin'

    """
    requires = ["yara", "yara-hunt"]
    args = ["comment", "version", "whitelist", "yara", "yara-hunt"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|yabin"
    obj, isNew = MISPHelper._create_obj_cached(event, "yabin", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_scheduled_task(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_scheduled_task - function for creating MISP scheduled-task object

    scheduled-task = Windows scheduled task description

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        Start-time - Time when the task is triggered
        author - Who created the task
        description - Description of the task
        highest-privileges - Should the task run with the highest privileges
        location - Location (Path including filename) of the scheduled task on the computer
        name - Name of the scheduled task
        password-stored - Should the password be stored (Only if log on is not mandatory)
        repeat - condition to repeat the task
        run-when-user-logged-on-only - Should the task run if the user is logged on only
        running-account - User account used when running the task
        trigger - when should the task being triggered

    Must have one of the following: ['name', 'description', 'location']

    Returns:
        a MISP object representing an 'scheduled-task'

    """
    requires = ["name", "description", "location"]
    args = [
        "Start-time",
        "author",
        "description",
        "highest-privileges",
        "location",
        "name",
        "password-stored",
        "repeat",
        "run-when-user-logged-on-only",
        "running-account",
        "trigger",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|scheduled-task"
    obj, isNew = MISPHelper._create_obj_cached(event, "scheduled-task", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_script(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_script - function for creating MISP script object

    script = Object describing a computer program written to be run in a special run-time environment. The script or shell script can be used for malicious activities but also as support tools for threat analysts.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Comment associated to the script.
        filename - Filename used for the script.
        language - Scripting language used for the script.
        script - Free text of the script.
        script-as-attachment - Attachment of the script.
        state - Known state of the script.

    Must have one of the following: ['script', 'filename', 'script-as-attachment']

    Returns:
        a MISP object representing an 'script'

    """
    requires = ["script", "filename", "script-as-attachment"]
    args = [
        "comment",
        "filename",
        "language",
        "script",
        "script-as-attachment",
        "state",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|script"
    obj, isNew = MISPHelper._create_obj_cached(event, "script", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_url(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_url - function for creating MISP url object

    url = url object describes an url along with its normalized field (like extracted using faup parsing library) and its metadata.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        credential - Credential (username, password)
        domain - Full domain
        domain_without_tld - Domain without Top-Level Domain
        first-seen - First time this URL has been seen
        fragment - Fragment identifier is a short string of characters that refers to a resource that is subordinate to another, primary resource.
        host - Full hostname
        ip - Better type when the host is an IP.
        last-seen - Last time this URL has been seen
        port - Port number
        query_string - Query (after path, preceded by '?')
        resource_path - Path (between hostname:port and query)
        scheme - Scheme
        subdomain - Subdomain
        text - Description of the URL
        tld - Top-Level Domain
        url - Full URL

    Must have one of the following: ['url', 'resource_path']

    Returns:
        a MISP object representing an 'url'

    """
    requires = ["url", "resource_path"]
    args = [
        "credential",
        "domain",
        "domain_without_tld",
        "first-seen",
        "fragment",
        "host",
        "ip",
        "last-seen",
        "port",
        "query_string",
        "resource_path",
        "scheme",
        "subdomain",
        "text",
        "tld",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|url"
    obj, isNew = MISPHelper._create_obj_cached(event, "url", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_elf_section(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_elf_section - function for creating MISP elf-section object

    elf-section = Object describing a section of an Executable and Linkable Format

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        entropy - Entropy of the whole section
        flag - Flag of the section
        md5 - [Insecure] MD5 hash (128 bits)
        name - Name of the section
        sha1 - [Insecure] Secure Hash Algorithm 1 (160 bits)
        sha224 - Secure Hash Algorithm 2 (224 bits)
        sha256 - Secure Hash Algorithm 2 (256 bits)
        sha384 - Secure Hash Algorithm 2 (384 bits)
        sha512 - Secure Hash Algorithm 2 (512 bits)
        sha512/224 - Secure Hash Algorithm 2 (224 bits)
        sha512/256 - Secure Hash Algorithm 2 (256 bits)
        size-in-bytes - Size of the section, in bytes
        ssdeep - Fuzzy hash using context triggered piecewise hashes (CTPH)
        text - Free text value to attach to the section
        type - Type of the section

    Must have one of the following: ['text', 'name', 'md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'sha512/224', 'sha512/256']

    Returns:
        a MISP object representing an 'elf-section'

    """
    requires = [
        "text",
        "name",
        "md5",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha512/224",
        "sha512/256",
    ]
    args = [
        "entropy",
        "flag",
        "md5",
        "name",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha512/224",
        "sha512/256",
        "size-in-bytes",
        "ssdeep",
        "text",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|elf-section"
    obj, isNew = MISPHelper._create_obj_cached(event, "elf-section", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_image(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_image - function for creating MISP image object

    image = Object describing an image file.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the image (Internet Archive, Archive.is, etc).
        attachment - The image file.
        filename - The image filename.
        image-text - Raw text of image
        link - Original link into the image (Supposed harmless)
        url - Original URL location of the image (potentially malicious)
        username - Username who posted the image.

    Must have one of the following: ['attachment', 'archive', 'link']

    Returns:
        a MISP object representing an 'image'

    """
    requires = ["attachment", "archive", "link"]
    args = [
        "archive",
        "attachment",
        "filename",
        "image-text",
        "link",
        "url",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|image"
    obj, isNew = MISPHelper._create_obj_cached(event, "image", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_attack_step(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_attack_step - function for creating MISP attack-step object

    attack-step = An object defining a singular attack-step. Especially useful for red/purple teaming, but can also be used for actual attacks.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        command-line - Command line used to execute attack step, if any.
        description - Description of the attack step
        detections - Detections by the victim's monitoring capabilities.
        dst-domain - Domain destination of the attack step, if any.
        dst-ip - IP destination of the attack step, if any.
        dst-misc - Other type of source of the attack step, if any. This can be e.g. localhost.
        expected-response - Response or detection expected (in case of purple teaming)
        key-step - Was this attack step object a key step within the context of the incident/event?
        source-domain - Domain source of the attack step, if any.
        source-ip - IP source of the attack step, if any.
        source-misc - Other type of source of the attack step, if any. This can be e.g. rotating ip from cloud providers such as AWS, or localhost.
        succesful - Was this attack step succesful?

    Must have one of the following: ['description']

    Returns:
        a MISP object representing an 'attack-step'

    """
    requires = ["description"]
    args = [
        "command-line",
        "description",
        "detections",
        "dst-domain",
        "dst-ip",
        "dst-misc",
        "expected-response",
        "key-step",
        "source-domain",
        "source-ip",
        "source-misc",
        "succesful",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|attack-step"
    obj, isNew = MISPHelper._create_obj_cached(event, "attack-step", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_sigmf_archive(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_sigmf_archive - function for creating MISP sigmf-archive object

    sigmf-archive = An object representing an archive containing one or multiple recordings in the Signal Metadata Format Specification (SigMF)

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        SigMF-archive - tar archive (.sigmf)

    Returns:
        a MISP object representing an 'sigmf-archive'

    """
    requires = []
    args = ["SigMF-archive"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|sigmf-archive"
    obj, isNew = MISPHelper._create_obj_cached(event, "sigmf-archive", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_shodan_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_shodan_report - function for creating MISP shodan-report object

    shodan-report = Shodan Report for a given IP

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        banner - server banner reported
        hostname - Hostnames found
        ip - IP Address Queried
        org - Associated Organization
        port - Listening Port
        text - A description of the report

    Must have one of the following: ['hostname', 'org', 'port', 'banner']

    Returns:
        a MISP object representing an 'shodan-report'

    """
    requires = ["hostname", "org", "port", "banner"]
    args = ["banner", "hostname", "ip", "org", "port", "text"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|shodan-report"
    obj, isNew = MISPHelper._create_obj_cached(event, "shodan-report", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_tor_hiddenservice(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_tor_hiddenservice - function for creating MISP tor-hiddenservice object

    tor-hiddenservice = Tor hidden service (onion service) object.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - onion address of the Tor node seen.
        description - Tor onion service comment.
        first-seen - When the Tor hidden service was been seen for the first time.
        last-seen - When the Tor hidden service was seen for the last time.

    Must have one of the following: ['address', 'first-seen', 'last-seen', 'description']

    Returns:
        a MISP object representing an 'tor-hiddenservice'

    """
    requires = ["address", "first-seen", "last-seen", "description"]
    args = ["address", "description", "first-seen", "last-seen"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|tor-hiddenservice"
    obj, isNew = MISPHelper._create_obj_cached(event, "tor-hiddenservice", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_reddit_post(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_reddit_post - function for creating MISP reddit-post object

    reddit-post = A Reddit post.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original Reddit post (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported file from the Reddit post.
        author - The user account that created the post (do not include u/).
        description - A description of the post.
        edited - Has the post been edited?
        embedded-link - Link embedded in the subreddit description (potentially malicious).
        embedded-safe-link - Link embedded in the subreddit description (supposed safe).
        hashtag - Hashtag used to identify or promote the Reddit post.
        link - Original link to the Reddit post (supposed harmless).
        post-content - The raw text of the Reddit post.
        post-title - The title of the Reddit post.
        subreddit-name - The name of the subreddit where it was posted (exclude the r/).
        thumbnail - Screen capture or exported post thumbnail.
        thumbnail-url - Link to post thumbnail.
        url - Original URL location of the Reddit post (potentially malicious).
        username-quoted - Username who are quoted in the Reddit post (do not include u/).

    Must have one of the following: ['post-title', 'post-content', 'archive', 'link']

    Returns:
        a MISP object representing an 'reddit-post'

    """
    requires = ["post-title", "post-content", "archive", "link"]
    args = [
        "archive",
        "attachment",
        "author",
        "description",
        "edited",
        "embedded-link",
        "embedded-safe-link",
        "hashtag",
        "link",
        "post-content",
        "post-title",
        "subreddit-name",
        "thumbnail",
        "thumbnail-url",
        "url",
        "username-quoted",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|reddit-post"
    obj, isNew = MISPHelper._create_obj_cached(event, "reddit-post", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_blog(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_blog - function for creating MISP blog object

    blog = Blog post like Medium or WordPress.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original document (Internet Archive, Archive.is, etc).
        creation-date - Initial creation of the blog post.
        embedded-link - Site linked by the blog post.
        embedded-safe-link - Safe site linked by the blog post.
        link - Original link into the blog post (Supposed harmless).
        modification-date - Last update of the blog post.
        post - Raw post.
        removal-date - When the blog post was removed.
        title - Title of blog post.
        type - Type of blog post.
        url - Original URL location of the blog post (potentially malicious).
        username - Username who posted the blog post.
        username-quoted - Username who are quoted into the blog post.
        verified-username - Is the username account verified by the operator of the blog platform.

    Must have one of the following: ['post', 'archive', 'url', 'link']

    Returns:
        a MISP object representing an 'blog'

    """
    requires = ["post", "archive", "url", "link"]
    args = [
        "archive",
        "creation-date",
        "embedded-link",
        "embedded-safe-link",
        "link",
        "modification-date",
        "post",
        "removal-date",
        "title",
        "type",
        "url",
        "username",
        "username-quoted",
        "verified-username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|blog"
    obj, isNew = MISPHelper._create_obj_cached(event, "blog", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_software_hive_applications_installed(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_software_hive_applications_installed - function for creating MISP regripper-software-hive-applications-installed object

    regripper-software-hive-applications-installed = Regripper Object template designed to gather information of the applications installed on the system.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        app-last-write-time - Date and time when the application key was last updated.
        app-name - Name of the application.
        comments - Additional comments.
        key - Software hive key where the information is retrieved from.
        key-path - Path of the key.
        last-write-time - Date and time when the key was last updated.
        references - References to the application installed.
        version - Version of the application.

    Returns:
        a MISP object representing an 'regripper-software-hive-applications-installed'

    """
    requires = []
    args = [
        "app-last-write-time",
        "app-name",
        "comments",
        "key",
        "key-path",
        "last-write-time",
        "references",
        "version",
    ]

    validate_args(requires, kwargs)
    uniq_str = (
        generate_uniq(requires, kwargs)
        + "|regripper-software-hive-applications-installed"
    )
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-software-hive-applications-installed", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ilr_impact(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ilr_impact - function for creating MISP ilr-impact object

    ilr-impact = Institut Luxembourgeois de Regulation - Impact

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        duree - Duree de l'incident en hh : mm
        nombre-utilisateurs-touches - Nombre d’utilisateurs touches par l'incident
        pourcentage-utilisateurs-touches - Pourcentage d'utilisateurs du service touches par l'incident
        service - Service impacte par l'incident

    Returns:
        a MISP object representing an 'ilr-impact'

    """
    requires = []
    args = [
        "duree",
        "nombre-utilisateurs-touches",
        "pourcentage-utilisateurs-touches",
        "service",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ilr-impact"
    obj, isNew = MISPHelper._create_obj_cached(event, "ilr-impact", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Succession(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Succession - function for creating MISP ftm-Succession object

    ftm-Succession = Two entities that legally succeed each other.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        role - Role
        sourceUrl - Source URL
        startDate - Start date
        status - Status
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Succession'

    """
    requires = []
    args = [
        "alephUrl",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "role",
        "sourceUrl",
        "startDate",
        "status",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Succession"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Succession", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_intrusion_set(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_intrusion_set - function for creating MISP intrusion-set object

    intrusion-set = A object template describing an Intrusion Set as defined in STIX 2.1. An Intrusion Set is a grouped set of adversarial behaviors and resources with common properties that is believed to be orchestrated by a single organization. An Intrusion Set may capture multiple Campaigns or other activities that are all tied together by shared attributes indicating a commonly known or unknown Threat Actor. New activity can be attributed to an Intrusion Set even if the Threat Actors behind the attack are not known. Threat Actors can move from supporting one Intrusion Set to supporting another, or they may support multiple Intrusion Sets.  Where a Campaign is a set of attacks over a period of time against a specific set of targets to achieve some objective, an Intrusion Set is the entire attack package and may be used over a very long period of time in multiple Campaigns to achieve potentially multiple purposes.  While sometimes an Intrusion Set is not active, or changes focus, it is usually difficult to know if it has truly disappeared or ended. Analysts may have varying level of fidelity on attributing an Intrusion Set back to Threat Actors and may be able to only attribute it back to a nation state or perhaps back to an organization within that nation state.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        aliases - Alternative names used to identify this Intrusion Set.
        description - A description that provides more details and context about the Intrusion Set, potentially including its purpose and its key characteristics.
        goals - The high-level goals of this Intrusion Set, namely, what are they trying to do. For example, they may be motivated by personal gain, but their goal is to steal credit card numbers. To do this, they may execute specific Campaigns that have detailed objectives like compromising point of sale systems at a large retailer.  Another example: to gain information about latest merger and IPO information from ACME Bank.
        name - A name used to identify this Intrusion Set.
        primary-motivation - The primary reason, motivation, or purpose behind this Intrusion Set. The motivation is why the Intrusion Set wishes to achieve the goal (what they are trying to achieve).  For example, an Intrusion Set with a goal to disrupt the finance sector in a country might be motivated by ideological hatred of capitalism.
        resource_level - This property specifies the organizational level at which this Intrusion Set typically works, which in turn determines the resources available to this Intrusion Set for use in an attack.
        secondary-motivation - The secondary reasons, motivations, or purposes behind this Intrusion Set. These motivations can exist as an equal or near-equal cause to the primary motivation. However, it does not replace or necessarily magnify the primary motivation, but it might indicate additional context. The position in the list has no significance.

    Must have one of the following: ['description', 'name']

    Returns:
        a MISP object representing an 'intrusion-set'

    """
    requires = ["description", "name"]
    args = [
        "aliases",
        "description",
        "goals",
        "name",
        "primary-motivation",
        "resource_level",
        "secondary-motivation",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|intrusion-set"
    obj, isNew = MISPHelper._create_obj_cached(event, "intrusion-set", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_jarm(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_jarm - function for creating MISP jarm object

    jarm = Jarm object to describe an TLS/SSL implementation used for malicious or legitimate use-case.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        jarm - JARM Hash of this implementation
        reference - Reference to the tool matching this fingerprint
        scope - Scope of the tool
        tls-implementation - SSL/TLS implementation matching this object
        tool - Tool having this jarm fingerprint

    Must have one of the following: ['jarm']

    Returns:
        a MISP object representing an 'jarm'

    """
    requires = ["jarm"]
    args = ["jarm", "reference", "scope", "tls-implementation", "tool"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|jarm"
    obj, isNew = MISPHelper._create_obj_cached(event, "jarm", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cap_resource(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cap_resource - function for creating MISP cap-resource object

    cap-resource = Common Alerting Protocol Version (CAP) resource object

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        derefUri - The base-64 encoded data content of the resource file.
        digest - The code representing the digital digest (“hash”) computed from the resource file (OPTIONAL).
        mimeType - The identifier of the MIME content type and sub-type describing the resource file.
        resourceDesc - The text describing the type and content of the resource file.
        size - The integer indicating the size of the resource file.
        uri - The identifier of the hyperlink for the resource file.

    Must have one of the following: ['resourceDesc']

    Returns:
        a MISP object representing an 'cap-resource'

    """
    requires = ["resourceDesc"]
    args = ["derefUri", "digest", "mimeType", "resourceDesc", "size", "uri"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cap-resource"
    obj, isNew = MISPHelper._create_obj_cached(event, "cap-resource", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_command_line(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_command_line - function for creating MISP command-line object

    command-line = Command line and options related to a specific command executed by a program, whether it is malicious or not.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - description of the command
        value - command code

    Returns:
        a MISP object representing an 'command-line'

    """
    requires = []
    args = ["description", "value"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|command-line"
    obj, isNew = MISPHelper._create_obj_cached(event, "command-line", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_sigma(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_sigma - function for creating MISP sigma object

    sigma = An object describing a Sigma rule (or a Sigma rule name).

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - A description of the Sigma rule.
        context - Context where the Sigma rule can be applied
        reference - Reference/origin of the Sigma rule.
        sigma - Sigma rule.
        sigma-rule-name - Sigma rule name.

    Must have one of the following: ['sigma', 'sigma-rule-name']

    Returns:
        a MISP object representing an 'sigma'

    """
    requires = ["sigma", "sigma-rule-name"]
    args = ["comment", "context", "reference", "sigma", "sigma-rule-name"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|sigma"
    obj, isNew = MISPHelper._create_obj_cached(event, "sigma", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cytomic_orion_file(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cytomic_orion_file - function for creating MISP cytomic-orion-file object

    cytomic-orion-file = Cytomic Orion File Detection

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        classification - File classification - number
        classificationName - File classification
        fileName - Original filename
        fileSize - Size of the file
        first-seen - First seen timestamp of the file
        last-seen - Last seen timestamp of the file

    Returns:
        a MISP object representing an 'cytomic-orion-file'

    """
    requires = []
    args = [
        "classification",
        "classificationName",
        "fileName",
        "fileSize",
        "first-seen",
        "last-seen",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cytomic-orion-file"
    obj, isNew = MISPHelper._create_obj_cached(event, "cytomic-orion-file", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_short_message_service(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_short_message_service - function for creating MISP short-message-service object

    short-message-service = Short Message Service (SMS) object template describing one or more SMS message. Restriction of the initial format 3GPP 23.038 GSM character set doesn't apply.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        body - Message body of the SMS
        from - Phone number used to send the SMS
        name - Sender name
        phone-company - Phone company of the number used to send the SMS
        received-date - Received date of the SMS
        sent-date - Initial sent date of the SMS
        smsc - SMS Message Center
        to - Phone number receiving the SMS
        url-rfc5724 - url representing SMS using RFC 5724 (not url contained in the SMS which should use an url object)

    Must have one of the following: ['body', 'from']

    Returns:
        a MISP object representing an 'short-message-service'

    """
    requires = ["body", "from"]
    args = [
        "body",
        "from",
        "name",
        "phone-company",
        "received-date",
        "sent-date",
        "smsc",
        "to",
        "url-rfc5724",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|short-message-service"
    obj, isNew = MISPHelper._create_obj_cached(event, "short-message-service", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Vehicle(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Vehicle - function for creating MISP ftm-Vehicle object

    ftm-Vehicle = Vehicle

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        buildDate - Build Date
        country - Country
        currency - Currency
        description - Description
        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        model - Model
        modifiedAt - Modified on
        name - Name
        notes - Notes
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        registrationDate - Registration Date
        registrationNumber - Registration Number
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        topics - Topics
        type - Type
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Vehicle'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "amount",
        "amountEur",
        "amountUsd",
        "buildDate",
        "country",
        "currency",
        "description",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "model",
        "modifiedAt",
        "name",
        "notes",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "registrationDate",
        "registrationNumber",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "topics",
        "type",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Vehicle"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Vehicle", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_x509(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_x509 - function for creating MISP x509 object

    x509 = x509 object describing a X.509 certificate

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        dns_names - Subject Alternative Name - DNS names
        email - Subject Alternative Name - emails
        ip - Subject Alternative Name - IP
        is_ca - CA certificate
        issuer - Issuer of the certificate
        pem - Raw certificate in PEM formati (Unix-like newlines)
        pubkey-info-algorithm - Algorithm of the public key
        pubkey-info-exponent - Exponent of the public key - in decimal
        pubkey-info-modulus - Modulus of the public key - in Hexadecimal - no 0x, no :
        pubkey-info-size - Length of the public key (in bits expressed in decimal: eg. 256 bits)
        raw-base64 - Raw certificate base64 encoded (DER format)
        rid - Subject Alternative Name - RID
        self_signed - Self-signed certificate
        serial-number - Serial number of the certificate
        signature_algorithm - Signature algorithm
        subject - Subject of the certificate
        text - Free text description of the certificate
        uri - Subject Alternative Name - URI
        validity-not-after - Certificate invalid after that date
        validity-not-before - Certificate invalid before that date
        version - Version of the certificate
        x509-fingerprint-md5 - [Insecure] MD5 hash (128 bits)
        x509-fingerprint-sha1 - [Insecure] Secure Hash Algorithm 1 (160 bits)
        x509-fingerprint-sha256 - Secure Hash Algorithm 2 (256 bits)

    Must have one of the following: ['x509-fingerprint-md5', 'x509-fingerprint-sha1', 'x509-fingerprint-sha256', 'serial-number', 'issuer']

    Returns:
        a MISP object representing an 'x509'

    """
    requires = [
        "x509-fingerprint-md5",
        "x509-fingerprint-sha1",
        "x509-fingerprint-sha256",
        "serial-number",
        "issuer",
    ]
    args = [
        "dns_names",
        "email",
        "ip",
        "is_ca",
        "issuer",
        "pem",
        "pubkey-info-algorithm",
        "pubkey-info-exponent",
        "pubkey-info-modulus",
        "pubkey-info-size",
        "raw-base64",
        "rid",
        "self_signed",
        "serial-number",
        "signature_algorithm",
        "subject",
        "text",
        "uri",
        "validity-not-after",
        "validity-not-before",
        "version",
        "x509-fingerprint-md5",
        "x509-fingerprint-sha1",
        "x509-fingerprint-sha256",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|x509"
    obj, isNew = MISPHelper._create_obj_cached(event, "x509", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_exploit_poc(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_exploit_poc - function for creating MISP exploit-poc object

    exploit-poc = Exploit-poc object describing a proof of concept or exploit of a vulnerability. This object has often a relationship with a vulnerability object.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        author - Author of the exploit - proof of concept
        description - Description of the exploit - proof of concept
        poc - Proof of Concept or exploit (as a script, binary or described process)
        references - External references
        vulnerable_configuration - The vulnerable configuration described in CPE format where the exploit/proof of concept is valid

    Must have one of the following: ['vulnerable_configuration', 'description', 'poc']

    Returns:
        a MISP object representing an 'exploit-poc'

    """
    requires = ["vulnerable_configuration", "description", "poc"]
    args = ["author", "description", "poc", "references", "vulnerable_configuration"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|exploit-poc"
    obj, isNew = MISPHelper._create_obj_cached(event, "exploit-poc", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_software_hive_command_shell(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_software_hive_command_shell - function for creating MISP regripper-software-hive-command-shell object

    regripper-software-hive-command-shell = Regripper Object template designed to gather information of the shell commands executed on the system.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        command - Command executed.
        comments - Additional comments.
        key - Software hive key where the information is retrieved from.
        last-write-time - Date and time when the key was last updated.
        shell - Type of shell used to execute the command.
        shell-path - Path of the shell.

    Returns:
        a MISP object representing an 'regripper-software-hive-command-shell'

    """
    requires = []
    args = ["command", "comments", "key", "last-write-time", "shell", "shell-path"]

    validate_args(requires, kwargs)
    uniq_str = (
        generate_uniq(requires, kwargs) + "|regripper-software-hive-command-shell"
    )
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-software-hive-command-shell", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_malware_config(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_malware_config - function for creating MISP malware-config object

    malware-config = Malware configuration recovered or extracted from a malicious binary.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        config - Raw (decrypted, decoded) text of the malware configuration.
        description - Description of the malware configuration
        encrypted - Encrypted or encoded text of the malware configuration in base64.
        file-config - File configuration as an attachment
        first-seen - When the malware configuration has been seen for the first time.
        format - Original format of the malware configuration.
        last-seen - When the malware configuration has been seen for the last time.
        password - Password or encryption key used to encrypt the malware configuration.

    Must have one of the following: ['config', 'file-config']

    Returns:
        a MISP object representing an 'malware-config'

    """
    requires = ["config", "file-config"]
    args = [
        "config",
        "description",
        "encrypted",
        "file-config",
        "first-seen",
        "format",
        "last-seen",
        "password",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|malware-config"
    obj, isNew = MISPHelper._create_obj_cached(event, "malware-config", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_NTUser(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_regripper_NTUser - function for creating MISP regripper-NTUser object

    regripper-NTUser = Regripper Object template designed to present user specific configuration details extracted from the NTUSER.dat hive.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        applications-installed - List of applications installed.
        applications-run - List of applications set to run on the system.
        comments - Additional information related to the user profile
        external-devices - List of external devices connected to the system by the user.
        key - Registry key where the information is retrieved from.
        key-last-write-time - Date and time when the key was last updated.
        logon-user-name - Name assigned to the user profile.
        mount-points - Details of the mount points created on the system.
        network-connected-to - List of networks the user connected the system to.
        nukeOnDelete - Determines if the Recycle bin option has been disabled.
        recent-files-accessed - List of recent files accessed by the user.
        recent-folders-accessed - List of recent folders accessed by the user.
        typed-urls - Urls typed by the user in internet explorer
        user-init - Applications or processes set to run when the user logs onto the windows system.

    Must have one of the following: ['logon-user-name']

    Returns:
        a MISP object representing an 'regripper-NTUser'

    """
    requires = ["logon-user-name"]
    args = [
        "applications-installed",
        "applications-run",
        "comments",
        "external-devices",
        "key",
        "key-last-write-time",
        "logon-user-name",
        "mount-points",
        "network-connected-to",
        "nukeOnDelete",
        "recent-files-accessed",
        "recent-folders-accessed",
        "typed-urls",
        "user-init",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|regripper-NTUser"
    obj, isNew = MISPHelper._create_obj_cached(event, "regripper-NTUser", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_error_message(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_error_message - function for creating MISP error-message object

    error-message = An error message which can be related to the processing of data such as import, export scripts from the original MISP instance.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        message - Content of the error message.
        source - Source of the error message.

    Must have one of the following: ['source', 'message']

    Returns:
        a MISP object representing an 'error-message'

    """
    requires = ["source", "message"]
    args = ["message", "source"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|error-message"
    obj, isNew = MISPHelper._create_obj_cached(event, "error-message", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_mactime_timeline_analysis(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_mactime_timeline_analysis - function for creating MISP mactime-timeline-analysis object

    mactime-timeline-analysis = Mactime template, used in forensic investigations to describe the timeline of a file activity

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        activityType - Determines the type of activity conducted on the file at a given time
        datetime - Date and time when the operation was conducted on the file
        file - Mactime output file
        file-path - Location of the file on the disc
        filePermissions - Describes permissions assigned the file
        file_size - Determines the file size in bytes

    Must have one of the following: ['file-path', 'activityType', 'datetime']

    Returns:
        a MISP object representing an 'mactime-timeline-analysis'

    """
    requires = ["file-path", "activityType", "datetime"]
    args = [
        "activityType",
        "datetime",
        "file",
        "file-path",
        "filePermissions",
        "file_size",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|mactime-timeline-analysis"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "mactime-timeline-analysis", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_bgp_hijack(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_bgp_hijack - function for creating MISP bgp-hijack object

    bgp-hijack = Object encapsulating BGP Hijack description as specified, for example, by bgpstream.com

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        country - Country code of the main location of the attacking autonomous system
        description - BGP Hijack details
        detected-asn - Detected Autonomous System Number
        end - Last time the Prefix hijack was seen
        expected-asn - Expected Autonomous System Number
        start - First time the Prefix hijack was seen
        subnet-announced - Subnet announced

    Returns:
        a MISP object representing an 'bgp-hijack'

    """
    requires = []
    args = [
        "country",
        "description",
        "detected-asn",
        "end",
        "expected-asn",
        "start",
        "subnet-announced",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|bgp-hijack"
    obj, isNew = MISPHelper._create_obj_cached(event, "bgp-hijack", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_r2graphity(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_r2graphity - function for creating MISP r2graphity object

    r2graphity = Indicators extracted from files using radare2 and graphml

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        callback-average - Average size of a callback
        callback-largest - Largest callback
        callbacks - Amount of callbacks (functions started as thread)
        create-thread - Amount of calls to CreateThread
        dangling-strings - Amount of dangling strings (string with a code cross reference, that is not within a function. Radare2 failed to detect that function.)
        get-proc-address - Amount of calls to GetProcAddress
        gml - Graph export in G>raph Modelling Language format
        local-references - Amount of API calls inside a code section
        memory-allocations - Amount of memory allocations
        miss-api - Amount of API call reference that does not resolve to a function offset
        not-referenced-strings - Amount of not referenced strings
        r2-commit-version - Radare2 commit ID used to generate this object
        ratio-api - Ratio: amount of API calls per kilobyte of code section
        ratio-functions - Ratio: amount of functions per kilobyte of code section
        ratio-string - Ratio: amount of referenced strings per kilobyte of code section
        referenced-strings - Amount of referenced strings
        refsglobalvar - Amount of API calls outside of code section (glob var, dynamic API)
        shortest-path-to-create-thread - Shortest path to the first time the binary calls CreateThread
        text - Description of the r2graphity object
        total-api - Total amount of API calls
        total-functions - Total amount of functions in the file.
        unknown-references - Amount of API calls not ending in a function (Radare2 bug, probalby)

    Must have one of the following: ['r2-commit-version']

    Returns:
        a MISP object representing an 'r2graphity'

    """
    requires = ["r2-commit-version"]
    args = [
        "callback-average",
        "callback-largest",
        "callbacks",
        "create-thread",
        "dangling-strings",
        "get-proc-address",
        "gml",
        "local-references",
        "memory-allocations",
        "miss-api",
        "not-referenced-strings",
        "r2-commit-version",
        "ratio-api",
        "ratio-functions",
        "ratio-string",
        "referenced-strings",
        "refsglobalvar",
        "shortest-path-to-create-thread",
        "text",
        "total-api",
        "total-functions",
        "unknown-references",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|r2graphity"
    obj, isNew = MISPHelper._create_obj_cached(event, "r2graphity", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_tsk_web_search_query(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_tsk_web_search_query - function for creating MISP tsk-web-search-query object

    tsk-web-search-query = An Object Template to share web search query information

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        additional-comments - Comments.
        browser - Browser used.
        datetime-searched - date and time when the search was conducted.
        domain - The domain of the search engine.
        text - the search word or sentence.
        username - User name or ID associated with the search.

    Returns:
        a MISP object representing an 'tsk-web-search-query'

    """
    requires = []
    args = [
        "additional-comments",
        "browser",
        "datetime-searched",
        "domain",
        "text",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|tsk-web-search-query"
    obj, isNew = MISPHelper._create_obj_cached(event, "tsk-web-search-query", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ail_leak(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ail_leak - function for creating MISP ail-leak object

    ail-leak = An information leak as defined by the AIL Analysis Information Leak framework.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        duplicate - Duplicate of the existing leaks.
        duplicate_number - Number of known duplicates.
        first-seen - When the leak has been accessible or seen for the first time.
        last-seen - When the leak has been accessible or seen for the last time.
        origin - The link where the leak is (or was) accessible at first-seen.
        original-date - When the information available in the leak was created. It's usually before the first-seen.
        raw-data - Raw data as received by the AIL sensor compressed and encoded in Base64.
        sensor - The AIL sensor uuid where the leak was processed and analysed.
        text - A description of the leak which could include the potential victim(s) or description of the leak.

    Must have one of the following: ['text', 'first-seen', 'last-seen', 'origin', 'raw-data']

    Returns:
        a MISP object representing an 'ail-leak'

    """
    requires = ["text", "first-seen", "last-seen", "origin", "raw-data"]
    args = [
        "duplicate",
        "duplicate_number",
        "first-seen",
        "last-seen",
        "origin",
        "original-date",
        "raw-data",
        "sensor",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ail-leak"
    obj, isNew = MISPHelper._create_obj_cached(event, "ail-leak", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_License(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_License - function for creating MISP ftm-License object

    ftm-License = A grant of land, rights or property. A type of Contract

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        area - Area
        cancelled - Cancelled?
        classification - Classification
        commodities - Commodities
        contractDate - Contract date
        country - Country
        criteria - Contract award criteria
        currency - Currency
        description - Description
        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        language - Language
        method - Procurement method
        modifiedAt - Modified on
        name - Contract name
        notes - Notes
        noticeId - Contract Award Notice ID
        numberAwards - Number of awards
        previousName - Previous name
        procedure - Contract procedure
        procedureNumber - Procedure number
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        reviewDate - License review date
        sourceUrl - Source link
        status - Procurement status
        summary - Summary
        title - Contract title
        topics - Topics
        type - Type of contract. Potentially W (Works), U (Supplies), S (Services).

        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-License'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "amount",
        "amountEur",
        "amountUsd",
        "area",
        "cancelled",
        "classification",
        "commodities",
        "contractDate",
        "country",
        "criteria",
        "currency",
        "description",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "language",
        "method",
        "modifiedAt",
        "name",
        "notes",
        "noticeId",
        "numberAwards",
        "previousName",
        "procedure",
        "procedureNumber",
        "program",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "reviewDate",
        "sourceUrl",
        "status",
        "summary",
        "title",
        "topics",
        "type",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-License"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-License", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Document(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Document - function for creating MISP ftm-Document object

    ftm-Document = Document

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Document'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Document"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Document", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_paloalto_threat_event(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_paloalto_threat_event - function for creating MISP paloalto-threat-event object

    paloalto-threat-event = Palo Alto Threat Log Event

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        app - The application identified (e.g. vnc, ssh, sip, irc, http or smtp).
        direction - The Direction of the Event.
        dport - The port to which the connection headed.
        dst - The Destination IP which is the target of the observed connections.
        dstloc - The Destination Location of the event.
        proto - The transport protocol (e.g. tcp, udp, icmp).
        sport - The port from which the connection originated.
        src - The ip observed to initiate the connection
        srcloc - The Source Location of the event.
        subtype - The subtype of the Log Event.
        thr_category - The Threat Category.
        threatid - The Threat ID.
        time_generated - The datetime of the event.
        type - The type of the Log Event

    Returns:
        a MISP object representing an 'paloalto-threat-event'

    """
    requires = []
    args = [
        "app",
        "direction",
        "dport",
        "dst",
        "dstloc",
        "proto",
        "sport",
        "src",
        "srcloc",
        "subtype",
        "thr_category",
        "threatid",
        "time_generated",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|paloalto-threat-event"
    obj, isNew = MISPHelper._create_obj_cached(event, "paloalto-threat-event", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Passport(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Passport - function for creating MISP ftm-Passport object

    ftm-Passport = Passport

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        authority - Authority
        birthDate - Date of birth
        birthPlace - Place of birth
        country - Country
        date - Date
        description - Description
        endDate - End date
        gender - Gender
        givenName - Given name
        indexText - Index text
        modifiedAt - Modified on
        passportNumber - Passport number
        personalNumber - Personal number
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        sourceUrl - Source URL
        startDate - Start date
        summary - Summary
        surname - Surname
        type - Document type

    Returns:
        a MISP object representing an 'ftm-Passport'

    """
    requires = []
    args = [
        "alephUrl",
        "authority",
        "birthDate",
        "birthPlace",
        "country",
        "date",
        "description",
        "endDate",
        "gender",
        "givenName",
        "indexText",
        "modifiedAt",
        "passportNumber",
        "personalNumber",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "sourceUrl",
        "startDate",
        "summary",
        "surname",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Passport"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Passport", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_intel471_vulnerability_intelligence(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_intel471_vulnerability_intelligence - function for creating MISP intel471-vulnerability-intelligence object

    intel471-vulnerability-intelligence = Intel 471 vulnerability intelligence object.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        activity-location-open-source - The vulnerability is being discussed in open source.
        activity-location-private - The vulnerability is being discussed in private/direct communications.
        activity-location-underground - The vulnerability is being discussed in the underground.
        countermeasures - Summary of countermeasures to protect against the vulnerability.
        cve-id - The vulnerability's CVE ID.
        cvss-score-v2 - CVSS score (version 2).
        cvss-score-v3 - CVSS score (version 3).
        detection - Detection signatures/definitions exist for the vulnerability.
        exploit-status-available - Exploit code for the vulnerability is available.
        exploit-status-not-observed - Exploit code or usage has not been observed for the vulnerability.
        exploit-status-productized - There is a module for the vulnerability in commercial exploit kits or network security tools.
        exploit-status-weaponized - The vulnerability has been used in an attack or has been included in an exploit kit.
        interest-level-disclosed-publicly - The vulnerability has been disclosed publicly.
        interest-level-exploit-sought - An exploit for the vulnerability is being sought.
        interest-level-researched-publicly - The vulnerability has been researched or documented publicly.
        modified - Last modification date.
        patch-status - Availability of a patch for the vulnerability.
        product-name - Product name.
        proof-of-concept - Proof of concept code or demonstration exists.
        published - Initial publication date.
        references - External references.
        risk-level - Risk level of the vulnerability.
        summary - Summary of the vulnerability.
        underground-activity-status - Indicates if underground activity has been observed for the vulnerability.
        underground-activity-summary - Description of underground activity related to the vulnerability.
        vendor-name - Vendor name.
        vulnerability-status - The status of vulnerability.
        vulnerability-type - The type of vulnerability.
        vulnerable-configuration - Vulnerable configuration in CPE format.

    Must have one of the following: ['published', 'modified', 'references', 'vulnerable-configuration', 'summary', 'cve-id']

    Returns:
        a MISP object representing an 'intel471-vulnerability-intelligence'

    """
    requires = [
        "published",
        "modified",
        "references",
        "vulnerable-configuration",
        "summary",
        "cve-id",
    ]
    args = [
        "activity-location-open-source",
        "activity-location-private",
        "activity-location-underground",
        "countermeasures",
        "cve-id",
        "cvss-score-v2",
        "cvss-score-v3",
        "detection",
        "exploit-status-available",
        "exploit-status-not-observed",
        "exploit-status-productized",
        "exploit-status-weaponized",
        "interest-level-disclosed-publicly",
        "interest-level-exploit-sought",
        "interest-level-researched-publicly",
        "modified",
        "patch-status",
        "product-name",
        "proof-of-concept",
        "published",
        "references",
        "risk-level",
        "summary",
        "underground-activity-status",
        "underground-activity-summary",
        "vendor-name",
        "vulnerability-status",
        "vulnerability-type",
        "vulnerable-configuration",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|intel471-vulnerability-intelligence"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "intel471-vulnerability-intelligence", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_macho_section(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_macho_section - function for creating MISP macho-section object

    macho-section = Object describing a section of a file in Mach-O format.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        entropy - Entropy of the whole section
        md5 - [Insecure] MD5 hash (128 bits)
        name - Name of the section
        sha1 - [Insecure] Secure Hash Algorithm 1 (160 bits)
        sha224 - Secure Hash Algorithm 2 (224 bits)
        sha256 - Secure Hash Algorithm 2 (256 bits)
        sha384 - Secure Hash Algorithm 2 (384 bits)
        sha512 - Secure Hash Algorithm 2 (512 bits)
        sha512/224 - Secure Hash Algorithm 2 (224 bits)
        sha512/256 - Secure Hash Algorithm 2 (256 bits)
        size-in-bytes - Size of the section, in bytes
        ssdeep - Fuzzy hash using context triggered piecewise hashes (CTPH)
        text - Free text value to attach to the section

    Must have one of the following: ['text', 'name', 'md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'sha512/224', 'sha512/256']

    Returns:
        a MISP object representing an 'macho-section'

    """
    requires = [
        "text",
        "name",
        "md5",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha512/224",
        "sha512/256",
    ]
    args = [
        "entropy",
        "md5",
        "name",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha512/224",
        "sha512/256",
        "size-in-bytes",
        "ssdeep",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|macho-section"
    obj, isNew = MISPHelper._create_obj_cached(event, "macho-section", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_forensic_case(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_forensic_case - function for creating MISP forensic-case object

    forensic-case = An object template to describe a digital forensic case.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        additional-comments - Comments.
        analysis-start-date - Date when the analysis began.
        case-name - Name to address the case.
        case-number - Any unique number assigned to the case for unique identification.
        name-of-the-analyst - Name(s) of the analyst assigned to the case.
        references - External references

    Must have one of the following: ['case-number']

    Returns:
        a MISP object representing an 'forensic-case'

    """
    requires = ["case-number"]
    args = [
        "additional-comments",
        "analysis-start-date",
        "case-name",
        "case-number",
        "name-of-the-analyst",
        "references",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|forensic-case"
    obj, isNew = MISPHelper._create_obj_cached(event, "forensic-case", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_passive_ssh(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_passive_ssh - function for creating MISP passive-ssh object

    passive-ssh = Passive-ssh object as described on passive-ssh services from circl.lu - https://github.com/D4-project/passive-ssh

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        banner - SSH banner
        base64 - Base64 representation of the ssh-key
        fingerprint - Fingerprint of the SSH key
        first_seen - First time that the passive-ssh object has been seen by the passive SSH
        hassh - Hassh fingerprint
        host - IP Address of the host(s) that exposed this SSH key
        last_seen - Last time that the passive-ssh object has been seen by the passive SSH
        port - Port of the connection

    Must have one of the following: ['host', 'base64', 'fingerprint', 'hassh']

    Returns:
        a MISP object representing an 'passive-ssh'

    """
    requires = ["host", "base64", "fingerprint", "hassh"]
    args = [
        "banner",
        "base64",
        "fingerprint",
        "first_seen",
        "hassh",
        "host",
        "last_seen",
        "port",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|passive-ssh"
    obj, isNew = MISPHelper._create_obj_cached(event, "passive-ssh", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_traceability_impact(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_traceability_impact - function for creating MISP traceability-impact object

    traceability-impact = Traceability Impact object as described in STIX 2.1 Incident object extension.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        criticality - Criticality of the impact
        description - Additional details about the impact.
        end_time - The date and time the impact was last recorded.
        end_time_fidelity - Level of fidelity that the `end_time` is recorded in.
        recoverability - Recoverability of this particular impact with respect to feasibility and required time and resources.
        start_time - The date and time the impact was first recorded.
        start_time_fidelity - Level of fidelity that the `start_time` is recorded in.
        traceability_impact - Impact on a system or organization's ability to perform audits or provvide non-repudiation.

    Returns:
        a MISP object representing an 'traceability-impact'

    """
    requires = []
    args = [
        "criticality",
        "description",
        "end_time",
        "end_time_fidelity",
        "recoverability",
        "start_time",
        "start_time_fidelity",
        "traceability_impact",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|traceability-impact"
    obj, isNew = MISPHelper._create_obj_cached(event, "traceability-impact", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_btc_transaction(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_btc_transaction - function for creating MISP btc-transaction object

    btc-transaction = An object to describe a Bitcoin transaction. Best to be used with bitcoin-wallet.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        btc-address - A Bitcoin transactional address
        time - Date and time of transaction
        transaction-number - A Bitcoin transaction number in a sequence of transactions
        value_BTC - Value in BTC at date/time displayed in field 'time'
        value_EUR - Value in EUR with conversion rate as of date/time displayed in field 'time'
        value_USD - Value in USD with conversion rate as of date/time displayed in field 'time'

    Must have one of the following: ['transaction-number', 'time', 'value_BTC']

    Returns:
        a MISP object representing an 'btc-transaction'

    """
    requires = ["transaction-number", "time", "value_BTC"]
    args = [
        "btc-address",
        "time",
        "transaction-number",
        "value_BTC",
        "value_EUR",
        "value_USD",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|btc-transaction"
    obj, isNew = MISPHelper._create_obj_cached(event, "btc-transaction", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_splunk(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_splunk - function for creating MISP splunk object

    splunk = Splunk / Splunk ES object

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Description
        drill-down - Drilldown
        earliest - Earliest time
        latest - Latest time
        response-action - Response action
        schedule - Schedule
        search - Search / Correlation search

    Returns:
        a MISP object representing an 'splunk'

    """
    requires = []
    args = [
        "description",
        "drill-down",
        "earliest",
        "latest",
        "response-action",
        "schedule",
        "search",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|splunk"
    obj, isNew = MISPHelper._create_obj_cached(event, "splunk", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_thaicert_group_cards(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_thaicert_group_cards - function for creating MISP thaicert-group-cards object

    thaicert-group-cards = Adversary group cards inspired by ThaiCERT

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        country - Country of group - group location where it operates from.
        description - Description of group activities or TTP used for group actions.
        more informations - List more informations by url - reports, group links etc..
        motivation - Motivation behind group ie. espionage, ransomware, other criminal activity, hacktivism . . .
        name - Names or nicknames for group.
        observed - What sector is this group active at? Government, telecommunication etc and country of activity.
        sponsor - Sponsor of group ie. country, state, criminal ring, cartel etc..
        tools used - What known tools are used by group.

    Returns:
        a MISP object representing an 'thaicert-group-cards'

    """
    requires = []
    args = [
        "country",
        "description",
        "more informations",
        "motivation",
        "name",
        "observed",
        "sponsor",
        "tools used",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|thaicert-group-cards"
    obj, isNew = MISPHelper._create_obj_cached(event, "thaicert-group-cards", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_iot_device(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_iot_device - function for creating MISP iot-device object

    iot-device = An IoT device.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        architecture - architecture of the IoT device
        boot-log - Boot log of the IoT device
        fcc-id - FCC-ID of the IoT device
        jtag-interface - JTAG interface of the IoT device
        model - Model of the IoT device
        picture-device - Picture of the IoT device
        picture-pcb - Picture of the IoT device PCB
        platform - Platform of of the IoT device
        reference - Reference of the IoT device
        serial-interface - Serial interface of the IoT device
        spi-interface - SPI interface of the IoT device
        vendor - Vendor of the IoT device

    Must have one of the following: ['model', 'vendor', 'architecture', 'boot-log', 'picture-pcb', 'picture-device']

    Returns:
        a MISP object representing an 'iot-device'

    """
    requires = [
        "model",
        "vendor",
        "architecture",
        "boot-log",
        "picture-pcb",
        "picture-device",
    ]
    args = [
        "architecture",
        "boot-log",
        "fcc-id",
        "jtag-interface",
        "model",
        "picture-device",
        "picture-pcb",
        "platform",
        "reference",
        "serial-interface",
        "spi-interface",
        "vendor",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|iot-device"
    obj, isNew = MISPHelper._create_obj_cached(event, "iot-device", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_domain_crawled(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_domain_crawled - function for creating MISP domain-crawled object

    domain-crawled = A domain crawled over time

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        domain - Domain name
        text - A description of the tuple
        url - domain url

    Returns:
        a MISP object representing an 'domain-crawled'

    """
    requires = []
    args = ["domain", "text", "url"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|domain-crawled"
    obj, isNew = MISPHelper._create_obj_cached(event, "domain-crawled", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_http_request(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_http_request - function for creating MISP http-request object

    http-request = A single HTTP request header

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        basicauth-password - HTTP Basic Authentication Password
        basicauth-user - HTTP Basic Authentication Username
        content-type - The MIME type of the body of the request
        cookie - An HTTP cookie previously sent by the server with Set-Cookie
        header - An HTTP header sent during HTTP request
        host - The domain name of the server
        ip-dst - The IP address of the server
        ip-src - The IP address of the client
        method - HTTP Method invoked (one of GET, POST, PUT, HEAD, DELETE, OPTIONS, CONNECT)
        proxy-password - HTTP Proxy Password
        proxy-user - HTTP Proxy Username
        referer - This is the address of the previous web page from which a link to the currently requested page was followed
        text - HTTP Request comment
        uri - Request URI
        url - Full HTTP Request URL
        user-agent - The user agent string of the user agent

    Must have one of the following: ['url', 'uri']

    Returns:
        a MISP object representing an 'http-request'

    """
    requires = ["url", "uri"]
    args = [
        "basicauth-password",
        "basicauth-user",
        "content-type",
        "cookie",
        "header",
        "host",
        "ip-dst",
        "ip-src",
        "method",
        "proxy-password",
        "proxy-user",
        "referer",
        "text",
        "uri",
        "url",
        "user-agent",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|http-request"
    obj, isNew = MISPHelper._create_obj_cached(event, "http-request", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Email(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Email - function for creating MISP ftm-Email object

    ftm-Email = Email

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        bcc - Blind carbon copy
        bodyHtml - HTML
        bodyText - Text
        cc - Carbon copy
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        from - From
        generator - The program used to generate this file
        headers - Raw headers
        ibanMentioned - Detected IBANs
        inReplyTo - Message ID of the preceding email in the thread
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sender - Sender
        sourceUrl - Source link
        subject - Subject
        summary - Summary
        threadTopic - Thread topic
        title - Title
        to - To
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Email'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "bcc",
        "bodyHtml",
        "bodyText",
        "cc",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "from",
        "generator",
        "headers",
        "ibanMentioned",
        "inReplyTo",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sender",
        "sourceUrl",
        "subject",
        "summary",
        "threadTopic",
        "title",
        "to",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Email"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Email", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_asn(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_asn - function for creating MISP asn object

    asn = Autonomous system object describing an autonomous system which can include one or more network operators managing an entity (e.g. ISP) along with their routing policy, routing prefixes or alike.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        asn - Autonomous System Number
        country - Country code of the main location of the autonomous system
        description - Description of the autonomous system
        export - The outbound routing policy of the AS in RFC 2622 – Routing Policy Specification Language (RPSL) format
        first-seen - First time the ASN was seen
        import - The inbound IPv4 routing policy of the AS in RFC 2622 – Routing Policy Specification Language (RPSL) format
        last-seen - Last time the ASN was seen
        mp-export - This attribute performs the same function as the export attribute above. The difference is that mp-export allows both IPv4 and IPv6 address families to be specified. The export is described in RFC 4012 – Routing Policy Specification Language next generation (RPSLng), section 4.5. format
        mp-import - The inbound IPv4 or IPv6 routing policy of the AS in RFC 4012 – Routing Policy Specification Language next generation (RPSLng), section 4.5. format
        subnet-announced - Subnet announced

    Must have one of the following: ['asn']

    Returns:
        a MISP object representing an 'asn'

    """
    requires = ["asn"]
    args = [
        "asn",
        "country",
        "description",
        "export",
        "first-seen",
        "import",
        "last-seen",
        "mp-export",
        "mp-import",
        "subnet-announced",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|asn"
    obj, isNew = MISPHelper._create_obj_cached(event, "asn", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_geolocation(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_geolocation - function for creating MISP geolocation object

    geolocation = An object to describe a geographic location.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        accuracy-radius - The approximate accuracy radius, in kilometers, around the latitude and longitude for the geographical entity (country, subdivision, city or postal code) associated with the related object. (based on geoip2 accuracy of maxmind)
        address - Address.
        altitude - The altitude is the decimal value of the altitude in the World Geodetic System 84 (WGS84) reference.
        city - City.
        country - Country.
        countrycode - Country code in ISO 3166-1 alpha-2
        epsg - EPSG Geodetic Parameter value. This is an integer value of the EPSG.
        first-seen - When the location was seen for the first time.
        last-seen - When the location was seen for the last time.
        latitude - The latitude is the decimal value of the latitude in the World Geodetic System 84 (WGS84) reference.
        longitude - The longitude is the decimal value of the longitude in the World Geodetic System 84 (WGS84) reference
        neighborhood - Neighborhood.
        region - Region.
        spacial-reference - Default spacial or projection refence for this object.
        text - A generic description of the location.
        zipcode - Zip Code.

    Must have one of the following: ['latitude', 'longitude', 'city', 'region', 'country', 'countrycode', 'epsg']

    Returns:
        a MISP object representing an 'geolocation'

    """
    requires = [
        "latitude",
        "longitude",
        "city",
        "region",
        "country",
        "countrycode",
        "epsg",
    ]
    args = [
        "accuracy-radius",
        "address",
        "altitude",
        "city",
        "country",
        "countrycode",
        "epsg",
        "first-seen",
        "last-seen",
        "latitude",
        "longitude",
        "neighborhood",
        "region",
        "spacial-reference",
        "text",
        "zipcode",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|geolocation"
    obj, isNew = MISPHelper._create_obj_cached(event, "geolocation", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_reddit_account(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_reddit_account - function for creating MISP reddit-account object

    reddit-account = Reddit account.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        account-avatar - A screen capture or exported account avatar.
        account-avatar-url - A user profile picture or avatar.
        account-id - Account id.
        account-name - Account name (do not include u/).
        archive - Archive of the account (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts etc.
        description - A description of the user.
        link - Original link to the account page (supposed harmless).
        moderator-of - Subreddits of which this account is a moderator (exclude the r/).
        trophies - Trophies listed in the account Trophy Case.
        url - Original URL location of the page (potentially malicious).

    Must have one of the following: ['account-name', 'account-id', 'description', 'archive', 'link']

    Returns:
        a MISP object representing an 'reddit-account'

    """
    requires = ["account-name", "account-id", "description", "archive", "link"]
    args = [
        "account-avatar",
        "account-avatar-url",
        "account-id",
        "account-name",
        "archive",
        "attachment",
        "description",
        "link",
        "moderator-of",
        "trophies",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|reddit-account"
    obj, isNew = MISPHelper._create_obj_cached(event, "reddit-account", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_virustotal_submission(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_virustotal_submission - function for creating MISP virustotal-submission object

    virustotal-submission = VirusTotal Submission

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        city - The city a file was uploaded from.
        country - The country a file was uploaded from.
        date - The upload date.
        filename - The filename used to submit a file.
        interface - The interface used to upload a file.
        submitter-id - Submitter ID, given as source_key via the VT API.

    Returns:
        a MISP object representing an 'virustotal-submission'

    """
    requires = []
    args = ["city", "country", "date", "filename", "interface", "submitter-id"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|virustotal-submission"
    obj, isNew = MISPHelper._create_obj_cached(event, "virustotal-submission", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_task(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_task - function for creating MISP task object

    task = Task object as described in STIX 2.1 Incident object extension.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Description of the task.
        end_time - The date and time the event was last recorded.
        end_time_fidelity - Level of fidelity that the `end_time` is recorded in.
        error - Details about any failure or deviation that occurred in the task.
        name - Name of the task.
        outcome - Outcome of the task
        priority - Priority or importance of the task.
        start_time - The date and time the event was first recorded.
        start_time_fidelity - Level of fidelity that the `start_time` is recorded in.
        task_type - Type of task.

    Returns:
        a MISP object representing an 'task'

    """
    requires = []
    args = [
        "description",
        "end_time",
        "end_time_fidelity",
        "error",
        "name",
        "outcome",
        "priority",
        "start_time",
        "start_time_fidelity",
        "task_type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|task"
    obj, isNew = MISPHelper._create_obj_cached(event, "task", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_research_scanner(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_research_scanner - function for creating MISP research-scanner object

    research-scanner = Information related to known scanning activity (e.g. from research projects)

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        asn - Autonomous System Number related to project
        contact_email - Project contact information
        contact_phone - Phone number related to project
        domain - Domain related to project
        project - Description of scanning project
        project_url - URL related to project
        scanning_ip - IP address used by project
        scheduled_end - Scheduled end of scanning activity
        scheduled_start - Scheduled start of scanning activity

    Returns:
        a MISP object representing an 'research-scanner'

    """
    requires = []
    args = [
        "asn",
        "contact_email",
        "contact_phone",
        "domain",
        "project",
        "project_url",
        "scanning_ip",
        "scheduled_end",
        "scheduled_start",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|research-scanner"
    obj, isNew = MISPHelper._create_obj_cached(event, "research-scanner", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_parler_post(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_parler_post - function for creating MISP parler-post object

    parler-post = Parler post (parley).

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original parley (Internet Archive, Archive.is, etc).
        article - Indicates if the post is an article.
        attachment - The parley file or screen capture.
        badge - Post badge.
        body - Raw text of the post.
        comments - Number of comments on this object.
        creator - Name of the account that posted this parley.
        creator-id - ID of the account that posted this parley.
        depth - Post nesting depth.
        embedded-link - Link in the parley
        embedded-safe-link - Safe link in the parley
        hashtag - Hashtag embedded in the parley.
        impressions - Number of impressions.
        in-reply-to-display-name - The user display name of the parley this post shares.
        in-reply-to-parley-id - The Parler ID of the parley that this post shares.
        in-reply-to-user-id - The user ID of the parley this post shares.
        link - Original link to the post (supposed harmless).
        post-id - Numeric id of the parley.
        share-link - Sharable link generated by Parler (supposed harmless).
        upvotes - Comment upvotes.
        url - Original URL of the parley, e.g. link shortener (potentially malicious).
        username-quoted - Username who is quoted in the parley.

    Must have one of the following: ['body', 'post-id', 'archive', 'url', 'link', 'attachment']

    Returns:
        a MISP object representing an 'parler-post'

    """
    requires = ["body", "post-id", "archive", "url", "link", "attachment"]
    args = [
        "archive",
        "article",
        "attachment",
        "badge",
        "body",
        "comments",
        "creator",
        "creator-id",
        "depth",
        "embedded-link",
        "embedded-safe-link",
        "hashtag",
        "impressions",
        "in-reply-to-display-name",
        "in-reply-to-parley-id",
        "in-reply-to-user-id",
        "link",
        "post-id",
        "share-link",
        "upvotes",
        "url",
        "username-quoted",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|parler-post"
    obj, isNew = MISPHelper._create_obj_cached(event, "parler-post", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_internal_reference(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_internal_reference - function for creating MISP internal-reference object

    internal-reference = Internal reference.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Comment associated to the identifier.
        identifier - Identifier of the reference. Should be unique in your system.
        link - Link associated to the identifier.
        type - Type of internal reference.

    Returns:
        a MISP object representing an 'internal-reference'

    """
    requires = []
    args = ["comment", "identifier", "link", "type"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|internal-reference"
    obj, isNew = MISPHelper._create_obj_cached(event, "internal-reference", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Sanction(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Sanction - function for creating MISP ftm-Sanction object

    ftm-Sanction = A sanction designation

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        authority - Authority
        country - Country
        date - Date
        description - Description
        duration - Duration
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        reason - Reason
        recordId - Record ID
        retrievedAt - Retrieved on
        sourceUrl - Source URL
        startDate - Start date
        status - Status
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Sanction'

    """
    requires = []
    args = [
        "alephUrl",
        "authority",
        "country",
        "date",
        "description",
        "duration",
        "endDate",
        "indexText",
        "modifiedAt",
        "program",
        "publisher",
        "publisherUrl",
        "reason",
        "recordId",
        "retrievedAt",
        "sourceUrl",
        "startDate",
        "status",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Sanction"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Sanction", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_microblog(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_microblog - function for creating MISP microblog object

    microblog = Microblog post like a Twitter tweet or a post on a Facebook wall.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original document (Internet Archive, Archive.is, etc).
        attachment - The microblog post file or screen capture.
        creation-date - Initial creation of the microblog post
        display-name - Display name of the account who posted the microblog.
        embedded-link - Link into the microblog post
        embedded-safe-link - Safe link into the microblog post
        hashtag - Hashtag embedded in the microblog post
        in-reply-to-display-name - The user display name of the microblog this post replies to.
        in-reply-to-status-id - The microblog ID of the microblog this post replies to.
        in-reply-to-user-id - The user ID of the microblog this post replies to.
        language - The language of the post.
        link - Original link to the microblog post (supposed harmless).
        modification-date - Last update of the microblog post
        post - Raw text of the post.
        removal-date - When the microblog post was removed.
        state - State of the microblog post
        title - Title of the post.
        twitter-id - The microblog post id.
        type - Type of the microblog post
        url - Original URL of the microblog post (potentially malicious).
        username - Username who posted the microblog post (without the @ prefix)
        username-quoted - Username who are quoted in the microblog post.
        verified-username - Is the username account verified by the operator of the microblog platform

    Must have one of the following: ['post', 'archive', 'url', 'link', 'attachment']

    Returns:
        a MISP object representing an 'microblog'

    """
    requires = ["post", "archive", "url", "link", "attachment"]
    args = [
        "archive",
        "attachment",
        "creation-date",
        "display-name",
        "embedded-link",
        "embedded-safe-link",
        "hashtag",
        "in-reply-to-display-name",
        "in-reply-to-status-id",
        "in-reply-to-user-id",
        "language",
        "link",
        "modification-date",
        "post",
        "removal-date",
        "state",
        "title",
        "twitter-id",
        "type",
        "url",
        "username",
        "username-quoted",
        "verified-username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|microblog"
    obj, isNew = MISPHelper._create_obj_cached(event, "microblog", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_phone(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_phone - function for creating MISP phone object

    phone = A phone or mobile phone object which describe a phone.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        brand - Brand of the phone.
        first-seen - When the phone has been accessible or seen for the first time.
        gummei - Globally Unique MME Identifier (GUMMEI) is composed from MCC, MNC and MME Identifier (MMEI).
        guti - Globally Unique Temporary UE Identity (GUTI) is a temporary identification to not reveal the phone (user equipment in 3GPP jargon) composed of GUMMEI and the M-TMSI.
        imei - International Mobile Equipment Identity (IMEI) is a number, usually unique, to identify 3GPP and iDEN mobile phones, as well as some satellite phones.
        imsi - A usually unique International Mobile Subscriber Identity (IMSI) is allocated to each mobile subscriber in the GSM/UMTS/EPS system. IMSI can also refer to International Mobile Station Identity in the ITU nomenclature.
        last-seen - When the phone has been accessible or seen for the last time.
        model - Model of the phone.
        msisdn - MSISDN (pronounced as /'em es ai es di en/ or misden) is a number uniquely identifying a subscription in a GSM or a UMTS mobile network. Simply put, it is the mapping of the telephone number to the SIM card in a mobile/cellular phone. This abbreviation has a several interpretations, the most common one being Mobile Station International Subscriber Directory Number.
        serial-number - Serial Number.
        text - A description of the phone.
        tmsi - Temporary Mobile Subscriber Identities (TMSI) to visiting mobile subscribers can be allocated.

    Must have one of the following: ['text', 'first-seen', 'last-seen', 'imei', 'imsi', 'msisdn', 'tmsi', 'guti']

    Returns:
        a MISP object representing an 'phone'

    """
    requires = [
        "text",
        "first-seen",
        "last-seen",
        "imei",
        "imsi",
        "msisdn",
        "tmsi",
        "guti",
    ]
    args = [
        "brand",
        "first-seen",
        "gummei",
        "guti",
        "imei",
        "imsi",
        "last-seen",
        "model",
        "msisdn",
        "serial-number",
        "text",
        "tmsi",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|phone"
    obj, isNew = MISPHelper._create_obj_cached(event, "phone", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_malware_analysis(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_malware_analysis - function for creating MISP malware-analysis object

    malware-analysis = Malware Analysis captures the metadata and results of a particular static or dynamic analysis performed on a malware instance or family.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        analysis_definition_version - The version of the analysis definitions used by the analysis tool.
        analysis_engine_version - The version of the analysis engine or product that was used to perform the analysis.
        configuration_version - The named configuration of additional product configuration parameters for this analysis run.
        end_time - The date and time that the malware analysis ended.
        module - The specific analysis module that was used and configured in the product during this analysis run.
        product - The name of the analysis engine or product that was used.
        result - The classification result as determined by the scanner or tool analysis process.
        result_name - The classification result or name assigned to the malware instance by the scanner tool.
        start_time - The date and time that the malware analysis was initiated.
        submitted_time - The date and time that the malware was first submitted for scanning or analysis.
        version - The version of the analysis product that was used to perform the analysis.

    Returns:
        a MISP object representing an 'malware-analysis'

    """
    requires = []
    args = [
        "analysis_definition_version",
        "analysis_engine_version",
        "configuration_version",
        "end_time",
        "module",
        "product",
        "result",
        "result_name",
        "start_time",
        "submitted_time",
        "version",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|malware-analysis"
    obj, isNew = MISPHelper._create_obj_cached(event, "malware-analysis", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ip_port(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ip_port - function for creating MISP ip-port object

    ip-port = An IP address (or domain or hostname) and a port seen as a tuple (or as a triple) in a specific time frame.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        AS - Autonomous system
        country-code - Country Code
        domain - Domain
        dst-port - Destination port
        first-seen - First time the tuple has been seen
        hostname - Hostname
        ip - IP Address
        ip-dst - destination IP address
        ip-src - source IP address
        last-seen - Last time the tuple has been seen
        protocol - Protocol
        src-port - Source port
        text - Description of the tuple

    Must have one of the following: ['dst-port', 'src-port', 'domain', 'hostname', 'ip', 'ip-src', 'ip-dst']

    Returns:
        a MISP object representing an 'ip-port'

    """
    requires = ["dst-port", "src-port", "domain", "hostname", "ip", "ip-src", "ip-dst"]
    args = [
        "AS",
        "country-code",
        "domain",
        "dst-port",
        "first-seen",
        "hostname",
        "ip",
        "ip-dst",
        "ip-src",
        "last-seen",
        "protocol",
        "src-port",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ip-port"
    obj, isNew = MISPHelper._create_obj_cached(event, "ip-port", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Pages(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Pages - function for creating MISP ftm-Pages object

    ftm-Pages = Pages

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        pdfHash - PDF alternative version checksum
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Pages'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "pdfHash",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Pages"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Pages", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cryptocurrency_transaction(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cryptocurrency_transaction - function for creating MISP cryptocurrency-transaction object

    cryptocurrency-transaction = An object to describe a cryptocurrency transaction.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - A cryptocurrency transactional address
        symbol - The (uppercase) symbol of the cryptocurrency used. Symbol should be from https://coinmarketcap.com/all/views/all/
        time - Date and time of transaction
        transaction-number - A transaction number in a sequence of transactions
        value - Value in cryptocurrency at date/time displayed in field 'time'
        value_EUR - Value in EUR with conversion rate as of date/time displayed in field 'time'
        value_USD - Value in USD with conversion rate as of date/time displayed in field 'time'

    Must have one of the following: ['transaction-number', 'time', 'value', 'address']

    Returns:
        a MISP object representing an 'cryptocurrency-transaction'

    """
    requires = ["transaction-number", "time", "value", "address"]
    args = [
        "address",
        "symbol",
        "time",
        "transaction-number",
        "value",
        "value_EUR",
        "value_USD",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cryptocurrency-transaction"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "cryptocurrency-transaction", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_sam_hive_user_group(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_regripper_sam_hive_user_group - function for creating MISP regripper-sam-hive-user-group object

    regripper-sam-hive-user-group = Regripper Object template designed to present group profile details extracted from the SAM hive.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        full-name - Full name assigned to the profile.
        group-comment - Any group comment added.
        group-name - Name assigned to the profile.
        group-users - Users belonging to the group
        key - Registry key where the information is retrieved from.
        key-last-write-time - Date and time when the key was last updated.
        last-write-date-time - Date and time when the group key was updated.

    Must have one of the following: ['group-name']

    Returns:
        a MISP object representing an 'regripper-sam-hive-user-group'

    """
    requires = ["group-name"]
    args = [
        "full-name",
        "group-comment",
        "group-name",
        "group-users",
        "key",
        "key-last-write-time",
        "last-write-date-time",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|regripper-sam-hive-user-group"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-sam-hive-user-group", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_dark_pattern_item(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_dark_pattern_item - function for creating MISP dark-pattern-item object

    dark-pattern-item = An Item whose User Interface implements a dark pattern.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - textual comment about the item
        gain - What is the implementer is gaining by deceiving the user
        implementer - Who is the vendor / holder of the item
        location - Location where to find the item
        screenshot - A screencapture or a screengrab of the item at work
        time - Date and time when first-seen
        user - who are the user of the item

    Must have one of the following: ['location', 'screenshot']

    Returns:
        a MISP object representing an 'dark-pattern-item'

    """
    requires = ["location", "screenshot"]
    args = ["comment", "gain", "implementer", "location", "screenshot", "time", "user"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|dark-pattern-item"
    obj, isNew = MISPHelper._create_obj_cached(event, "dark-pattern-item", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_registry_key(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_registry_key - function for creating MISP registry-key object

    registry-key = Registry key object describing a Windows registry key with value and last-modified timestamp

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        data - Data stored in the registry key
        data-type - Registry value type
        hive - Hive used to store the registry key (file on disk)
        key - Full key path
        last-modified - Last time the registry key has been modified
        name - Name of the registry key
        root-keys - Root key of the Windows registry (extracted from the key)

    Must have one of the following: ['key', 'name', 'data']

    Returns:
        a MISP object representing an 'registry-key'

    """
    requires = ["key", "name", "data"]
    args = ["data", "data-type", "hive", "key", "last-modified", "name", "root-keys"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|registry-key"
    obj, isNew = MISPHelper._create_obj_cached(event, "registry-key", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_tsk_web_cookie(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_tsk_web_cookie - function for creating MISP tsk-web-cookie object

    tsk-web-cookie = An TSK-Autopsy Object Template to represent cookies identified during a forensic investigation.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        URL - The website URL that created the cookie.
        additional-comments - Comments.
        browser - Browser on which the cookie was created.
        datetime-created - date and time when the cookie was created.
        domain-ip - IP of the domain that created the URL.
        domain-name - Domain of the URL that created the cookie.
        name - Name of the cookie
        value - Value assigned to the cookie.

    Returns:
        a MISP object representing an 'tsk-web-cookie'

    """
    requires = []
    args = [
        "URL",
        "additional-comments",
        "browser",
        "datetime-created",
        "domain-ip",
        "domain-name",
        "name",
        "value",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|tsk-web-cookie"
    obj, isNew = MISPHelper._create_obj_cached(event, "tsk-web-cookie", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Event(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Event - function for creating MISP ftm-Event object

    ftm-Event = Event

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        companiesMentioned - Detected companies
        country - Country
        date - Date
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        endDate - End date
        ibanMentioned - Detected IBANs
        important - Important
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        location - Location
        locationMentioned - Detected locations
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        sourceUrl - Source link
        startDate - Start date
        summary - Summary
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Event'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "companiesMentioned",
        "country",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "endDate",
        "ibanMentioned",
        "important",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "location",
        "locationMentioned",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "sourceUrl",
        "startDate",
        "summary",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Event"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Event", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_artifact(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_artifact - function for creating MISP artifact object

    artifact = The Artifact object permits capturing an array of bytes (8-bits), as a base64-encoded string, or linking to a file-like payload. From STIX 2.1 (6.1)

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        decryption_key - Specifies the decryption key for the encrypted binary data (either via payload_bin or url). For example, this may be useful in cases of sharing malware samples, which are often encoded in an encrypted archive.
        encryption_algorithm - If the artifact is encrypted, specifies the type of encryption algorithm the binary data  (either via payload_bin or url) is encoded in.
        md5 - [Insecure] MD5 hash (128 bits)
        mime_type - Whenever feasible, this value SHOULD be one of the values defined in the Template column in the IANA media type registry [Media Types]. Maintaining a comprehensive universal catalog of all extant file types is obviously not possible. When specifying a MIME Type not included in the IANA registry, implementers should use their best judgement so as to facilitate interoperability.
        payload_bin - Specifies the binary data contained in the artifact as a base64-encoded string.
        sha1 - [Insecure] Secure Hash Algorithm 1 (160 bits)
        sha256 - Secure Hash Algorithm 2 (256 bits)
        sha3-256 - Secure Hash Algorithm 3 (256 bits)
        sha3-512 - Secure Hash Algorithm 3 (512 bits)
        sha512 - Secure Hash Algorithm 2 (512 bits)
        ssdeep - Fuzzy hash using context triggered piecewise hashes (CTPH)
        tlsh - Fuzzy hash by Trend Micro: Locality Sensitive Hash
        url - The value of this property MUST be a valid URL that resolves to the unencoded content. When present, at least one hash value MUST be present too.

    Must have one of the following: ['payload_bin', 'url']

    Returns:
        a MISP object representing an 'artifact'

    """
    requires = ["payload_bin", "url"]
    args = [
        "decryption_key",
        "encryption_algorithm",
        "md5",
        "mime_type",
        "payload_bin",
        "sha1",
        "sha256",
        "sha3-256",
        "sha3-512",
        "sha512",
        "ssdeep",
        "tlsh",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|artifact"
    obj, isNew = MISPHelper._create_obj_cached(event, "artifact", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_domain_ip(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_domain_ip - function for creating MISP domain-ip object

    domain-ip = A domain/hostname and IP address seen as a tuple in a specific time frame.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        domain - Domain name
        first-seen - First time the tuple has been seen
        hostname - Hostname related to the IP
        ip - IP Address
        last-seen - Last time the tuple has been seen
        port - Associated TCP port with the domain
        registration-date - Registration date of domain
        text - A description of the tuple

    Must have one of the following: ['ip', 'domain', 'hostname']

    Returns:
        a MISP object representing an 'domain-ip'

    """
    requires = ["ip", "domain", "hostname"]
    args = [
        "domain",
        "first-seen",
        "hostname",
        "ip",
        "last-seen",
        "port",
        "registration-date",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|domain-ip"
    obj, isNew = MISPHelper._create_obj_cached(event, "domain-ip", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_report - function for creating MISP report object

    report = Metadata used to generate an executive level report

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        case-number - Case number
        link - Link to the report mentioned
        report-file - Attachment(s) that is related to the report
        summary - Free text summary of the report
        type - Type of report

    Must have one of the following: ['summary', 'link']

    Returns:
        a MISP object representing an 'report'

    """
    requires = ["summary", "link"]
    args = ["case-number", "link", "report-file", "summary", "type"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|report"
    obj, isNew = MISPHelper._create_obj_cached(event, "report", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_device(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_device - function for creating MISP device object

    device = An object to define a device

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        MAC-address - Device MAC address
        OS - OS of the device
        alias - Alias of the Device
        analysis-date - Date of device analysis
        attachment - An attachment
        description - Description of the Device
        device-type - Type of the device
        dns-name - Device DNS Name
        hits - Number of hits for the device
        infection_type - Type of infection if the device is in Infected status
        ip-address - Device IP address
        name - Name of the Device
        status - Status of the device
        version - Version of the device/ OS

    Must have one of the following: ['name', 'alias']

    Returns:
        a MISP object representing an 'device'

    """
    requires = ["name", "alias"]
    args = [
        "MAC-address",
        "OS",
        "alias",
        "analysis-date",
        "attachment",
        "description",
        "device-type",
        "dns-name",
        "hits",
        "infection_type",
        "ip-address",
        "name",
        "status",
        "version",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|device"
    obj, isNew = MISPHelper._create_obj_cached(event, "device", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_spearphishing_attachment(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_spearphishing_attachment - function for creating MISP spearphishing-attachment object

    spearphishing-attachment = Spearphishing Attachment

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        artifact-dropped-md5 - The MD5 of an additional file that was either extracted from or downloaded by the attachment.
        artifact-dropped-name - Name of an additional file that was either extracted from or downloaded by the attachment.
        artifact-dropped-sha1 - The SHA1 of an additional file that was either extracted from or downloaded by the attachment.
        artifact-dropped-sha256 - The SHA256 of an additional file that was either extracted from or downloaded by the attachment.
        attachment-md5 - The MD5 of the file that was attached to the e-mail itself.
        attachment-name - The name of the file that was attached to the e-mail itself.
        attachment-sha1 - The SHA1 of the file that was attached to the e-mail itself.
        attachment-sha256 - The SHA256 of the file that was attached to the e-mail itself.
        c2-domain - Command and control domain detected during analysis.
        c2-ip - Command and control IP address detected during analysis.
        c2-url - Command and control URL detected during analysis.
        date - Date and time the e-mail was sent.
        email-sender - The source address from which the e-mail was sent.
        malicious-url - Malicious URL that downloaded additional malware.
        research-links - A link to an external analysis (VirusTotal, urlscan, etc.).
        sender-ip - The source IP from which the e-mail was sent.
        subject - The subject line of the e-mail.
        supporting-evidence - Description of the spearphish e-mail.

    Must have one of the following: ['attachment-md5', 'attachment-sha1', 'attachment-sha256']

    Returns:
        a MISP object representing an 'spearphishing-attachment'

    """
    requires = ["attachment-md5", "attachment-sha1", "attachment-sha256"]
    args = [
        "artifact-dropped-md5",
        "artifact-dropped-name",
        "artifact-dropped-sha1",
        "artifact-dropped-sha256",
        "attachment-md5",
        "attachment-name",
        "attachment-sha1",
        "attachment-sha256",
        "c2-domain",
        "c2-ip",
        "c2-url",
        "date",
        "email-sender",
        "malicious-url",
        "research-links",
        "sender-ip",
        "subject",
        "supporting-evidence",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|spearphishing-attachment"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "spearphishing-attachment", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cloth(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cloth - function for creating MISP cloth object

    cloth = Describes clothes a natural person wears

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        bottom-accessories - Cloth and accessories on the bottom part of the body
        cloth-color - Cloth's colors
        cloth-picture - Cloth's pictures
        description - Cloth's Description of a natural person
        head-accessories - Cloth and accessories on the head
        top-accessories - Cloth and accessories on the top part of the body

    Returns:
        a MISP object representing an 'cloth'

    """
    requires = []
    args = [
        "bottom-accessories",
        "cloth-color",
        "cloth-picture",
        "description",
        "head-accessories",
        "top-accessories",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cloth"
    obj, isNew = MISPHelper._create_obj_cached(event, "cloth", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_bank_account(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_bank_account - function for creating MISP bank-account object

    bank-account = An object describing bank account information based on account description from goAML 4.0.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        aba-rtn -  ABA routing transit number
        account - Account number
        account-name - A field to freely describe the bank account details.
        balance - The balance of the account after the suspicious transaction was processed.
        beneficiary - Final beneficiary of the bank account.
        beneficiary-comment - Comment about the final beneficiary.
        branch - Branch code or name
        client-number - Client number as seen by the bank.
        closed - When the account was closed.
        comments - Comments about the bank account.
        currency-code - Currency of the account.
        date-balance - When the balance was reported.
        iban - IBAN of the bank account.
        institution-code - Institution code of the bank.
        institution-name - Name of the bank or financial organisation.
        non-banking-institution - A flag to define if this account belong to a non-banking organisation. If set to true, it's a non-banking organisation.
        opened - When the account was opened.
        personal-account-type - Account type.
        report-code - Report code of the bank account.
        status-code - Account status at the time of the transaction processed.
        swift - SWIFT or BIC as defined in ISO 9362.
        text - A description of the bank account.

    Must have one of the following: ['account', 'iban']

    Returns:
        a MISP object representing an 'bank-account'

    """
    requires = ["account", "iban"]
    args = [
        "aba-rtn",
        "account",
        "account-name",
        "balance",
        "beneficiary",
        "beneficiary-comment",
        "branch",
        "client-number",
        "closed",
        "comments",
        "currency-code",
        "date-balance",
        "iban",
        "institution-code",
        "institution-name",
        "non-banking-institution",
        "opened",
        "personal-account-type",
        "report-code",
        "status-code",
        "swift",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|bank-account"
    obj, isNew = MISPHelper._create_obj_cached(event, "bank-account", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cookie(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cookie - function for creating MISP cookie object

    cookie = An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user's web browser. The browser may store it and send it back with the next request to the same server. Typically, it's used to tell if two requests came from the same browser — keeping a user logged-in, for example. It remembers stateful information for the stateless HTTP protocol. As defined by the Mozilla foundation.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        cookie - Full cookie
        cookie-name - Name of the cookie (if splitted)
        cookie-value - Value of the cookie (if splitted)
        expires - Expiration date/time of the cookie
        http-only - True if send only through HTTP
        path - Path defined in the cookie
        secure - True if cookie is sent over TLS
        text - A description of the cookie.
        type - Type of cookie and how it's used in this specific object.

    Returns:
        a MISP object representing an 'cookie'

    """
    requires = []
    args = [
        "cookie",
        "cookie-name",
        "cookie-value",
        "expires",
        "http-only",
        "path",
        "secure",
        "text",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cookie"
    obj, isNew = MISPHelper._create_obj_cached(event, "cookie", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_incident(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_incident - function for creating MISP incident object

    incident = Incident object template as described in STIX 2.1 Incident object and its core extension.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        criticality - Criticality of the incident
        description - Description of the incident.
        detection_method - Methods used to detect the activity.
        determination - Determination on the outcome of the incident.
        incident_type - Type of incident
        investigation_status - Current status of the incident investigation.
        name - Name of the incident.
        recoverability - Recoverability of the incident, with respect to feasibility and required time and resources.
        score - Incident score, with a name, an optional description and the numeric score value.

    Returns:
        a MISP object representing an 'incident'

    """
    requires = []
    args = [
        "criticality",
        "description",
        "detection_method",
        "determination",
        "incident_type",
        "investigation_status",
        "name",
        "recoverability",
        "score",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|incident"
    obj, isNew = MISPHelper._create_obj_cached(event, "incident", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_external_impact(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_external_impact - function for creating MISP external-impact object

    external-impact = External Impact object as described in STIX 2.1 Incident object extension.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        criticality - Criticality of the impact
        description - Additional details about the impact.
        end_time - The date and time the impact was last recorded.
        end_time_fidelity - Level of fidelity that the `end_time` is recorded in.
        impact_type - Type of impact.
        recoverability - Recoverability of this particular impact with respect to feasibility and required time and resources.
        start_time - The date and time the impact was first recorded.
        start_time_fidelity - Level of fidelity that the `start_time` is recorded in.

    Returns:
        a MISP object representing an 'external-impact'

    """
    requires = []
    args = [
        "criticality",
        "description",
        "end_time",
        "end_time_fidelity",
        "impact_type",
        "recoverability",
        "start_time",
        "start_time_fidelity",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|external-impact"
    obj, isNew = MISPHelper._create_obj_cached(event, "external-impact", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_phishing(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_phishing - function for creating MISP phishing object

    phishing = Phishing template to describe a phishing website and its analysis.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        hostname - host of the phishing website
        internal-reference - Internal reference such as ticket ID
        online - If the phishing is online and operational, by default is yes
        phishtank-detail-url - Phishtank detail URL to the reported phishing
        phishtank-id - Phishtank ID of the reported phishing
        screenshot - Screenshot of phishing site
        submission-time - When the phishing was submitted and/or reported
        takedown-request - When the phishing was requested to be taken down
        takedown-request-to - Destination email address for take-down request
        takedown-time - When the phishing was taken down
        target - Targeted organisation by the phishing
        url - Original URL of the phishing website
        url-redirect - Redirect URL of the phishing website
        verification-time - When the phishing was verified
        verified - The phishing has been verified by the team handling the phishing

    Must have one of the following: ['url']

    Returns:
        a MISP object representing an 'phishing'

    """
    requires = ["url"]
    args = [
        "hostname",
        "internal-reference",
        "online",
        "phishtank-detail-url",
        "phishtank-id",
        "screenshot",
        "submission-time",
        "takedown-request",
        "takedown-request-to",
        "takedown-time",
        "target",
        "url",
        "url-redirect",
        "verification-time",
        "verified",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|phishing"
    obj, isNew = MISPHelper._create_obj_cached(event, "phishing", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_parler_account(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_parler_account - function for creating MISP parler-account object

    parler-account = Parler account.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        account-id - Numeric id of the account.
        account-name - Name of the account.
        archive - Archive of the original parley (Internet Archive, Archive.is, etc).
        attachment - The parley file or screen capture.
        badge - Post badge.
        bio - The account bio.
        comments - The number of user comments.
        cover-photo - Comment controversy.
        followers - Number of followers.
        following - Number user is following.
        human - Account 'human' bool.
        interactions - Account interactions.
        likes - Number user likes.
        link - Original URL of the parley (supposed harmless).
        posts - Number user posts.
        profile-photo - Comment controversy.
        score - User score.
        url - Original URL of the parley, e.g. link shortener (potentially malicious).
        verified - Account 'verified' bool.

    Must have one of the following: ['account-id', 'account-name', 'archive', 'url', 'link', 'attachment']

    Returns:
        a MISP object representing an 'parler-account'

    """
    requires = ["account-id", "account-name", "archive", "url", "link", "attachment"]
    args = [
        "account-id",
        "account-name",
        "archive",
        "attachment",
        "badge",
        "bio",
        "comments",
        "cover-photo",
        "followers",
        "following",
        "human",
        "interactions",
        "likes",
        "link",
        "posts",
        "profile-photo",
        "score",
        "url",
        "verified",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|parler-account"
    obj, isNew = MISPHelper._create_obj_cached(event, "parler-account", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Table(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Table - function for creating MISP ftm-Table object

    ftm-Table = Table

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        columns - Column headings
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        csvHash - CSV alternative version checksum
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        rowCount - Number of rows
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Table'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "columns",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "csvHash",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "rowCount",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Table"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Table", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ai_chat_prompt(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ai_chat_prompt - function for creating MISP ai-chat-prompt object

    ai-chat-prompt = Object describing an AI prompt such as ChatGPT.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        act-as - Act as a specific person.
        comment - Comment associated to the AI chat prompt.
        model - AI chatbot model used for the prompt.
        prompt - Prompt text used for a specific AI chat.
        result - Result
        role - Role as defined in OpenAI or similar API.

    Must have one of the following: ['prompt']

    Returns:
        a MISP object representing an 'ai-chat-prompt'

    """
    requires = ["prompt"]
    args = ["act-as", "comment", "model", "prompt", "result", "role"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ai-chat-prompt"
    obj, isNew = MISPHelper._create_obj_cached(event, "ai-chat-prompt", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_typosquatting_finder_result(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_typosquatting_finder_result - function for creating MISP typosquatting-finder-result object

    typosquatting-finder-result = Typosquatting result

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        a-record - IPv4 address associated with A record
        aaaa-record - IPv6 address associated with AAAA record
        mx-record - Domain associated with MX record
        ns-record - Domain associated with NS record
        queried-domain - Domain name
        ratio-similarity - Similarity probability
        website-ressource-diff - Difference of website's ressources between both, research and current variations domain
        website-similarity - Similarity between website of both research and current variations domain
        website-title - Website's title of the current queried domain

    Returns:
        a MISP object representing an 'typosquatting-finder-result'

    """
    requires = []
    args = [
        "a-record",
        "aaaa-record",
        "mx-record",
        "ns-record",
        "queried-domain",
        "ratio-similarity",
        "website-ressource-diff",
        "website-similarity",
        "website-title",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|typosquatting-finder-result"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "typosquatting-finder-result", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Land(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Land - function for creating MISP ftm-Land object

    ftm-Land = Land

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        area - Area
        cadastralCode - Cadastral code
        censusBlock - Census block
        country - Country
        createDate - Record date
        currency - Currency
        description - Description
        encumbrance - An encumbrance is a right to, interest in, or legal liability on real property that does not prohibit passing title to the property but that diminishes its value.

        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        landType - Land type
        latitude - Latitude
        longitude - Longitude
        modifiedAt - Modified on
        name - Name
        notes - Notes
        previousName - Previous name
        program - Program
        propertyType - Property type
        publisher - Publishing source
        publisherUrl - Publishing source URL
        registrationNumber - Registration number
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        tenure - Tenure
        titleNumber - Title number
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Land'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "amount",
        "amountEur",
        "amountUsd",
        "area",
        "cadastralCode",
        "censusBlock",
        "country",
        "createDate",
        "currency",
        "description",
        "encumbrance",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "landType",
        "latitude",
        "longitude",
        "modifiedAt",
        "name",
        "notes",
        "previousName",
        "program",
        "propertyType",
        "publisher",
        "publisherUrl",
        "registrationNumber",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "tenure",
        "titleNumber",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Land"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Land", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_system_hive_services_drivers(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_system_hive_services_drivers - function for creating MISP regripper-system-hive-services-drivers object

    regripper-system-hive-services-drivers = Regripper Object template designed to gather information regarding the services/drivers from the system-hive.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Additional comments.
        display - Display name/information of the service or the driver.
        group - Group to which the system/driver belong to.
        image-path - Path of the service/drive
        last-write-time - Date and time when the key was last updated.
        name - name of the key
        start - When the service/driver starts or executes.
        type - Service/driver type.

    Returns:
        a MISP object representing an 'regripper-system-hive-services-drivers'

    """
    requires = []
    args = [
        "comment",
        "display",
        "group",
        "image-path",
        "last-write-time",
        "name",
        "start",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = (
        generate_uniq(requires, kwargs) + "|regripper-system-hive-services-drivers"
    )
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-system-hive-services-drivers", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_forensic_evidence(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_forensic_evidence - function for creating MISP forensic-evidence object

    forensic-evidence = An object template to describe a digital forensic evidence.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        acquisition-method - Method used for acquisition of the evidence.
        acquisition-tools - Tools used for acquisition of the evidence.
        additional-comments - Comments.
        case-number - A unique number assigned to the case for unique identification.
        evidence-number - A unique number assigned to the evidence for unique identification.
        name - Name of the evidence acquired.
        references - External references
        type - Evidence type.

    Returns:
        a MISP object representing an 'forensic-evidence'

    """
    requires = []
    args = [
        "acquisition-method",
        "acquisition-tools",
        "additional-comments",
        "case-number",
        "evidence-number",
        "name",
        "references",
        "type",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|forensic-evidence"
    obj, isNew = MISPHelper._create_obj_cached(event, "forensic-evidence", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_command(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_command - function for creating MISP command object

    command = Command functionalities related to specific commands executed by a program, whether it is malicious or not. Command-line are attached to this object for the related commands.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Description of the command functionalities
        location - Location of the command functionality
        trigger - How the commands are triggered

    Returns:
        a MISP object representing an 'command'

    """
    requires = []
    args = ["description", "location", "trigger"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|command"
    obj, isNew = MISPHelper._create_obj_cached(event, "command", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_x_header(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_x_header - function for creating MISP x-header object

    x-header = X header generic object for SMTP, HTTP or any other protocols using X headers.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        x-header-name - X header name is the value of the header key. The name is case sensitive.
        x-value - X value is the value of the specified header name.

    Must have one of the following: ['x-header-name', 'x-value']

    Returns:
        a MISP object representing an 'x-header'

    """
    requires = ["x-header-name", "x-value"]
    args = ["x-header-name", "x-value"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|x-header"
    obj, isNew = MISPHelper._create_obj_cached(event, "x-header", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Audio(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Audio - function for creating MISP ftm-Audio object

    ftm-Audio = Audio with meta-data.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        duration - Duration of the audio in ms
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        samplingRate - Sampling rate of the audio in Hz
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Audio'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "duration",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "samplingRate",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Audio"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Audio", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_diameter_attack(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_diameter_attack - function for creating MISP diameter-attack object

    diameter-attack = Attack as seen on the diameter signaling protocol supporting LTE networks.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        ApplicationId - Application-ID is used to identify for which Diameter application the message is applicable. Application-ID is a decimal representation.
        CmdCode - A decimal representation of the diameter Command Code.
        Destination-Host - Destination-Host.
        Destination-Realm - Destination-Realm.
        IdrFlags - IDR-Flags.
        Origin-Host - Origin-Host.
        Origin-Realm - Origin-Realm.
        SessionId - Session-ID.
        Username - Username (in this case, usually the IMSI).
        category - Category.
        first-seen - When the attack has been seen for the first time.
        text - A description of the attack seen.

    Must have one of the following: ['text']

    Returns:
        a MISP object representing an 'diameter-attack'

    """
    requires = ["text"]
    args = [
        "ApplicationId",
        "CmdCode",
        "Destination-Host",
        "Destination-Realm",
        "IdrFlags",
        "Origin-Host",
        "Origin-Realm",
        "SessionId",
        "Username",
        "category",
        "first-seen",
        "text",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|diameter-attack"
    obj, isNew = MISPHelper._create_obj_cached(event, "diameter-attack", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_system_hive_network_information(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_system_hive_network_information - function for creating MISP regripper-system-hive-network-information object

    regripper-system-hive-network-information = Regripper object template designed to gather network information from the system-hive.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        DHCP-IP-address - DHCP service - IP address
        DHCP-domain - Name of the DHCP domain service
        DHCP-name-server - DHCP Name server - IP address.
        DHCP-server - DHCP server - IP address.
        DHCP-subnet-mask - DHCP subnet mask - IP address.
        TCPIP-key - TCPIP key
        TCPIP-key-last-write-time - Datetime when the key was last updated.
        additional-comments - Comments.
        interface-GUID - GUID value assigned to the interface.
        interface-IPcheckingEnabled -
        interface-MediaSubType -
        interface-PnpInstanceID - Plug and Play instance ID assigned to the interface.
        interface-last-write-time - Last date and time when the interface key was updated.
        interface-name - Name of the interface.
        network-key - Registry key assigned to the network
        network-key-last-write-time - Date and time when the network key was last updated.
        network-key-path - Path of the key where the information is retrieved from.

    Returns:
        a MISP object representing an 'regripper-system-hive-network-information'

    """
    requires = []
    args = [
        "DHCP-IP-address",
        "DHCP-domain",
        "DHCP-name-server",
        "DHCP-server",
        "DHCP-subnet-mask",
        "TCPIP-key",
        "TCPIP-key-last-write-time",
        "additional-comments",
        "interface-GUID",
        "interface-IPcheckingEnabled",
        "interface-MediaSubType",
        "interface-PnpInstanceID",
        "interface-last-write-time",
        "interface-name",
        "network-key",
        "network-key-last-write-time",
        "network-key-path",
    ]

    validate_args(requires, kwargs)
    uniq_str = (
        generate_uniq(requires, kwargs) + "|regripper-system-hive-network-information"
    )
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-system-hive-network-information", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_youtube_playlist(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_youtube_playlist - function for creating MISP youtube-playlist object

    youtube-playlist = A YouTube playlist.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the playlist (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts etc.
        description - A description of the playlist.
        link - Original link to the playlist page (supposed harmless).
        playlist-id - Playlist id.
        playlist-name - Playlist name.
        url - Original URL location of the page (potentially malicious).
        video-link - Link to the video in playlist (supposed harmless).

    Must have one of the following: ['playlist-name', 'playlist-id', 'archive', 'link']

    Returns:
        a MISP object representing an 'youtube-playlist'

    """
    requires = ["playlist-name", "playlist-id", "archive", "link"]
    args = [
        "archive",
        "attachment",
        "description",
        "link",
        "playlist-id",
        "playlist-name",
        "url",
        "video-link",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|youtube-playlist"
    obj, isNew = MISPHelper._create_obj_cached(event, "youtube-playlist", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_mutex(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_mutex - function for creating MISP mutex object

    mutex = Object to describe mutual exclusion locks (mutex) as seen in memory or computer program

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Description
        name - name of the mutex
        operating-system - Operating system where the mutex has been seen

    Must have one of the following: ['name']

    Returns:
        a MISP object representing an 'mutex'

    """
    requires = ["name"]
    args = ["description", "name", "operating-system"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|mutex"
    obj, isNew = MISPHelper._create_obj_cached(event, "mutex", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_dns_record(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_dns_record - function for creating MISP dns-record object

    dns-record = A set of DNS records observed for a specific domain.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        a-record - IPv4 address associated with A record
        aaaa-record - IPv6 address associated with AAAA record
        cname-record - Domain associated with CNAME record
        mx-record - Domain associated with MX record
        ns-record - Domain associated with NS record
        ptr-record - Domain associated with PTR record
        queried-domain - Domain name
        soa-record - Domain associated with SOA record
        spf-record - IP addresses associated with SPF record
        srv-record - Domain associated with SRV record
        text - A description of the records
        txt-record - Content associated with TXT record

    Must have one of the following: ['a-record', 'aaaa-record', 'cname-record', 'mx-record', 'ns-record', 'ptr-record', 'soa-record', 'spf-record', 'srv-record', 'txt-record']

    Returns:
        a MISP object representing an 'dns-record'

    """
    requires = [
        "a-record",
        "aaaa-record",
        "cname-record",
        "mx-record",
        "ns-record",
        "ptr-record",
        "soa-record",
        "spf-record",
        "srv-record",
        "txt-record",
    ]
    args = [
        "a-record",
        "aaaa-record",
        "cname-record",
        "mx-record",
        "ns-record",
        "ptr-record",
        "queried-domain",
        "soa-record",
        "spf-record",
        "srv-record",
        "text",
        "txt-record",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|dns-record"
    obj, isNew = MISPHelper._create_obj_cached(event, "dns-record", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_vulnerability(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_vulnerability - function for creating MISP vulnerability object

    vulnerability = Vulnerability object describing a common vulnerability enumeration which can describe published, unpublished, under review or embargo vulnerability for software, equipments or hardware.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        created - First time when the vulnerability was discovered
        credit - Who reported/found the vulnerability such as an organisation, person or nickname.
        cvss-score - Score of the Common Vulnerability Scoring System (version 3).
        cvss-string - String of the Common Vulnerability Scoring System (version 3).
        description - Description of the vulnerability
        id - Vulnerability ID (generally CVE, but not necessarely). The id is not required as the object itself has an UUID and the CVE id can be update or assigned later.
        modified - Last modification date
        published - Initial publication date
        references - External references
        state - State of the vulnerability. A vulnerability can have multiple states depending of the current actions performed.
        summary - Summary of the vulnerability
        vulnerable-configuration - The vulnerable configuration is described in CPE format

    Must have one of the following: ['published', 'modified', 'references', 'vulnerable-configuration', 'summary', 'description', 'id']

    Returns:
        a MISP object representing an 'vulnerability'

    """
    requires = [
        "published",
        "modified",
        "references",
        "vulnerable-configuration",
        "summary",
        "description",
        "id",
    ]
    args = [
        "created",
        "credit",
        "cvss-score",
        "cvss-string",
        "description",
        "id",
        "modified",
        "published",
        "references",
        "state",
        "summary",
        "vulnerable-configuration",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|vulnerability"
    obj, isNew = MISPHelper._create_obj_cached(event, "vulnerability", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_twitter_account(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_twitter_account - function for creating MISP twitter-account object

    twitter-account = Twitter account.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the account (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts etc.
        bio - Displayed biography of the user.
        description - A description of the user.
        displayed-name - Displayed name.
        embedded-link - Link embedded in the user description (potentially malicious).
        embedded-safe-link - Link embedded in the user description (supposed safe).
        followers - Number of followers.
        following - Number of accounts this accounts is following.
        hashtag - Hashtag embedded in the user description.
        id - Numeric account id.
        joined-date - When the account was created
        likes - Number of likes this account has.
        link - Original link to the user (supposed harmless).
        listed - Number of lists the user is on.
        location - User description of location.
        media - Number of images and videos posted.
        name - User's screen name (without the @).
        private - User verified.
        profile-banner - A screenshot or exported user avatar.
        profile-banner-url - A link to the user's background image.
        profile-image - A screenshot or exported user avatar.
        profile-image-url - A link to the user's avatar.
        tweets - Number of tweets posted.
        twitter-followers - followers accounts of interest
        twitter-following - following accounts of interest
        url - Original URL location of the user (potentially malicious).
        verified - User verified.

    Must have one of the following: ['name', 'id', 'description', 'archive', 'link']

    Returns:
        a MISP object representing an 'twitter-account'

    """
    requires = ["name", "id", "description", "archive", "link"]
    args = [
        "archive",
        "attachment",
        "bio",
        "description",
        "displayed-name",
        "embedded-link",
        "embedded-safe-link",
        "followers",
        "following",
        "hashtag",
        "id",
        "joined-date",
        "likes",
        "link",
        "listed",
        "location",
        "media",
        "name",
        "private",
        "profile-banner",
        "profile-banner-url",
        "profile-image",
        "profile-image-url",
        "tweets",
        "twitter-followers",
        "twitter-following",
        "url",
        "verified",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|twitter-account"
    obj, isNew = MISPHelper._create_obj_cached(event, "twitter-account", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_android_app(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_android_app - function for creating MISP android-app object

    android-app = Indicators related to an Android app

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        appid - Application ID
        certificate - Android certificate
        domain - Domain used by the app
        name - Generic name of the application
        sha256 - SHA256 of the APK.

    Must have one of the following: ['appid', 'name', 'sha256']

    Returns:
        a MISP object representing an 'android-app'

    """
    requires = ["appid", "name", "sha256"]
    args = ["appid", "certificate", "domain", "name", "sha256"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|android-app"
    obj, isNew = MISPHelper._create_obj_cached(event, "android-app", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_temporal_event(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_temporal_event - function for creating MISP temporal-event object

    temporal-event = A temporal event consists of some temporal and spacial boundaries. Spacial boundaries can be physical, virtual or hybrid.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Free text description of the temporal event.
        link - Link or reference to the temporal event mentioned.
        summary - One line summary of the temporal event.
        type - Type of temporal event.

    Must have one of the following: ['summary', 'link']

    Returns:
        a MISP object representing an 'temporal-event'

    """
    requires = ["summary", "link"]
    args = ["description", "link", "summary", "type"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|temporal-event"
    obj, isNew = MISPHelper._create_obj_cached(event, "temporal-event", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_user_account(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_user_account - function for creating MISP user-account object

    user-account = User-account object, defining aspects of user identification, authentication, privileges and other relevant data points.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        account-type - Type of the account.
        can_escalate_privs - Specifies if the account has the ability to escalate privileges.
        created - Creation time of the account.
        description - A description of the user account.
        disabled - Specifies if the account is desabled.
        display-name - Display name of the account.
        expires - Expiration time of the account
        first_login - First time someone logged in to the account.
        group - UNIX group(s) the account is member of.
        group-id - Identifier of the primary group of the account, in case of a UNIX account.
        home_dir - Home directory of the UNIX account.
        is_service_account - Specifies if the account is associated with a network service.
        last_login - Last time someone logged in to the account.
        link - Original link into the account page (Supposed harmless)
        password - Password related to the username.
        password_last_changed - Last time the password has been changed.
        privileged - Specifies if the account has privileges such as root rights.
        shell - UNIX command shell of the account.
        user-avatar - A user profile picture or avatar.
        user-id - Identifier of the account.
        username - Username related to the password.

    Must have one of the following: ['password', 'username', 'user-id']

    Returns:
        a MISP object representing an 'user-account'

    """
    requires = ["password", "username", "user-id"]
    args = [
        "account-type",
        "can_escalate_privs",
        "created",
        "description",
        "disabled",
        "display-name",
        "expires",
        "first_login",
        "group",
        "group-id",
        "home_dir",
        "is_service_account",
        "last_login",
        "link",
        "password",
        "password_last_changed",
        "privileged",
        "shell",
        "user-avatar",
        "user-id",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|user-account"
    obj, isNew = MISPHelper._create_obj_cached(event, "user-account", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_passive_dns(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_passive_dns - function for creating MISP passive-dns object

    passive-dns = Passive DNS records as expressed in draft-dulaunoy-dnsop-passive-dns-cof-07. See https://tools.ietf.org/id/draft-dulaunoy-dnsop-passive-dns-cof-07.html

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        bailiwick - Best estimate of the apex of the zone where this data is authoritative
        count - How many authoritative DNS answers were received at the Passive DNS Server's collectors with exactly the given set of values as answers.
        origin - Origin of the Passive DNS response. This field is represented as a Uniform Resource Identifier (URI)
        raw_rdata - Resource records of the queried resource, in hexadecimal. *All* rdata entries at once.
        rdata - Resource records of the queried resource. Note that this field is added for *each* rdata entry in the rrset.
        rrname - Resource Record name of the queried resource.
        rrtype - Resource Record type as seen by the passive DNS.
        sensor_id - Sensor information where the record was seen
        text - Description of the passive DNS record.
        time_first - First time that the unique tuple (rrname, rrtype, rdata) has been seen by the passive DNS
        time_first_ms - Same meaning as the field 'time_first', with the only difference, that the resolution is in milliseconds since 1st of January 1970 (UTC)
        time_last - Last time that the unique tuple (rrname, rrtype, rdata) record has been seen by the passive DNS
        time_last_ms - Same meaning as the field 'time_last', with the only difference, that the resolution is in milliseconds since 1st of January 1970 (UTC)
        zone_time_first - First time that the unique tuple (rrname, rrtype, rdata) record has been seen via master file import
        zone_time_last - Last time that the unique tuple (rrname, rrtype, rdata) record has been seen via master file import.

    Returns:
        a MISP object representing an 'passive-dns'

    """
    requires = []
    args = [
        "bailiwick",
        "count",
        "origin",
        "raw_rdata",
        "rdata",
        "rrname",
        "rrtype",
        "sensor_id",
        "text",
        "time_first",
        "time_first_ms",
        "time_last",
        "time_last_ms",
        "zone_time_first",
        "zone_time_last",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|passive-dns"
    obj, isNew = MISPHelper._create_obj_cached(event, "passive-dns", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cap_info(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cap_info - function for creating MISP cap-info object

    cap-info = Common Alerting Protocol Version (CAP) info object

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        audience - The text describing the intended audience of the alert message.
        category - The code denoting the category of the subject event of the alert message.
        certainty - The code denoting the certainty of the subject event of the alert message.  For backward compatibility with CAP 1.0, the deprecated value of “Very Likely” SHOULD be treated as equivalent to “Likely”.
        contact - The text describing the contact for follow-up and confirmation of the alert message.
        description - The text describing the subject event of the alert message.
        effective - The effective time of the information of the alert message.
        event - The text denoting the type of the subject event of the alert message.
        eventCode - A system-specific code identifying the event type of the alert message.
        expires - The expiry time of the information of the alert message.
        headline - The text headline of the alert message.
        instruction - The text describing the recommended action to be taken by recipients of the alert message.
        language - The code denoting the language of the info sub-element of the alert message.
        onset - The expected time of the beginning of the subject event of the alert message.
        parameter - A system-specific additional parameter associated with the alert message.
        responseType - The code denoting the type of action recommended for the target audience.
        senderName - The text naming the originator of the alert message.
        severity - The code denoting the severity of the subject event of the alert message.
        urgency - The code denoting the urgency of the subject event of the alert message.
        web - The identifier of the hyperlink associating additional information with the alert message.

    Must have one of the following: ['category']

    Returns:
        a MISP object representing an 'cap-info'

    """
    requires = ["category"]
    args = [
        "audience",
        "category",
        "certainty",
        "contact",
        "description",
        "effective",
        "event",
        "eventCode",
        "expires",
        "headline",
        "instruction",
        "language",
        "onset",
        "parameter",
        "responseType",
        "senderName",
        "severity",
        "urgency",
        "web",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cap-info"
    obj, isNew = MISPHelper._create_obj_cached(event, "cap-info", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ja3(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ja3 - function for creating MISP ja3 object

    ja3 = JA3 is a new technique for creating SSL client fingerprints that are easy to produce and can be easily shared for threat intelligence. Fingerprints are composed of Client Hello packet; SSL Version, Accepted Ciphers, List of Extensions, Elliptic Curves, and Elliptic Curve Formats. https://github.com/salesforce/ja3

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Type of detected software ie software, malware
        first-seen - First seen of the SSL/TLS handshake
        ip-dst - Destination IP address
        ip-src - Source IP Address
        ja3-fingerprint-md5 - Hash identifying source
        last-seen - Last seen of the SSL/TLS handshake

    Returns:
        a MISP object representing an 'ja3'

    """
    requires = []
    args = [
        "description",
        "first-seen",
        "ip-dst",
        "ip-src",
        "ja3-fingerprint-md5",
        "last-seen",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ja3"
    obj, isNew = MISPHelper._create_obj_cached(event, "ja3", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_lnk(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_lnk - function for creating MISP lnk object

    lnk = LNK object describing a Windows LNK binary file (aka Windows shortcut)

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        birth-droid-file-identifier - Birth droid volume identifier (UUIDv1 where MAC can be extracted)
        birth-droid-volume-identifier - Droid volume identifier
        droid-file-identifier - Droid file identifier (UUIDv1 where MAC can be extracted)
        droid-volume-identifier - Droid volume identifier
        entropy - Entropy of the whole file
        filename - Filename on disk
        fullpath - Complete path of the LNK filename including the filename
        lnk-access-time - Access time of the LNK
        lnk-command-line-arguments - LNK command line arguments
        lnk-creation-time - Creation time of the LNK
        lnk-description - LNK description
        lnk-drive-serial-number - Drive serial number
        lnk-drive-type - Drive type
        lnk-file-attribute-flags - File attribute flags
        lnk-file-size - Size of the target file, in bytes
        lnk-hot-key-value - Hot Key value
        lnk-icon-index - Icon index
        lnk-local-path - Local path
        lnk-modification-time - Modification time of the LNK
        lnk-relative-path - Relative path
        lnk-show-window-value - Show Window value
        lnk-volume-label - Volume label
        lnk-working-directory - LNK working path
        machine-identifier - Machine identifier
        malware-sample - The LNK file itself (binary)
        md5 - [Insecure] MD5 hash (128 bits)
        path - Path of the LNK filename complete or partial
        pattern-in-file - Pattern that can be found in the file
        sha1 - [Insecure] Secure Hash Algorithm 1 (160 bits)
        sha224 - Secure Hash Algorithm 2 (224 bits)
        sha256 - Secure Hash Algorithm 2 (256 bits)
        sha384 - Secure Hash Algorithm 2 (384 bits)
        sha512 - Secure Hash Algorithm 2 (512 bits)
        sha512/224 - Secure Hash Algorithm 2 (224 bits)
        sha512/256 - Secure Hash Algorithm 2 (256 bits)
        size-in-bytes - Size of the LNK file, in bytes
        ssdeep - Fuzzy hash using context triggered piecewise hashes (CTPH)
        state - State of the LNK file
        text - Free text value to attach to the file
        tlsh - Fuzzy hash by Trend Micro: Locality Sensitive Hash

    Must have one of the following: ['filename', 'ssdeep', 'md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'sha512/224', 'sha512/256']

    Returns:
        a MISP object representing an 'lnk'

    """
    requires = [
        "filename",
        "ssdeep",
        "md5",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha512/224",
        "sha512/256",
    ]
    args = [
        "birth-droid-file-identifier",
        "birth-droid-volume-identifier",
        "droid-file-identifier",
        "droid-volume-identifier",
        "entropy",
        "filename",
        "fullpath",
        "lnk-access-time",
        "lnk-command-line-arguments",
        "lnk-creation-time",
        "lnk-description",
        "lnk-drive-serial-number",
        "lnk-drive-type",
        "lnk-file-attribute-flags",
        "lnk-file-size",
        "lnk-hot-key-value",
        "lnk-icon-index",
        "lnk-local-path",
        "lnk-modification-time",
        "lnk-relative-path",
        "lnk-show-window-value",
        "lnk-volume-label",
        "lnk-working-directory",
        "machine-identifier",
        "malware-sample",
        "md5",
        "path",
        "pattern-in-file",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha512/224",
        "sha512/256",
        "size-in-bytes",
        "ssdeep",
        "state",
        "text",
        "tlsh",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|lnk"
    obj, isNew = MISPHelper._create_obj_cached(event, "lnk", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ais_info(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ais_info - function for creating MISP ais-info object

    ais-info = Automated Indicator Sharing (AIS) Information Source Markings.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        administrative-area - AIS Administrative Area represented using ISO-3166-2.
        country - AIS Country represented using ISO-3166-1_alpha-2.
        industry - AIS IndustryType.
        organisation - AIS Organisation Name.

    Must have one of the following: ['organisation', 'administrative-area', 'industry', 'country']

    Returns:
        a MISP object representing an 'ais-info'

    """
    requires = ["organisation", "administrative-area", "industry", "country"]
    args = ["administrative-area", "country", "industry", "organisation"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ais-info"
    obj, isNew = MISPHelper._create_obj_cached(event, "ais-info", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_social_media_group(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_social_media_group - function for creating MISP social-media-group object

    social-media-group = Social media group object template describing a public or private group or channel.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        administrator - A user account who is an owner or admin of the group.
        archive - Archive of the original group (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts, group members, etc.
        description - A description of the group, channel or community.
        embedded-link - Link embedded in the group description (potentially malicious).
        embedded-safe-link - Link embedded in the group description (supposed safe).
        group-alias - Aliases of group, channel or community.
        group-name - The name of the group, channel or community.
        hashtag - Hashtag used to identify or promote the group.
        link - Original link into the group (supposed harmless).
        person-name - A person who is a member of the group.
        platform - The social media platform used.
        url - Original URL location of the group (potentially malicious).
        username - A user account who is a member of the group.

    Must have one of the following: ['group-name', 'group-alias', 'archive', 'description']

    Returns:
        a MISP object representing an 'social-media-group'

    """
    requires = ["group-name", "group-alias", "archive", "description"]
    args = [
        "administrator",
        "archive",
        "attachment",
        "description",
        "embedded-link",
        "embedded-safe-link",
        "group-alias",
        "group-name",
        "hashtag",
        "link",
        "person-name",
        "platform",
        "url",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|social-media-group"
    obj, isNew = MISPHelper._create_obj_cached(event, "social-media-group", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_system_hive_general_configuration(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_system_hive_general_configuration - function for creating MISP regripper-system-hive-general-configuration object

    regripper-system-hive-general-configuration = Regripper Object template designed to present general system properties extracted from the system-hive.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comment - Additional comments.
        computer-name - name of the computer under analysis
        fDenyTSConnections: - Specifies whether remote connections are enabled or disabled on the system.
        last-write-time - Date and time when the key was last updated.
        shutdown-time - Date and time when the system was shutdown.
        timezone-bias - Offset in minutes from UTC. Offset added to the local time to get a UTC value.
        timezone-daylight-bias - value in minutes to be added to the value of timezone-bias to generate the bias used during daylight time.
        timezone-daylight-date - Daylight date - daylight saving months
        timezone-daylight-name - Timezone name used during daylight saving months.
        timezone-last-write-time - Date and time when the timezone key was last updated.
        timezone-standard-bias - value in minutes to be added to the value of timezone-bias to generate the bias used during standard time.
        timezone-standard-date - Standard date - non daylight saving months
        timezone-standard-name - Timezone standard name used during non-daylight saving months.

    Returns:
        a MISP object representing an 'regripper-system-hive-general-configuration'

    """
    requires = []
    args = [
        "comment",
        "computer-name",
        "fDenyTSConnections:",
        "last-write-time",
        "shutdown-time",
        "timezone-bias",
        "timezone-daylight-bias",
        "timezone-daylight-date",
        "timezone-daylight-name",
        "timezone-last-write-time",
        "timezone-standard-bias",
        "timezone-standard-date",
        "timezone-standard-name",
    ]

    validate_args(requires, kwargs)
    uniq_str = (
        generate_uniq(requires, kwargs) + "|regripper-system-hive-general-configuration"
    )
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-system-hive-general-configuration", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_stock(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_stock - function for creating MISP stock object

    stock = Object to describe stock market

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        bloomberg-exchange-code - Bloomberg Exchange Code
        country - Country
        currency - Currency
        exchange - Exchange where the stock is traded (Google code)
        high-price - Highest price seen
        iso-mic - ISO MIC
        low-price - Lowest price seen
        symbol - Symbol of the stock

    Must have one of the following: ['symbol']

    Returns:
        a MISP object representing an 'stock'

    """
    requires = ["symbol"]
    args = [
        "bloomberg-exchange-code",
        "country",
        "currency",
        "exchange",
        "high-price",
        "iso-mic",
        "low-price",
        "symbol",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|stock"
    obj, isNew = MISPHelper._create_obj_cached(event, "stock", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_pgp_meta(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_pgp_meta - function for creating MISP pgp-meta object

    pgp-meta = Metadata extracted from a PGP keyblock, message or signature

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        key-id - Key ID in hexadecimal
        user-id-email - User ID packet, email address of the key holder (UTF-8 text)
        user-id-name - User ID packet, name of the key holder

    Returns:
        a MISP object representing an 'pgp-meta'

    """
    requires = []
    args = ["key-id", "user-id-email", "user-id-name"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|pgp-meta"
    obj, isNew = MISPHelper._create_obj_cached(event, "pgp-meta", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Message(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Message - function for creating MISP ftm-Message object

    ftm-Message = Message

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        bodyHtml - HTML
        bodyText - Text
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        endDate - End date
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        inReplyTo - Message ID of the preceding message in the thread
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        metadata - Metadata
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        sourceUrl - Source link
        startDate - Start date
        subject - Subject
        summary - Summary
        threadTopic - Thread topic
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Message'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "bodyHtml",
        "bodyText",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "endDate",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "inReplyTo",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "metadata",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "sourceUrl",
        "startDate",
        "subject",
        "summary",
        "threadTopic",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Message"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Message", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_scheduled_event(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_scheduled_event - function for creating MISP scheduled-event object

    scheduled-event = Event object template describing a gathering of individuals in meatspace.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Postal address of the event.
        administrator - A user account who is an owner or admin of the event.
        archive - Archive of the original event (Internet Archive, Archive.is, etc).
        attachment - A screen capture or other attachment relevant to the event.
        e-mail - Email address of the event contact.
        embedded-link - Link embedded in the event description (potentially malicious).
        embedded-safe-link - Link embedded in the event description (supposed safe).
        event-alias - Aliases of event.
        event-listing - Social media and other platforms on which the event is advertised.
        event-name - The name of the event.
        fax-number - Fax number of the event contact.
        hashtag - Hashtag used to identify or promote the event.
        link - Original link into the event (supposed harmless).
        person-name - A person who is going to the event.
        phone-number - Phone number of the event contact.
        scheduled-date - Initial creation of the microblog post
        url - Original URL location of the event (potentially malicious).
        username - A user account who is going to the event.

    Must have one of the following: ['event-name', 'event-alias', 'archive', 'attachment']

    Returns:
        a MISP object representing an 'scheduled-event'

    """
    requires = ["event-name", "event-alias", "archive", "attachment"]
    args = [
        "address",
        "administrator",
        "archive",
        "attachment",
        "e-mail",
        "embedded-link",
        "embedded-safe-link",
        "event-alias",
        "event-listing",
        "event-name",
        "fax-number",
        "hashtag",
        "link",
        "person-name",
        "phone-number",
        "scheduled-date",
        "url",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|scheduled-event"
    obj, isNew = MISPHelper._create_obj_cached(event, "scheduled-event", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_timestamp(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_timestamp - function for creating MISP timestamp object

    timestamp = A generic timestamp object to represent time including first time and last time seen. Relationship will then define the kind of time relationship.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        first-seen - First time that the linked object or attribute has been seen.
        last-seen - First time that the linked object or attribute has been seen.
        precision - Timestamp precision represents the precision given to first_seen and/or last_seen in this object.
        text - Description of the time object.

    Must have one of the following: ['first-seen', 'last-seen']

    Returns:
        a MISP object representing an 'timestamp'

    """
    requires = ["first-seen", "last-seen"]
    args = ["first-seen", "last-seen", "precision", "text"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|timestamp"
    obj, isNew = MISPHelper._create_obj_cached(event, "timestamp", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_infrastructure(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_infrastructure - function for creating MISP infrastructure object

    infrastructure = The Infrastructure object represents a type of TTP and describes any systems, software services and any associated physical or virtual resources intended to support some purpose (e.g., C2 servers used as part of an attack, device or server that are part of defense, database servers targeted by an attack, etc.). While elements of an attack can be represented by other objects, the Infrastructure object represents a named group of related data that constitutes the infrastructure. STIX 2.1 - 4.8

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alias - Alternative names used to identify this Infrastructure.
        description - A description that provides more details and context about the Infrastructure, potentially including its purpose, how it is being used, how it relates to other intelligence activities captured in related objects, and its key characteristics.
        infrastructure_type - The type of infrastructure being described.  The values for this property SHOULD come from the infrastructure-type-ov open vocabulary.
        kill_chain_phases - The list of Kill Chain Phases for which this Infrastructure is used.
        name - A name or characterizing text used to identify the Infrastructure.

    Must have one of the following: ['name']

    Returns:
        a MISP object representing an 'infrastructure'

    """
    requires = ["name"]
    args = ["alias", "description", "infrastructure_type", "kill_chain_phases", "name"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|infrastructure"
    obj, isNew = MISPHelper._create_obj_cached(event, "infrastructure", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_language_content(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_language_content - function for creating MISP language-content object

    language-content = The Language Content object represents text content for objects represented in languages other than that of the original object. Language content may be a translation of the original object by a third-party, a first-source translation by the original publisher, or additional official language content provided at the time of creation. STIX 2.1 ref 7.1

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        content - The contents property contains the actual Language Content (translation).
        language - RFC 5646 language codes for which language content is being provided.

    Returns:
        a MISP object representing an 'language-content'

    """
    requires = []
    args = ["content", "language"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|language-content"
    obj, isNew = MISPHelper._create_obj_cached(event, "language-content", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_query(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_query - function for creating MISP query object

    query = An object describing a query, along with its format.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        author - Author of the query
        comment - A description of the query rule.
        format - Format of the query.
        query - Query rule in the format specified in the format field.
        query-rule-name - Query rule name.

    Must have one of the following: ['query']

    Returns:
        a MISP object representing an 'query'

    """
    requires = ["query"]
    args = ["author", "comment", "format", "query", "query-rule-name"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|query"
    obj, isNew = MISPHelper._create_obj_cached(event, "query", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_leaked_document(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_leaked_document - function for creating MISP leaked-document object

    leaked-document = Object describing a leaked document.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the original document (Internet Archive, Archive.is, etc).
        attachment - The leaked document file.
        document-name - Title of the document.
        document-text - Raw text of document
        document-type - The type of document (not the file type).
        first-seen - When the document has been accessible or seen for the first time.
        last-seen - When the document has been accessible or seen for the last time.
        link - Original link into the document (Supposed harmless)
        objective - Reason for leaking the document.
        origin - Original source of leaked document.
        purpose-of-document - What the document is used for.
        url - Original URL location of the document (potentially malicious)

    Must have one of the following: ['document-name', 'attachment', 'document-text']

    Returns:
        a MISP object representing an 'leaked-document'

    """
    requires = ["document-name", "attachment", "document-text"]
    args = [
        "archive",
        "attachment",
        "document-name",
        "document-text",
        "document-type",
        "first-seen",
        "last-seen",
        "link",
        "objective",
        "origin",
        "purpose-of-document",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|leaked-document"
    obj, isNew = MISPHelper._create_obj_cached(event, "leaked-document", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_employee(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_employee - function for creating MISP employee object

    employee = An employee and related data points

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        business-unit - the organizational business unit associated with the employee
        email-address - Employee Email Address
        employee-type - type of employee
        first-name - Employee's first name
        full-name - Employee's full name
        last-name - Employee's last name
        primary-asset - Asset tag of the primary asset assigned to employee
        text - A description of the person or identity.
        userid - EMployee user identification

    Returns:
        a MISP object representing an 'employee'

    """
    requires = []
    args = [
        "business-unit",
        "email-address",
        "employee-type",
        "first-name",
        "full-name",
        "last-name",
        "primary-asset",
        "text",
        "userid",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|employee"
    obj, isNew = MISPHelper._create_obj_cached(event, "employee", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_BankAccount(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_BankAccount - function for creating MISP ftm-BankAccount object

    ftm-BankAccount = An account held at a bank and controlled by an owner. This may also be used to describe more complex arrangements like correspondent bank settlement accounts.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        accountNumber - Account Number
        accountType - Account Type
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        balance - Balance
        bankAddress - Bank Address
        bankName - Bank Name
        bic - Bank Identifier Code
        country - Country
        currency - Currency
        description - Description
        iban - IBAN
        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        modifiedAt - Modified on
        name - Name
        notes - Notes
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-BankAccount'

    """
    requires = []
    args = [
        "accountNumber",
        "accountType",
        "address",
        "alephUrl",
        "alias",
        "amount",
        "amountEur",
        "amountUsd",
        "balance",
        "bankAddress",
        "bankName",
        "bic",
        "country",
        "currency",
        "description",
        "iban",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "modifiedAt",
        "name",
        "notes",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-BankAccount"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-BankAccount", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_facebook_account(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_facebook_account - function for creating MISP facebook-account object

    facebook-account = Facebook account.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        account-id - Account id.
        account-name - Account name.
        archive - Archive of the account (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts etc.
        description - A description of the user.
        link - Original link to the page (supposed harmless).
        url - Original URL location of the page (potentially malicious).
        user-avatar - A user profile picture or avatar.

    Must have one of the following: ['account-name', 'account-id', 'description', 'archive', 'link']

    Returns:
        a MISP object representing an 'facebook-account'

    """
    requires = ["account-name", "account-id", "description", "archive", "link"]
    args = [
        "account-id",
        "account-name",
        "archive",
        "attachment",
        "description",
        "link",
        "url",
        "user-avatar",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|facebook-account"
    obj, isNew = MISPHelper._create_obj_cached(event, "facebook-account", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Page(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Page - function for creating MISP ftm-Page object

    ftm-Page = Page

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        bodyText - Text
        detectedLanguage - Auto-detected language
        index - Index
        indexText - Index text

    Returns:
        a MISP object representing an 'ftm-Page'

    """
    requires = []
    args = ["bodyText", "detectedLanguage", "index", "indexText"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Page"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Page", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_impersonation(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_impersonation - function for creating MISP impersonation object

    impersonation = Represent an impersonating account

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        account-name - Name of the impersonating account
        account-url - url of the impersonating account
        impersonated-account-name - Name of the impersonated account
        impersonated-account-url - url of the impersonated account
        objective - Objective of the impersonation
        real-name - Real name of the impersonated person or entity
        type - Type of the account
        type-of-account - Type of the impersonated account

    Returns:
        a MISP object representing an 'impersonation'

    """
    requires = []
    args = [
        "account-name",
        "account-url",
        "impersonated-account-name",
        "impersonated-account-url",
        "objective",
        "real-name",
        "type",
        "type-of-account",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|impersonation"
    obj, isNew = MISPHelper._create_obj_cached(event, "impersonation", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_intelmq_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_intelmq_report - function for creating MISP intelmq_report object

    intelmq_report = IntelMQ Report

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        extra - All anecdotal information of the report, which cannot be parsed into the data harmonization elements. E.g. subject of mails, etc. This is data is not automatically propagated to the events.
        feed.accuracy - A float between 0 and 100 that represents how accurate the data in the feed is
        feed.code - Code name for the feed, e.g. DFGS, HSDAG etc.
        feed.documentation - A URL or hint where to find the documentation of this feed.
        feed.name - Name for the feed, usually found in collector bot configuration.
        feed.provider - Name for the provider of the feed, usually found in collector bot configuration.
        feed.url - The URL of a given abuse feed, where applicable
        raw - The original raw and unparsed data encoded in base64.
        rtir_id - Request Tracker Incident Response ticket id.
        time.observation - The time the collector of the local instance processed (observed) the event.

    Returns:
        a MISP object representing an 'intelmq_report'

    """
    requires = []
    args = [
        "extra",
        "feed.accuracy",
        "feed.code",
        "feed.documentation",
        "feed.name",
        "feed.provider",
        "feed.url",
        "raw",
        "rtir_id",
        "time.observation",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|intelmq_report"
    obj, isNew = MISPHelper._create_obj_cached(event, "intelmq_report", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_meme_image(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_meme_image - function for creating MISP meme-image object

    meme-image = Object describing a meme (image).

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        5Ds-of-propaganda - 5 D's of propaganda are tactics of rebuttal used to defend against criticism and adversarial narratives.
        a/b-test - A flag to define if this meme is part of an a/b test. If set to true, it is part of an a/b test set.
        archive - Archive of the original document (Internet Archive, Archive.is, etc).
        attachment - The image file.
        crosspost - Safe site where the meme has been posted.
        crosspost-unsafe - Unsafe site where the meme has been posted.
        document-text - Raw text of meme
        first-seen - When the meme has been accessible or seen for the first time.
        last-seen - When the meme has been accessible or seen for the last time.
        link - Original link into the meme (Supposed harmless)
        meme-reference - A link to know-your-meme or similar reference material.
        objective - Objective of the meme.
        url - Original URL location of the meme (potentially malicious)
        username - Username who posted the meme.

    Must have one of the following: ['attachment', 'archive', 'document-text']

    Returns:
        a MISP object representing an 'meme-image'

    """
    requires = ["attachment", "archive", "document-text"]
    args = [
        "5Ds-of-propaganda",
        "a/b-test",
        "archive",
        "attachment",
        "crosspost",
        "crosspost-unsafe",
        "document-text",
        "first-seen",
        "last-seen",
        "link",
        "meme-reference",
        "objective",
        "url",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|meme-image"
    obj, isNew = MISPHelper._create_obj_cached(event, "meme-image", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_cortex_taxonomy(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_cortex_taxonomy - function for creating MISP cortex-taxonomy object

    cortex-taxonomy = Cortex object describing a Cortex Taxonomy (or mini report)

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        cortex_url - URL to the Cortex job
        level - Cortex Taxonomy Level
        namespace - Cortex Taxonomy Namespace
        predicate - Cortex Taxonomy Predicate
        value - Cortex Taxonomy Value

    Returns:
        a MISP object representing an 'cortex-taxonomy'

    """
    requires = []
    args = ["cortex_url", "level", "namespace", "predicate", "value"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|cortex-taxonomy"
    obj, isNew = MISPHelper._create_obj_cached(event, "cortex-taxonomy", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ja3s(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ja3s - function for creating MISP ja3s object

    ja3s = JA3S is JA3 for the Server side of the SSL/TLS communication and fingerprints how servers respond to particular clients. JA3S fingerprints are composed of Server Hello packet; SSL Version, Cipher, SSLExtensions. https://github.com/salesforce/ja3

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Type of detected software ie software, malware, c&c
        domain - Destination domain
        first-seen - First seen of the SSL/TLS handshake
        hostname - Destination hostname
        ip-dst - Destination IP address
        ip-src - Source IP Address
        ja3-fingerprint-md5 - Hash identifying client
        ja3s-fingerprint-md5 - Hash identifying server
        last-seen - Last seen of the SSL/TLS handshake

    Returns:
        a MISP object representing an 'ja3s'

    """
    requires = []
    args = [
        "description",
        "domain",
        "first-seen",
        "hostname",
        "ip-dst",
        "ip-src",
        "ja3-fingerprint-md5",
        "ja3s-fingerprint-md5",
        "last-seen",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ja3s"
    obj, isNew = MISPHelper._create_obj_cached(event, "ja3s", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_youtube_channel(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_youtube_channel - function for creating MISP youtube-channel object

    youtube-channel = A YouTube channel.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        about - About page of the channel.
        archive - Archive of the channel (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts etc.
        channel-avatar - A screen capture or exported channel avatar.
        channel-banner - A screen capture or exported channel header.
        channel-id - Channel id.
        channel-name - Channel name.
        description - A description of the channel.
        featured-channel - Featured channel names.
        link - Original link to the channel page (supposed harmless).
        url - Original URL location of the page (potentially malicious).

    Must have one of the following: ['channel-name', 'channel-id', 'archive', 'link']

    Returns:
        a MISP object representing an 'youtube-channel'

    """
    requires = ["channel-name", "channel-id", "archive", "link"]
    args = [
        "about",
        "archive",
        "attachment",
        "channel-avatar",
        "channel-banner",
        "channel-id",
        "channel-name",
        "description",
        "featured-channel",
        "link",
        "url",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|youtube-channel"
    obj, isNew = MISPHelper._create_obj_cached(event, "youtube-channel", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_original_imported_file(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_original_imported_file - function for creating MISP original-imported-file object

    original-imported-file = Object describing the original file used to import data in MISP.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        format - Format of data imported.
        imported-sample - The original imported file itself (binary).
        uri - URI related to the imported file.

    Must have one of the following: ['imported-sample', 'format']

    Returns:
        a MISP object representing an 'original-imported-file'

    """
    requires = ["imported-sample", "format"]
    args = ["format", "imported-sample", "uri"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|original-imported-file"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "original-imported-file", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Family(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Family - function for creating MISP ftm-Family object

    ftm-Family = Family relationship between two people

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        relationship - Nature of the relationship, from the person's perspective eg. 'mother', where 'relative' is mother of 'person'.
        retrievedAt - Retrieved on
        sourceUrl - Source URL
        startDate - Start date
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Family'

    """
    requires = []
    args = [
        "alephUrl",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "relationship",
        "retrievedAt",
        "sourceUrl",
        "startDate",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Family"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Family", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_tsk_chats(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_tsk_chats - function for creating MISP tsk-chats object

    tsk-chats = An Object Template to gather information from evidential or interesting exchange of messages identified during a digital forensic investigation.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        Source - Source of the message.(Contact details)
        additional-comments - Comments.
        app-used - Application used to send the message.
        attachments - External references
        datetime-received - date and time when the message was received.
        datetime-sent - date and the time when the message was sent.
        destination - Destination of the message.(Contact details)
        message - Message exchanged.
        message-type - the type of message extracted from the forensic-evidence.
        subject - Subject of the message if any.

    Returns:
        a MISP object representing an 'tsk-chats'

    """
    requires = []
    args = [
        "Source",
        "additional-comments",
        "app-used",
        "attachments",
        "datetime-received",
        "datetime-sent",
        "destination",
        "message",
        "message-type",
        "subject",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|tsk-chats"
    obj, isNew = MISPHelper._create_obj_cached(event, "tsk-chats", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_authentication_failure_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_authentication_failure_report - function for creating MISP authentication-failure-report object

    authentication-failure-report = Authentication Failure Report

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        ip-dst - Destination IP.
        ip-src - IP address originating the authentication failure.
        total - the number of authentication failures reported.
        type - the type of authentication failure.
        username - the username used.

    Must have one of the following: ['ip-src', 'ip-dst', 'username']

    Returns:
        a MISP object representing an 'authentication-failure-report'

    """
    requires = ["ip-src", "ip-dst", "username"]
    args = ["ip-dst", "ip-src", "total", "type", "username"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|authentication-failure-report"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "authentication-failure-report", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Ownership(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Ownership - function for creating MISP ftm-Ownership object

    ftm-Ownership = Ownership

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        legalBasis - Legal basis
        modifiedAt - Modified on
        ownershipType - Type of ownership
        percentage - Percentage held
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        role - Role
        sharesCount - Number of shares
        sharesCurrency - Currency of shares
        sharesType - Type of shares
        sharesValue - Value of shares
        sourceUrl - Source URL
        startDate - Start date
        status - Status
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Ownership'

    """
    requires = []
    args = [
        "alephUrl",
        "date",
        "description",
        "endDate",
        "indexText",
        "legalBasis",
        "modifiedAt",
        "ownershipType",
        "percentage",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "role",
        "sharesCount",
        "sharesCurrency",
        "sharesType",
        "sharesValue",
        "sourceUrl",
        "startDate",
        "status",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Ownership"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Ownership", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_gitlab_user(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_gitlab_user - function for creating MISP gitlab-user object

    gitlab-user = GitLab user. Gitlab.com user or self-hosted GitLab instance

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        avatar_url - Avatar url of the GitLab User
        id - GitLab User id
        name - Complete Name of the GitLab User Id
        state - State of the GitLab User
        username - Username of the GitLab User
        web_url - Profile url of the GitLab User

    Must have one of the following: ['username']

    Returns:
        a MISP object representing an 'gitlab-user'

    """
    requires = ["username"]
    args = ["avatar_url", "id", "name", "state", "username", "web_url"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|gitlab-user"
    obj, isNew = MISPHelper._create_obj_cached(event, "gitlab-user", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_event(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_event - function for creating MISP event object

    event = Event object as described in STIX 2.1 Incident object extension.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - Description of the event.
        end_time - The date and time the event was last recorded.
        end_time_fidelity - Level of fidelity that the `end_time` is recorded in.
        event_type - Type of event.
        goal - The assumed objective of the event.
        name - Name of the event.
        start_time - The date and time the event was first recorded.
        start_time_fidelity - Level of fidelity that the `start_time` is recorded in.
        status - Current status of the event.

    Returns:
        a MISP object representing an 'event'

    """
    requires = []
    args = [
        "description",
        "end_time",
        "end_time_fidelity",
        "event_type",
        "goal",
        "name",
        "start_time",
        "start_time_fidelity",
        "status",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|event"
    obj, isNew = MISPHelper._create_obj_cached(event, "event", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_CourtCase(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_CourtCase - function for creating MISP ftm-CourtCase object

    ftm-CourtCase = Court case

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        caseNumber - Case number
        category - Category
        closeDate - Close date
        country - Country
        court - Court
        description - Description
        fileDate - File date
        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        modifiedAt - Modified on
        name - Name
        notes - Notes
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        status - Status
        summary - Summary
        topics - Topics
        type - Type
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-CourtCase'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "caseNumber",
        "category",
        "closeDate",
        "country",
        "court",
        "description",
        "fileDate",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "modifiedAt",
        "name",
        "notes",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "status",
        "summary",
        "topics",
        "type",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-CourtCase"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-CourtCase", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_UnknownLink(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_UnknownLink - function for creating MISP ftm-UnknownLink object

    ftm-UnknownLink = Unknown Link

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        role - Role
        sourceUrl - Source URL
        startDate - Start date
        status - Status
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-UnknownLink'

    """
    requires = []
    args = [
        "alephUrl",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "role",
        "sourceUrl",
        "startDate",
        "status",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-UnknownLink"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-UnknownLink", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Membership(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Membership - function for creating MISP ftm-Membership object

    ftm-Membership = Membership

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        recordId - Record ID
        retrievedAt - Retrieved on
        role - Role
        sourceUrl - Source URL
        startDate - Start date
        status - Status
        summary - Summary

    Returns:
        a MISP object representing an 'ftm-Membership'

    """
    requires = []
    args = [
        "alephUrl",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "publisher",
        "publisherUrl",
        "recordId",
        "retrievedAt",
        "role",
        "sourceUrl",
        "startDate",
        "status",
        "summary",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Membership"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Membership", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_security_playbook(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_security_playbook - function for creating MISP security-playbook object

    security-playbook = The security-playbook object provides meta-information and allows managing, storing, and sharing cybersecurity playbooks and orchestration workflows.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        description - An explanation, details, and more context about what this playbook does and tries to accomplish.
        labels - Labels for this playbook (e.g., adversary persona names, associated groups, malware family/variant/name that this playbook is related to). Another option is to use MISP tags, taxonomies, and galaxies.
        organization-type - The type of organization that the playbook is intended for. This can be an industry sector. Another option is to use MISP tags, taxonomies, and galaxies.
        playbook-abstraction - The playbook’s level of abstraction (with regards to consumption).
        playbook-base64 - The entire playbook file/document encoded in base64.
        playbook-creation-time - The date and time at which the playbook was originally created.
        playbook-creator - The entity that created the playbook. It can be a natural person or an organization. It may be represented using a unique identifier that identifies the creator.
        playbook-file - The entire playbook file/document in its native format (e.g., CACAO JSON or BPMN).
        playbook-id - A value that (uniquely) identifies the playbook. If the playbook itself embeds an identifier then the playbook-id SHOULD use the same identifier (value) for correlation purposes.
        playbook-impact - From 0 to 100, a value representing the impact the playbook has on the organization. A value of 0 means specifically undefined. Impact values range from 1, the lowest impact, to a value of 100, the highest. For example, a purely investigative playbook that is non-invasive could have a low impact value of 1. In contrast, a playbook that performs changes such as adding rules into a firewall should have a higher impact value.
        playbook-modification-time - The date and time at which the playbook was last modified.
        playbook-priority - From 0 to 100, a value representing the priority of this playbook relative to other defined playbooks. A value of 0 means specifically undefined. Priority values range from 1, the highest priority, to a value of 100, the lowest.
        playbook-severity - From 0 to 100, a value representing the seriousness of the conditions that this playbook addresses. A value of 0 means specifically undefined. Severity values range from 1, the lowest severity, to a value of 100, the highest.
        playbook-standard - The standard/format/notation the playbook conforms to (e.g., CACAO, BPMN).
        playbook-type - The security-related functions the playbook supports. A playbook may account for multiple types (e.g., detection and investigation). The listed options are based on the CACAO standard and NIST SP 800-61 rev2. Another option is to use MISP tags, taxonomies, and galaxies.
        playbook-valid-from - The date and time from which the playbook is considered valid and the steps that it contains can be executed.
        playbook-valid-until - The date and time from which the playbook should no longer be considered a valid playbook to be executed.
        revoked - A boolean that identifies if the playbook is no longer valid (revoked).

    Must have one of the following: ['playbook-file', 'playbook-base64']

    Returns:
        a MISP object representing an 'security-playbook'

    """
    requires = ["playbook-file", "playbook-base64"]
    args = [
        "description",
        "labels",
        "organization-type",
        "playbook-abstraction",
        "playbook-base64",
        "playbook-creation-time",
        "playbook-creator",
        "playbook-file",
        "playbook-id",
        "playbook-impact",
        "playbook-modification-time",
        "playbook-priority",
        "playbook-severity",
        "playbook-standard",
        "playbook-type",
        "playbook-valid-from",
        "playbook-valid-until",
        "revoked",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|security-playbook"
    obj, isNew = MISPHelper._create_obj_cached(event, "security-playbook", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Folder(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Folder - function for creating MISP ftm-Folder object

    ftm-Folder = Folder

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        author - The original author, not the uploader
        authoredAt - Authored on
        companiesMentioned - Detected companies
        contentHash - SHA1 hash of the data
        country - Country
        crawler - The crawler used to acquire this file
        date - If not otherwise specified
        description - Description
        detectedCountry - Detected country
        detectedLanguage - Detected language
        emailMentioned - Detected e-mail addresses
        encoding - File encoding
        extension - File extension
        fileName - File name
        fileSize - File size
        generator - The program used to generate this file
        ibanMentioned - Detected IBANs
        indexText - Index text
        indexUpdatedAt - Index updated at
        ipMentioned - Detected IP addresses
        keywords - Keywords
        language - Language
        locationMentioned - Detected locations
        messageId - Message ID of a document; unique in most cases
        mimeType - MIME type
        modifiedAt - Modified on
        name - Name
        namesMentioned - Detected names
        notes - Notes
        peopleMentioned - Detected people
        phoneMentioned - Detected phones
        previousName - Previous name
        processingError - Processing error
        processingStatus - Processing status
        program - Program
        publishedAt - Published on
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        summary - Summary
        title - Title
        topics - Topics
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Folder'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "author",
        "authoredAt",
        "companiesMentioned",
        "contentHash",
        "country",
        "crawler",
        "date",
        "description",
        "detectedCountry",
        "detectedLanguage",
        "emailMentioned",
        "encoding",
        "extension",
        "fileName",
        "fileSize",
        "generator",
        "ibanMentioned",
        "indexText",
        "indexUpdatedAt",
        "ipMentioned",
        "keywords",
        "language",
        "locationMentioned",
        "messageId",
        "mimeType",
        "modifiedAt",
        "name",
        "namesMentioned",
        "notes",
        "peopleMentioned",
        "phoneMentioned",
        "previousName",
        "processingError",
        "processingStatus",
        "program",
        "publishedAt",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "summary",
        "title",
        "topics",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Folder"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Folder", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_btc_wallet(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_btc_wallet - function for creating MISP btc-wallet object

    btc-wallet = An object to describe a Bitcoin wallet. Best to be used with btc-transaction object.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        BTC_received - Value of received BTC
        BTC_sent - Value of sent BTC
        balance_BTC - Value in BTC at date/time displayed in field 'time'
        time - Date and time of lookup/conversion
        wallet-address - A Bitcoin wallet address

    Must have one of the following: ['wallet-address']

    Returns:
        a MISP object representing an 'btc-wallet'

    """
    requires = ["wallet-address"]
    args = ["BTC_received", "BTC_sent", "balance_BTC", "time", "wallet-address"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|btc-wallet"
    obj, isNew = MISPHelper._create_obj_cached(event, "btc-wallet", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_software_hive_userprofile_winlogon(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_software_hive_userprofile_winlogon - function for creating MISP regripper-software-hive-userprofile-winlogon object

    regripper-software-hive-userprofile-winlogon = Regripper Object template designed to gather user profile information when the user logs onto the system, gathered from the software hive.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        AutoAdminLogon - Flag value to determine if autologon is enabled for a user without entering the password.
        AutoRestartShell - Value of the flag set to auto restart the shell if it crashes or shuts down automatically.
        CachedLogonCount - Number of times the user has logged into the system.
        Comments - Additional comments.
        DefaultUserName - user-name of the default user.
        DisableCAD - Flag to determine if user login is enabled by pressing Ctrl+ALT+Delete.
        Legal-notice-caption - Message title set to display when the user logs-in.
        Legal-notice-text - Message set to display when the user logs-in.
        PasswordExpiryWarining - Number of times the password expiry warning appeared.
        PowerdownAfterShutDown - Flag value- if the system is set to power down after it is shutdown.
        PreCreateKnownFolders - create known folders key
        ReportBootOk - Flag to check if the reboot was successful.
        SID - Security identifier assigned to the user profile.
        Shell - Shell set to run when the user logs onto the system.
        ShutdownFlags - Number of times shutdown is initiated from a process when the user is logged-in.
        ShutdownWithoutLogon - Value of the flag set to enable shutdown without requiring a user to login.
        UserInit - Applications and files set to run when the user logs onto the system (User logon activity).
        WinStationsDisabled - Flag value set to enable/disable logons to the system.
        user-profile-key-last-write-time - Date and time when the key was last updated.
        user-profile-key-path - key where the user-profile information is retrieved from.
        user-profile-last-write-time - Date and time when the user profile was last updated.
        user-profile-path - Path of the user profile on the system
        winlogon-key-last-write-time - Date and time when the winlogon key was last updated.
        winlogon-key-path - winlogon key referred in order to retrieve default user information

    Returns:
        a MISP object representing an 'regripper-software-hive-userprofile-winlogon'

    """
    requires = []
    args = [
        "AutoAdminLogon",
        "AutoRestartShell",
        "CachedLogonCount",
        "Comments",
        "DefaultUserName",
        "DisableCAD",
        "Legal-notice-caption",
        "Legal-notice-text",
        "PasswordExpiryWarining",
        "PowerdownAfterShutDown",
        "PreCreateKnownFolders",
        "ReportBootOk",
        "SID",
        "Shell",
        "ShutdownFlags",
        "ShutdownWithoutLogon",
        "UserInit",
        "WinStationsDisabled",
        "user-profile-key-last-write-time",
        "user-profile-key-path",
        "user-profile-last-write-time",
        "user-profile-path",
        "winlogon-key-last-write-time",
        "winlogon-key-path",
    ]

    validate_args(requires, kwargs)
    uniq_str = (
        generate_uniq(requires, kwargs)
        + "|regripper-software-hive-userprofile-winlogon"
    )
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-software-hive-userprofile-winlogon", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_tsk_web_history(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_tsk_web_history - function for creating MISP tsk-web-history object

    tsk-web-history = An Object Template to share web history information

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        URL - The URL accessed.
        additional-comments - Comments.
        browser - Browser used to access the URL.
        datetime-accessed - date and the time when the URL was accessed.
        domain-ip - IP of the URL domain.
        domain-name - Domain of the URL.
        referrer - where the URL was referred from
        title - Title of the web page

    Returns:
        a MISP object representing an 'tsk-web-history'

    """
    requires = []
    args = [
        "URL",
        "additional-comments",
        "browser",
        "datetime-accessed",
        "domain-ip",
        "domain-name",
        "referrer",
        "title",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|tsk-web-history"
    obj, isNew = MISPHelper._create_obj_cached(event, "tsk-web-history", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_software_hive_windows_general_info(
    event: MISPEvent, **kwargs
) -> MISPObject:
    """
    create_obj_regripper_software_hive_windows_general_info - function for creating MISP regripper-software-hive-windows-general-info object

    regripper-software-hive-windows-general-info = Regripper Object template designed to gather general windows information extracted from the software-hive.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        BuildGUID - Build ID.
        BuildLab - Windows BuildLab string.
        BuildLabEx - Windows BuildLabEx string.
        CSDVersion - Version of the service pack installed.
        CurrentBuild - Build number of the windows OS.
        CurrentBuildType - Current build type of the OS.
        CurrentVersion - Current version of windows
        EditionID - Windows edition.
        InstallDate - Date when windows was installed.
        InstallationType - Type of windows installation.
        PathName - Path to the root directory.
        ProductID - ID of the product version.
        ProductName - Name of the windows version.
        RegisteredOrganization - Name of the registered organization.
        RegisteredOwner - Name of the registered owner.
        SoftwareType - Software type of windows.
        SystemRoot - Root directory.
        comment - Additional comments.
        last-write-time - Date and time when the key was last updated.
        win-cv-path - key where the windows information is retrieved from

    Returns:
        a MISP object representing an 'regripper-software-hive-windows-general-info'

    """
    requires = []
    args = [
        "BuildGUID",
        "BuildLab",
        "BuildLabEx",
        "CSDVersion",
        "CurrentBuild",
        "CurrentBuildType",
        "CurrentVersion",
        "EditionID",
        "InstallDate",
        "InstallationType",
        "PathName",
        "ProductID",
        "ProductName",
        "RegisteredOrganization",
        "RegisteredOwner",
        "SoftwareType",
        "SystemRoot",
        "comment",
        "last-write-time",
        "win-cv-path",
    ]

    validate_args(requires, kwargs)
    uniq_str = (
        generate_uniq(requires, kwargs)
        + "|regripper-software-hive-windows-general-info"
    )
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-software-hive-windows-general-info", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_instant_message_group(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_instant_message_group - function for creating MISP instant-message-group object

    instant-message-group = Instant Message (IM) group object template describing a public or private IM group, channel or conversation.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        app-used - The IM application used to send the message.
        archive - Archive of the original group (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts, group members, etc.
        group-alias - Aliases of group, channel or community.
        group-name - The name of the group, channel or community.
        link - Original link into the group (Supposed harmless).
        person-name - A person who is a member of the group.
        url - Original URL location of the group (potentially malicious).
        username - A user account who is a member of the group.

    Must have one of the following: ['group-name', 'group-alias', 'archive', 'attachment']

    Returns:
        a MISP object representing an 'instant-message-group'

    """
    requires = ["group-name", "group-alias", "archive", "attachment"]
    args = [
        "app-used",
        "archive",
        "attachment",
        "group-alias",
        "group-name",
        "link",
        "person-name",
        "url",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|instant-message-group"
    obj, isNew = MISPHelper._create_obj_cached(event, "instant-message-group", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_spearphishing_link(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_spearphishing_link - function for creating MISP spearphishing-link object

    spearphishing-link = Spearphishing Link

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        date - Date and time e-mail was sent.
        email-sender - The source address from which the e-mail was sent.
        embedded-link - The malicious URL in the e-mail body.
        redirect-url - The redirect URL, if any, from the malicious embedded link.
        research-links - A link to an external analysis (VirusTotal, urlscan, etc.).
        sender-ip - The source IP from which the e-mail was sent.
        subject - The subject line of the e-mail.
        supporting-evidence - Description of the spearphish e-mail.

    Returns:
        a MISP object representing an 'spearphishing-link'

    """
    requires = []
    args = [
        "date",
        "email-sender",
        "embedded-link",
        "redirect-url",
        "research-links",
        "sender-ip",
        "subject",
        "supporting-evidence",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|spearphishing-link"
    obj, isNew = MISPHelper._create_obj_cached(event, "spearphishing-link", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_email(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_email - function for creating MISP email object

    email = Email object describing an email with meta-information

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        attachment - Attachment
        bcc - Blind carbon copy
        bcc-display-name - Display name of the blind carbon copy
        cc - Carbon copy
        cc-display-name - Display name of the carbon copy
        email-body - Body of the email
        email-body-attachment - Body of the email as an attachment
        eml - Full EML
        from - Sender email address
        from-display-name - Display name of the sender
        from-domain - Sender domain address (when only the source domain is known)
        header - Full headers
        ip-src - Source IP address of the email sender
        message-id - Message ID
        mime-boundary - MIME Boundary
        msg - Full MSG
        received-header-hostname - Extracted hostname from parsed headers
        received-header-ip - Extracted IP address from parsed headers
        reply-to - Email address the reply will be sent to
        reply-to-display-name - Display name of the email address the reply will be sent to
        return-path - Message return path
        screenshot - Screenshot of email
        send-date - Date the email has been sent
        subject - Subject
        thread-index - Identifies a particular conversation thread
        to - Destination email address
        to-display-name - Display name of the receiver
        user-agent - User Agent of the sender
        x-mailer - X-Mailer generally tells the program that was used to draft and send the original email

    Must have one of the following: ['from', 'from-display-name', 'to', 'to-display-name', 'subject', 'attachment', 'message-id', 'reply-to', 'send-date', 'mime-boundary', 'thread-index', 'header', 'x-mailer', 'return-path', 'email-body', 'email-body-attachment', 'eml', 'msg']

    Returns:
        a MISP object representing an 'email'

    """
    requires = [
        "from",
        "from-display-name",
        "to",
        "to-display-name",
        "subject",
        "attachment",
        "message-id",
        "reply-to",
        "send-date",
        "mime-boundary",
        "thread-index",
        "header",
        "x-mailer",
        "return-path",
        "email-body",
        "email-body-attachment",
        "eml",
        "msg",
    ]
    args = [
        "attachment",
        "bcc",
        "bcc-display-name",
        "cc",
        "cc-display-name",
        "email-body",
        "email-body-attachment",
        "eml",
        "from",
        "from-display-name",
        "from-domain",
        "header",
        "ip-src",
        "message-id",
        "mime-boundary",
        "msg",
        "received-header-hostname",
        "received-header-ip",
        "reply-to",
        "reply-to-display-name",
        "return-path",
        "screenshot",
        "send-date",
        "subject",
        "thread-index",
        "to",
        "to-display-name",
        "user-agent",
        "x-mailer",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|email"
    obj, isNew = MISPHelper._create_obj_cached(event, "email", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_dkim(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_dkim - function for creating MISP dkim object

    dkim = DomainKeys Identified Mail - DKIM

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        d - DKIM domain used for the selector record
        dkim - DomainKeys Identified Mail - DKIM full DNS TXT record
        h - DKIM hash type
        k - DKIM key type
        n - DKIM administrator note
        public-key - DKIM public key
        s - DKIM service record
        t - DKIM domain testing
        version - DKIM version

    Returns:
        a MISP object representing an 'dkim'

    """
    requires = []
    args = ["d", "dkim", "h", "k", "n", "public-key", "s", "t", "version"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|dkim"
    obj, isNew = MISPHelper._create_obj_cached(event, "dkim", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_network_connection(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_network_connection - function for creating MISP network-connection object

    network-connection = A local or remote network connection.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        community-id - Flow description as a community ID hash value
        count - Number of similar network connections seen
        dst-bytes-count - Number of bytes sent from the source to the destination.
        dst-packets-count - Number of packets sent from the source to the destination.
        dst-port - Destination port of the nework connection.
        first-packet-seen - Datetime of the first packet seen.
        hostname-dst - Destination hostname of the network connection.
        hostname-src - Source hostname of the network connection.
        ip-dst - Destination IP address of the nework connection.
        ip-src - Source IP address of the nework connection.
        last-packet-seen - Datetime of the last packet seen.
        layer3-protocol - Layer 3 protocol of the network connection.
        layer4-protocol - Layer 4 protocol of the network connection.
        layer7-protocol - Layer 7 protocol of the network connection.
        mac-dst - Destination MAC address of the network connection.
        mac-src - Source MAC address of the network connection.
        src-bytes-count - Number of bytes sent from the destination to the source.
        src-packets-count - Number of packets sent from the destination to the source.
        src-port - Source port of the nework connection.

    Must have one of the following: ['first-packet-seen', 'ip-src', 'ip-dst', 'src-port', 'dst-port', 'community-id']

    Returns:
        a MISP object representing an 'network-connection'

    """
    requires = [
        "first-packet-seen",
        "ip-src",
        "ip-dst",
        "src-port",
        "dst-port",
        "community-id",
    ]
    args = [
        "community-id",
        "count",
        "dst-bytes-count",
        "dst-packets-count",
        "dst-port",
        "first-packet-seen",
        "hostname-dst",
        "hostname-src",
        "ip-dst",
        "ip-src",
        "last-packet-seen",
        "layer3-protocol",
        "layer4-protocol",
        "layer7-protocol",
        "mac-dst",
        "mac-src",
        "src-bytes-count",
        "src-packets-count",
        "src-port",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|network-connection"
    obj, isNew = MISPHelper._create_obj_cached(event, "network-connection", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_network_profile(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_network_profile - function for creating MISP network-profile object

    network-profile = Elements that can be used to profile, pivot or identify a network infrastructure, including domains, ip and urls.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        asn - ASN where the content is hosted
        certificate-common-name - Certificate common name
        certificate-country - Certificate country name
        certificate-creation-date - Certificate date it was created
        certificate-expiry-date - Certificate date it will expire
        certificate-issuer - Certificate Issuer
        certificate-organization - Certificate organization
        certificate-organization-locality - Certificate locality
        certificate-organization-state - Certificate state or provincy name
        certificate-organization-unit - Certificate organization unit
        dns-server - DNS server
        domain - Domain of the whois entry
        evidences - Screenshot of the network resources.
        google-analytics-id - Google analytics IDS
        hosting-provider - The hosting provider/ISP where the resources are.
        ip-address - IP address of the whois entry
        jarm - JARM Footprint string
        port - Port number
        query_string - Query (after path, preceded by '?')
        resource_path - Path (between hostname:port and query)
        service-abuse - Service abused by threat actors as part of their infrastructure.
        subdomain - Subdomain
        text - Full whois entry
        threat-actor-infrastructure-pattern - Patterns found on threat actor infrastructure that can correlate with other analysis.
        threat-actor-infrastructure-value - Unique valeu found on threat actor infrastructure identified through an investigation.
        tld - Top-Level Domain
        url - Full URL
        whois-creation-date - Initial creation of the whois entry
        whois-expiration-date - Expiration of the whois entry
        whois-registrant-email - Registrant email address
        whois-registrant-name - Registrant name
        whois-registrant-org - Registrant organisation
        whois-registrant-phone - Registrant phone number
        whois-registrar - Registrar of the whois entry

    Must have one of the following: ['domain', 'ip-address', 'url']

    Returns:
        a MISP object representing an 'network-profile'

    """
    requires = ["domain", "ip-address", "url"]
    args = [
        "asn",
        "certificate-common-name",
        "certificate-country",
        "certificate-creation-date",
        "certificate-expiry-date",
        "certificate-issuer",
        "certificate-organization",
        "certificate-organization-locality",
        "certificate-organization-state",
        "certificate-organization-unit",
        "dns-server",
        "domain",
        "evidences",
        "google-analytics-id",
        "hosting-provider",
        "ip-address",
        "jarm",
        "port",
        "query_string",
        "resource_path",
        "service-abuse",
        "subdomain",
        "text",
        "threat-actor-infrastructure-pattern",
        "threat-actor-infrastructure-value",
        "tld",
        "url",
        "whois-creation-date",
        "whois-expiration-date",
        "whois-registrant-email",
        "whois-registrant-name",
        "whois-registrant-org",
        "whois-registrant-phone",
        "whois-registrar",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|network-profile"
    obj, isNew = MISPHelper._create_obj_cached(event, "network-profile", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_sigmf_recording(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_sigmf_recording - function for creating MISP sigmf-recording object

    sigmf-recording = An object representing a single IQ/RF sample in the Signal Metadata Format Specification (SigMF)

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        SigMF-data - Binary file of IQ or RF samples (.sigmf-data)
        SigMF-meta - Metadata file in SigMF format (.sigmf-meta)

    Returns:
        a MISP object representing an 'sigmf-recording'

    """
    requires = []
    args = ["SigMF-data", "SigMF-meta"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|sigmf-recording"
    obj, isNew = MISPHelper._create_obj_cached(event, "sigmf-recording", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_paste(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_paste - function for creating MISP paste object

    paste = Paste or similar post from a website allowing to share privately or publicly posts.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        first-seen - When the paste has been accessible or seen for the first time.
        last-seen - When the paste has been accessible or seen for the last time.
        link - Link to the original source of the source or post (when used legitimately for OSINT source or alike).
        origin - Original source of the paste or post.
        paste - Raw text of the paste or post
        paste-file - Content of the paste in file
        title - Title of the paste or post.
        url - Link to the original source of the paste or post (when used maliciously).
        username - User who posted the post.

    Must have one of the following: ['origin', 'paste']

    Returns:
        a MISP object representing an 'paste'

    """
    requires = ["origin", "paste"]
    args = [
        "first-seen",
        "last-seen",
        "link",
        "origin",
        "paste",
        "paste-file",
        "title",
        "url",
        "username",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|paste"
    obj, isNew = MISPHelper._create_obj_cached(event, "paste", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_elf(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_elf - function for creating MISP elf object

    elf = Object describing a Executable and Linkable Format

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        arch - Architecture of the ELF file
        entrypoint-address - Address of the entry point
        number-sections - Number of sections
        os_abi - Header operating system application binary interface (ABI)
        text - Free text value to attach to the ELF
        type - Type of ELF

    Must have one of the following: ['text', 'entrypoint-address']

    Returns:
        a MISP object representing an 'elf'

    """
    requires = ["text", "entrypoint-address"]
    args = ["arch", "entrypoint-address", "number-sections", "os_abi", "text", "type"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|elf"
    obj, isNew = MISPHelper._create_obj_cached(event, "elf", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_UserAccount(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_UserAccount - function for creating MISP ftm-UserAccount object

    ftm-UserAccount = User Account

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        country - Country
        description - Description
        email - E-mail
        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        modifiedAt - Modified on
        name - Name
        notes - Notes
        number - Phone Number
        password - Password
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        service - Service
        sourceUrl - Source link
        summary - Summary
        topics - Topics
        username - Username
        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-UserAccount'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "country",
        "description",
        "email",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "modifiedAt",
        "name",
        "notes",
        "number",
        "password",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "service",
        "sourceUrl",
        "summary",
        "topics",
        "username",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-UserAccount"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-UserAccount", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Payment(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Payment - function for creating MISP ftm-Payment object

    ftm-Payment = A monetary payment between two parties.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        alephUrl - Aleph URL
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        currency - Currency
        date - Date
        description - Description
        endDate - End date
        indexText - Index text
        modifiedAt - Modified on
        programme - Programme name, funding code, category identifier, etc.
        publisher - Publishing source
        publisherUrl - Publishing source URL
        purpose - Payment purpose
        recordId - Record ID
        retrievedAt - Retrieved on
        sequenceNumber - Sequence number
        sourceUrl - Source URL
        startDate - Start date
        summary - Summary
        transactionNumber - Transaction number

    Returns:
        a MISP object representing an 'ftm-Payment'

    """
    requires = []
    args = [
        "alephUrl",
        "amount",
        "amountEur",
        "amountUsd",
        "currency",
        "date",
        "description",
        "endDate",
        "indexText",
        "modifiedAt",
        "programme",
        "publisher",
        "publisherUrl",
        "purpose",
        "recordId",
        "retrievedAt",
        "sequenceNumber",
        "sourceUrl",
        "startDate",
        "summary",
        "transactionNumber",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Payment"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Payment", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ransomware_group_post(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ransomware_group_post - function for creating MISP ransomware-group-post object

    ransomware-group-post = Ransomware group post as monitored by ransomlook.io

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        date - Last update of the post as seen on the ransomware group blog. Different than the first/last seen from the crawling.
        description - Raw post.
        link - Original URL location of the post.
        title - Title of blog post.

    Must have one of the following: ['title', 'description', 'link']

    Returns:
        a MISP object representing an 'ransomware-group-post'

    """
    requires = ["title", "description", "link"]
    args = ["date", "description", "link", "title"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ransomware-group-post"
    obj, isNew = MISPHelper._create_obj_cached(event, "ransomware-group-post", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_pe_section(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_pe_section - function for creating MISP pe-section object

    pe-section = Object describing a section of a Portable Executable

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        characteristic - Characteristic of the section
        entropy - Entropy of the whole section
        md5 - [Insecure] MD5 hash (128 bits)
        name - Name of the section
        offset - Section’s offset
        sha1 - [Insecure] Secure Hash Algorithm 1 (160 bits)
        sha224 - Secure Hash Algorithm 2 (224 bits)
        sha256 - Secure Hash Algorithm 2 (256 bits)
        sha384 - Secure Hash Algorithm 2 (384 bits)
        sha512 - Secure Hash Algorithm 2 (512 bits)
        sha512/224 - Secure Hash Algorithm 2 (224 bits)
        sha512/256 - Secure Hash Algorithm 2 (256 bits)
        size-in-bytes - Size of the section, in bytes
        ssdeep - Fuzzy hash using context triggered piecewise hashes (CTPH)
        text - Free text value to attach to the section
        virtual_address - Section’s virtual address
        virtual_size - Section’s virtual size

    Must have one of the following: ['text', 'name', 'md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'sha512/224', 'sha512/256']

    Returns:
        a MISP object representing an 'pe-section'

    """
    requires = [
        "text",
        "name",
        "md5",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha512/224",
        "sha512/256",
    ]
    args = [
        "characteristic",
        "entropy",
        "md5",
        "name",
        "offset",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha512/224",
        "sha512/256",
        "size-in-bytes",
        "ssdeep",
        "text",
        "virtual_address",
        "virtual_size",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|pe-section"
    obj, isNew = MISPHelper._create_obj_cached(event, "pe-section", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_Deception_PersNOna(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_Deception_PersNOna - function for creating MISP Deception PersNOna object

    Deception PersNOna = Fake persona with tasks

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        actions - Actions by this PersNOna or engagement with adversary or relateda party.
        alias - Aliases or Nicknames of fake PesNOna on differenet media.
        background - Background of operation, PersNOna or actions, which needs to be explain to other party in case of share of this profile.
        conversations - Conversations with targets
        critical_tasks - Critical Tasks or tasks which this PersNOna has to accomplish.
        goals - Goals of creating of this PersNOna.
        location - Location, where PersNOna is right now at home, home town, county, country etc.
        media - Media where is PersNOna active ie. facebook, telegram etc.
        name - Name - full name of PersNOna.
        oppportunities - Opportunities for another development, introducing another PersNOna etc.
        photo - Photo of PersNOna, url where is photo uploaded or website of fake profile as LinkedIn etc.
        questions - Questions, which have to be answered by this profile goal.
        responsi - Responsibilities of PersNOna, who this PersNOna communicates with, what should discuss and how far.

    Returns:
        a MISP object representing an 'Deception PersNOna'

    """
    requires = []
    args = [
        "actions",
        "alias",
        "background",
        "conversations",
        "critical_tasks",
        "goals",
        "location",
        "media",
        "name",
        "oppportunities",
        "photo",
        "questions",
        "responsi",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|Deception PersNOna"
    obj, isNew = MISPHelper._create_obj_cached(event, "Deception PersNOna", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_target_system(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_target_system - function for creating MISP target-system object

    target-system = Description about an targeted system, this could potentially be a compromissed internal system

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        targeted_ip_of_system - Targeted system IP address
        targeted_machine - Targeted system
        timestamp_seen - Registered date and time

    Must have one of the following: ['targeted_machine']

    Returns:
        a MISP object representing an 'target-system'

    """
    requires = ["targeted_machine"]
    args = ["targeted_ip_of_system", "targeted_machine", "timestamp_seen"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|target-system"
    obj, isNew = MISPHelper._create_obj_cached(event, "target-system", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_twitter_list(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_twitter_list - function for creating MISP twitter-list object

    twitter-list = Twitter list.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        archive - Archive of the account (Internet Archive, Archive.is, etc).
        attachment - A screen capture or exported list of contacts etc.
        description - A description of the list.
        embedded-link - Link embedded in the description (potentially malicious).
        embedded-safe-link - Link embedded in the description (supposed safe).
        hashtag - Hashtag embedded in the description.
        id - Numeric list id.
        link - Original link to the list (supposed harmless).
        member-count - Number of accounts following this list.
        name - List's screen name (without the @).
        subscriber-count - Number of accounts subscribing to this list.
        url - Original URL location of the list (potentially malicious).
        user-id - Id of the account that manages this list.
        user-name - Name of the account that manages this list (without the @).

    Must have one of the following: ['name', 'id', 'description', 'archive', 'link']

    Returns:
        a MISP object representing an 'twitter-list'

    """
    requires = ["name", "id", "description", "archive", "link"]
    args = [
        "archive",
        "attachment",
        "description",
        "embedded-link",
        "embedded-safe-link",
        "hashtag",
        "id",
        "link",
        "member-count",
        "name",
        "subscriber-count",
        "url",
        "user-id",
        "user-name",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|twitter-list"
    obj, isNew = MISPHelper._create_obj_cached(event, "twitter-list", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_sigmf_expanded_recording(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_sigmf_expanded_recording - function for creating MISP sigmf-expanded-recording object

    sigmf-expanded-recording = An object representing a single IQ/RF sample in the Signal Metadata Format Specification (SigMF)

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        author - A text identifier for the author potentially including name, handle, email, and/or other ID like Amateur Call Sign.
        collection - The base filename of a collection with which this Recording is associated.
        data_doi - The registered DOI (ISO 26324) for a Recording's Dataset file.
        dataset - The full filename of the Dataset file this Metadata file describes.
        datatype -
        description - A text description of the SigMF Recording.
        fft-plot - FFT plot of the signal
        geolocation_alt - The location of the Recording system (altitude).
        geolocation_lat - The location of the Recording system (latitude).
        geolocation_long - The location of the Recording system (longitude).
        hw - A text description of the hardware used to make the Recording.
        iq-sample - Binary file of IQ samples
        license - A URL for the license document under which the Recording is offered.
        meta_doi - The registered DOI (ISO 26324) for a Recording's Metadata file.
        metadata_only - Indicates the Metadata file is intentionally distributed without the Dataset.
        num_channels - Total number of interleaved channels in the Dataset file. If omitted, this defaults to one.
        offset - The index number of the first sample in the Dataset. If not provided, this value defaults to zero. Typically used when a Recording is split over multiple files. All sample indices in SigMF are absolute, and so all other indices referenced in metadata for this recording SHOULD be greater than or equal to this value.
        recorder - The name of the software used to make this SigMF Recording.
        sample_rate - The sample rate of the signal in samples per second.
        sha512 - The SHA512 hash of the Dataset file associated with the SigMF file.
        trailing_bytes - The number of bytes to ignore at the end of a Non-Conforming Dataset file.
        version - The version of the SigMF specification used to create the Metadata file.
        waterfall-plot - Waterfall plot of the signal

    Returns:
        a MISP object representing an 'sigmf-expanded-recording'

    """
    requires = []
    args = [
        "author",
        "collection",
        "data_doi",
        "dataset",
        "datatype",
        "description",
        "fft-plot",
        "geolocation_alt",
        "geolocation_lat",
        "geolocation_long",
        "hw",
        "iq-sample",
        "license",
        "meta_doi",
        "metadata_only",
        "num_channels",
        "offset",
        "recorder",
        "sample_rate",
        "sha512",
        "trailing_bytes",
        "version",
        "waterfall-plot",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|sigmf-expanded-recording"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "sigmf-expanded-recording", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_process(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_process - function for creating MISP process object

    process = Object describing a system process.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        args - Arguments of the process
        child-pid - Process ID of the child(ren) process
        command-line - Command line of the process
        creation-time - Local date/time at which the process was created
        current-directory - Current working directory of the process
        fake-process-name - Is the process spawned under a false name.
        guid - The globally unique identifier of the assigned by the vendor product
        hidden - Specifies whether the process is hidden
        image - Path of process image
        integrity-level - Integrity level of the process
        name - Name of the process
        parent-command-line - Command line of the parent process
        parent-guid - The globally unique idenifier of the parent process assigned by the vendor product
        parent-image - Path of parent process image
        parent-pid - Process ID of the parent process
        parent-process-name - Process name of the parent
        parent-process-path - Parent process path of the parent
        pgid - Identifier of the group of processes the process belong to
        pid - Process ID of the process
        port - Port(s) owned by the process
        process-state - State of process.
        start-time - Local date/time at which the process was started
        user-creator - User who created of the process
        user-process - User who is running the process at the time of the analysis

    Must have one of the following: ['name', 'pid', 'image', 'command-line', 'current-directory']

    Returns:
        a MISP object representing an 'process'

    """
    requires = ["name", "pid", "image", "command-line", "current-directory"]
    args = [
        "args",
        "child-pid",
        "command-line",
        "creation-time",
        "current-directory",
        "fake-process-name",
        "guid",
        "hidden",
        "image",
        "integrity-level",
        "name",
        "parent-command-line",
        "parent-guid",
        "parent-image",
        "parent-pid",
        "parent-process-name",
        "parent-process-path",
        "pgid",
        "pid",
        "port",
        "process-state",
        "start-time",
        "user-creator",
        "user-process",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|process"
    obj, isNew = MISPHelper._create_obj_cached(event, "process", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_av_signature(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_av_signature - function for creating MISP av-signature object

    av-signature = Antivirus detection signature

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        datetime - Datetime
        signature - Name of detection signature
        software - Name of antivirus software
        text - Free text value to attach to the file

    Returns:
        a MISP object representing an 'av-signature'

    """
    requires = []
    args = ["datetime", "signature", "software", "text"]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|av-signature"
    obj, isNew = MISPHelper._create_obj_cached(event, "av-signature", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_edr_report(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_edr_report - function for creating MISP edr-report object

    edr-report = An Object Template to encode an EDR detection report

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        additional-file - Additional file involved in detection
        command - JSON file containing the output of a command ran at report generation
        comment - Any valuable comment about the report
        drivers - JSON file containing metadata about drivers loaded on the system
        endpoint-id - Unique identifier of the endpoint concerned by the report
        event - Raw EDR event which triggered reporting
        executable - Executable file involved in detection
        hostname - Endpoint hostname
        id - Report unique identifier
        ip - Endpoint IP address
        modules - JSON file containing metadata about modules loaded on the system
        processes - JSON file containing metadata about running processes at the time of detection
        product - EDR product name

    Must have one of the following: ['id', 'endpoint-id', 'event']

    Returns:
        a MISP object representing an 'edr-report'

    """
    requires = ["id", "endpoint-id", "event"]
    args = [
        "additional-file",
        "command",
        "comment",
        "drivers",
        "endpoint-id",
        "event",
        "executable",
        "hostname",
        "id",
        "ip",
        "modules",
        "processes",
        "product",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|edr-report"
    obj, isNew = MISPHelper._create_obj_cached(event, "edr-report", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_imsi_catcher(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_imsi_catcher - function for creating MISP imsi-catcher object

    imsi-catcher = IMSI Catcher entry object based on the open source IMSI cather

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        brand - Brand associated with the IMSI registration.
        cellid - CellID
        country - Country where the IMSI is registered.
        first-seen - When the IMSI has been accessible or seen for the first time.
        imsi - A usually unique International Mobile Subscriber Identity (IMSI) is allocated to each mobile subscriber in the GSM/UMTS/EPS system. IMSI can also refer to International Mobile Station Identity in the ITU nomenclature.
        lac - LAC - Location Area Code
        mcc - MCC - Mobile Country Code
        mnc - MNC - Mobile Network Code
        operator - Operator associated with the IMSI registration.
        seq - A sequence number for the collection
        text - A description of the IMSI record.
        tmsi-1 - Temporary Mobile Subscriber Identities (TMSI) to visiting mobile subscribers can be allocated.
        tmsi-2 - Temporary Mobile Subscriber Identities (TMSI) to visiting mobile subscribers can be allocated.

    Must have one of the following: ['text', 'first-seen', 'imsi']

    Returns:
        a MISP object representing an 'imsi-catcher'

    """
    requires = ["text", "first-seen", "imsi"]
    args = [
        "brand",
        "cellid",
        "country",
        "first-seen",
        "imsi",
        "lac",
        "mcc",
        "mnc",
        "operator",
        "seq",
        "text",
        "tmsi-1",
        "tmsi-2",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|imsi-catcher"
    obj, isNew = MISPHelper._create_obj_cached(event, "imsi-catcher", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_regripper_sam_hive_single_user(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_regripper_sam_hive_single_user - function for creating MISP regripper-sam-hive-single-user object

    regripper-sam-hive-single-user = Regripper Object template designed to present user profile details extracted from the SAM hive.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        comments - Full name assigned to the user profile.
        full-user-name - Full name assigned to the user profile.
        key - Registry key where the information is retrieved from.
        key-last-write-time - Date and time when the key was last updated.
        last-login-time - Date and time when the user last logged onto the system.
        login-count - Number of times the user logged-in onto the system.
        pwd-fail-date - Date and time when a password last failed for this user profile.
        pwd-reset-time - Date and time when the password was last reset.
        user-name - User name assigned to the user profile.

    Must have one of the following: ['user-name', 'last-login-time', 'login-count']

    Returns:
        a MISP object representing an 'regripper-sam-hive-single-user'

    """
    requires = ["user-name", "last-login-time", "login-count"]
    args = [
        "comments",
        "full-user-name",
        "key",
        "key-last-write-time",
        "last-login-time",
        "login-count",
        "pwd-fail-date",
        "pwd-reset-time",
        "user-name",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|regripper-sam-hive-single-user"
    obj, isNew = MISPHelper._create_obj_cached(
        event, "regripper-sam-hive-single-user", uniq_str
    )
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_transport_ticket(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_transport_ticket - function for creating MISP transport-ticket object

    transport-ticket = A transport ticket.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        class - Class of the ticket
        company - Street name
        copy - Copy of the ticket such as a photography or a FAX
        date-of-arrival - Date of arrival
        date-of-departure - Date of departure
        date-of-purchase - Date of purchase
        description - Description
        destination - Destination
        origin - Origin
        ticket-number - Ticket Number
        type-of-ticket - Type of ticket
        type-of-transport - Type of transport

    Must have one of the following: ['destination', 'origin']

    Returns:
        a MISP object representing an 'transport-ticket'

    """
    requires = ["destination", "origin"]
    args = [
        "class",
        "company",
        "copy",
        "date-of-arrival",
        "date-of-departure",
        "date-of-purchase",
        "description",
        "destination",
        "origin",
        "ticket-number",
        "type-of-ticket",
        "type-of-transport",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|transport-ticket"
    obj, isNew = MISPHelper._create_obj_cached(event, "transport-ticket", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_game_cheat(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_game_cheat - function for creating MISP game-cheat object

    game-cheat = Describes a game cheat or a cheatware.

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        affected-game - Name of the game that is targeted by the cheatware.
        cheat-name - Known name of the game cheat, if given.
        cheat-screenshot - Screenshot of the cheat at work.
        cheat-type - Select a type of cheat.
        cheat-version - Any information about the cheatware version.
        compilation-date - Compilation date of the game cheat, if known.
        creator - Individual and/or Group and/or Organization that created the cheat.
        ig-cheat-behaviour - Describe the in-game behaviour of the cheat (e.g. You selected 'Aim Bot', here you can add details like 'Activate by pressing F7, Deactivate by pressing F8. Not detected be Easy Anti-Cheat.')
        implementation - How cheatware is implemented
        implementation-details - Additionnal informations about the implementation of the cheatware. (e.g. Requires to swap a dll file.)
        operating-system - Operating system required and its version.
        pricing - Cheatware price, 0 if free.
        webpage - Place where the cheat is promoted. Website, Forum, Download page, ...

    Returns:
        a MISP object representing an 'game-cheat'

    """
    requires = []
    args = [
        "affected-game",
        "cheat-name",
        "cheat-screenshot",
        "cheat-type",
        "cheat-version",
        "compilation-date",
        "creator",
        "ig-cheat-behaviour",
        "implementation",
        "implementation-details",
        "operating-system",
        "pricing",
        "webpage",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|game-cheat"
    obj, isNew = MISPHelper._create_obj_cached(event, "game-cheat", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_abuseipdb(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_abuseipdb - function for creating MISP abuseipdb object

    abuseipdb = AbuseIPDB checks an ip address, domain name, or subnet against a central blacklist

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        abuse-confidence-score - Rating (0-100) of how confident AbuseIPDB is that an IP address is entirely malicious
        is-malicious - If the IP is malicious based on the abuse-confidence-score and threshold
        is-public - If an IP is public
        is-tor - If Tor (The Onion Router) was used
        is-whitelisted - If an IP is spotted in any of AbuseIPDB's whitelists

    Returns:
        a MISP object representing an 'abuseipdb'

    """
    requires = []
    args = [
        "abuse-confidence-score",
        "is-malicious",
        "is-public",
        "is-tor",
        "is-whitelisted",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|abuseipdb"
    obj, isNew = MISPHelper._create_obj_cached(event, "abuseipdb", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Contract(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Contract - function for creating MISP ftm-Contract object

    ftm-Contract = An contract or contract lot issued by an authority. Multiple lots may be awarded to different suppliers (see ContractAward).


    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        amount - Amount
        amountEur - Amount in EUR
        amountUsd - Amount in USD
        cancelled - Cancelled?
        classification - Classification
        contractDate - Contract date
        country - Country
        criteria - Contract award criteria
        currency - Currency
        description - Description
        indexText - Index text
        indexUpdatedAt - Index updated at
        keywords - Keywords
        language - Language
        method - Procurement method
        modifiedAt - Modified on
        name - Contract name
        notes - Notes
        noticeId - Contract Award Notice ID
        numberAwards - Number of awards
        previousName - Previous name
        procedure - Contract procedure
        procedureNumber - Procedure number
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        retrievedAt - Retrieved on
        sourceUrl - Source link
        status - Procurement status
        summary - Summary
        title - Contract title
        topics - Topics
        type - Type of contract. Potentially W (Works), U (Supplies), S (Services).

        weakAlias - Weak alias
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Contract'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "amount",
        "amountEur",
        "amountUsd",
        "cancelled",
        "classification",
        "contractDate",
        "country",
        "criteria",
        "currency",
        "description",
        "indexText",
        "indexUpdatedAt",
        "keywords",
        "language",
        "method",
        "modifiedAt",
        "name",
        "notes",
        "noticeId",
        "numberAwards",
        "previousName",
        "procedure",
        "procedureNumber",
        "program",
        "publisher",
        "publisherUrl",
        "retrievedAt",
        "sourceUrl",
        "status",
        "summary",
        "title",
        "topics",
        "type",
        "weakAlias",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Contract"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Contract", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj


def create_obj_ftm_Person(event: MISPEvent, **kwargs) -> MISPObject:
    """
    create_obj_ftm_Person - function for creating MISP ftm-Person object

    ftm-Person = An individual

    Arguments:
        event - pyMISP MISP Event

    Keyword Arguments:
        address - Address
        alephUrl - Aleph URL
        alias - Other name
        birthDate - Birth date
        birthPlace - Place of birth
        bvdId - Bureau van Dijk ID
        classification - Classification
        country - Country
        deathDate - Death date
        description - Description
        dissolutionDate - The date the legal entity was dissolved, if applicable
        dunsCode - Dun & Bradstreet identifier
        email - Email address
        fatherName - Patronymic
        firstName - First name
        gender - Gender
        icijId - ID according to International Consortium for Investigative Journalists
        idNumber - ID number of any applicable ID
        incorporationDate - The date the legal entity was incorporated
        indexText - Index text
        indexUpdatedAt - Index updated at
        innCode - Russian company ID
        jurisdiction - Country or region in which this entity operates
        keywords - Keywords
        lastName - Last name
        legalForm - Legal form
        mainCountry - Primary country of this entity
        middleName - Middle name
        modifiedAt - Modified on
        motherName - Matronymic
        name - Name
        nationality - Nationality
        notes - Notes
        okpoCode - Russian industry classifier
        opencorporatesUrl - OpenCorporates URL
        passportNumber - Passport
        phone - Phone number
        position - Position
        previousName - Previous name
        program - Program
        publisher - Publishing source
        publisherUrl - Publishing source URL
        registrationNumber - Company registration number
        retrievedAt - Retrieved on
        secondName - Second name
        sector - Sector
        sourceUrl - Source link
        status - Status
        summary - Summary
        swiftBic - Bank identifier code
        taxNumber - Tax identification number
        taxStatus - Tax status
        title - Title
        topics - Topics
        vatCode - (EU) VAT number
        weakAlias - Weak alias
        website - Website address
        wikidataId - Wikidata ID
        wikipediaUrl - Wikipedia Article

    Returns:
        a MISP object representing an 'ftm-Person'

    """
    requires = []
    args = [
        "address",
        "alephUrl",
        "alias",
        "birthDate",
        "birthPlace",
        "bvdId",
        "classification",
        "country",
        "deathDate",
        "description",
        "dissolutionDate",
        "dunsCode",
        "email",
        "fatherName",
        "firstName",
        "gender",
        "icijId",
        "idNumber",
        "incorporationDate",
        "indexText",
        "indexUpdatedAt",
        "innCode",
        "jurisdiction",
        "keywords",
        "lastName",
        "legalForm",
        "mainCountry",
        "middleName",
        "modifiedAt",
        "motherName",
        "name",
        "nationality",
        "notes",
        "okpoCode",
        "opencorporatesUrl",
        "passportNumber",
        "phone",
        "position",
        "previousName",
        "program",
        "publisher",
        "publisherUrl",
        "registrationNumber",
        "retrievedAt",
        "secondName",
        "sector",
        "sourceUrl",
        "status",
        "summary",
        "swiftBic",
        "taxNumber",
        "taxStatus",
        "title",
        "topics",
        "vatCode",
        "weakAlias",
        "website",
        "wikidataId",
        "wikipediaUrl",
    ]

    validate_args(requires, kwargs)
    uniq_str = generate_uniq(requires, kwargs) + "|ftm-Person"
    obj, isNew = MISPHelper._create_obj_cached(event, "ftm-Person", uniq_str)
    if isNew:
        for arg in args:
            MISPHelper._add_obj_attribute(obj, arg, kwargs.get(arg))
    return obj
